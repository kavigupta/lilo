{
    "DSL": {
        "logVariable": 0.0,
        "productions": [
            {
                "expression": "_rdot",
                "logProbability": 0.0
            },
            {
                "expression": "_rempty",
                "logProbability": 0.0
            },
            {
                "expression": "_a",
                "logProbability": 0.0
            },
            {
                "expression": "_b",
                "logProbability": 0.0
            },
            {
                "expression": "_c",
                "logProbability": 0.0
            },
            {
                "expression": "_d",
                "logProbability": 0.0
            },
            {
                "expression": "_e",
                "logProbability": 0.0
            },
            {
                "expression": "_f",
                "logProbability": 0.0
            },
            {
                "expression": "_g",
                "logProbability": 0.0
            },
            {
                "expression": "_h",
                "logProbability": 0.0
            },
            {
                "expression": "_i",
                "logProbability": 0.0
            },
            {
                "expression": "_j",
                "logProbability": 0.0
            },
            {
                "expression": "_k",
                "logProbability": 0.0
            },
            {
                "expression": "_l",
                "logProbability": 0.0
            },
            {
                "expression": "_m",
                "logProbability": 0.0
            },
            {
                "expression": "_n",
                "logProbability": 0.0
            },
            {
                "expression": "_o",
                "logProbability": 0.0
            },
            {
                "expression": "_p",
                "logProbability": 0.0
            },
            {
                "expression": "_q",
                "logProbability": 0.0
            },
            {
                "expression": "_r",
                "logProbability": 0.0
            },
            {
                "expression": "_s",
                "logProbability": 0.0
            },
            {
                "expression": "_t",
                "logProbability": 0.0
            },
            {
                "expression": "_u",
                "logProbability": 0.0
            },
            {
                "expression": "_v",
                "logProbability": 0.0
            },
            {
                "expression": "_w",
                "logProbability": 0.0
            },
            {
                "expression": "_x",
                "logProbability": 0.0
            },
            {
                "expression": "_y",
                "logProbability": 0.0
            },
            {
                "expression": "_z",
                "logProbability": 0.0
            },
            {
                "expression": "_rnot",
                "logProbability": 0.0
            },
            {
                "expression": "_ror",
                "logProbability": 0.0
            },
            {
                "expression": "_rconcat",
                "logProbability": 0.0
            },
            {
                "expression": "_rmatch",
                "logProbability": 0.0
            },
            {
                "expression": "_rsplit",
                "logProbability": 0.0
            },
            {
                "expression": "_rflatten",
                "logProbability": 0.0
            },
            {
                "expression": "_rtail",
                "logProbability": 0.0
            },
            {
                "expression": "_rappend",
                "logProbability": 0.0
            },
            {
                "expression": "_rrevcdr",
                "logProbability": 0.0
            },
            {
                "expression": "if",
                "logProbability": 0.0
            },
            {
                "expression": "cons",
                "logProbability": 0.0
            },
            {
                "expression": "car",
                "logProbability": 0.0
            },
            {
                "expression": "cdr",
                "logProbability": 0.0
            },
            {
                "expression": "map",
                "logProbability": 0.0
            }
        ]
    },
    "frontiers": [
        {
            "task": "re2_train_29_if_the_word_ends_with_any_letter_any_letter_replace_that_with_o_u",
            "programs": [
                {
                    "program": "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _u (_rrevcdr (_rsplit _rempty $0)))))))))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _u (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _u (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _o (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))))"
                }
            ]
        },
        {
            "task": "re2_train_60_if_the_word_starts_with_any_letter_replace_that_with_e_e",
            "programs": [
                {
                    "program": "(lambda (_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _e (cons _e (cdr (_rsplit (_rnot _w) $0))))))"
                }
            ]
        },
        {
            "task": "re2_train_66_if_the_word_starts_with_any_letter_any_letter_add_j_before_that",
            "programs": [
                {
                    "program": "(lambda (_rflatten (cons _j (_rsplit _a $0))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _j (_rsplit _b $0))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _j (_rsplit _c $0))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _j (_rsplit _e $0))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _j (_rsplit _rdot $0))))"
                }
            ]
        },
        {
            "task": "re2_train_71_if_the_word_starts_with_any_letter_replace_that_with_w_i",
            "programs": [
                {
                    "program": "(lambda (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _w (cdr (_rsplit _rempty (_rflatten (cons _i (cons _i (cdr (_rsplit _rempty $0))))))))))"
                }
            ]
        },
        {
            "task": "re2_train_129_if_there_is_any_letter_replace_that_with_r_v",
            "programs": [
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (_rsplit _rdot $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (_rsplit _rempty $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (_rsplit (_rnot _r) $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (cons _j (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (map (lambda (_rconcat _r _v)) (_rsplit _rempty $0)))))"
                }
            ]
        },
        {
            "task": "re2_train_132_if_the_word_ends_with_any_letter_consonant_replace_that_with_d_t",
            "programs": [
                {
                    "program": "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rappend _d (_rrevcdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _t (_rrevcdr (_rappend _d (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))"
                }
            ]
        },
        {
            "task": "re2_train_223_if_there_is_any_letter_replace_that_with_n_i",
            "programs": [
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (_rsplit _rdot $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (_rsplit _rempty $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (cons _e (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (cons _i (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (cons _w (cdr (_rsplit _rempty $0))))))"
                }
            ]
        },
        {
            "task": "re2_train_229_if_there_is_any_letter_replace_that_with_w_t",
            "programs": [
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (_rsplit _rdot $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (_rsplit _rempty $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (_rappend _t (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "program": "(lambda (car (map (lambda (_rflatten (map (lambda (_rconcat _w _t)) (_rsplit _rempty $1)))) (_rsplit _rempty $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (map (lambda (_rconcat _w _t)) (_rsplit _rempty $0)))))"
                }
            ]
        },
        {
            "task": "re2_train_264_if_the_word_starts_with_any_letter_replace_that_with_k_e",
            "programs": [
                {
                    "program": "(lambda (_rflatten (cons _k (cons _e (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _k (cons _e (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons (_rconcat _k _e) (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (cons (_rconcat _k _e) (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _k (cdr (_rsplit _rempty (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))))))"
                }
            ]
        },
        {
            "task": "re2_train_268_if_the_word_starts_with_any_letter_replace_that_with_x_e",
            "programs": [
                {
                    "program": "(lambda (_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _x (cons _e (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _x (cdr (_rsplit _rempty (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))))))"
                }
            ]
        },
        {
            "task": "re2_train_280_if_there_is_any_letter_add_q_before_that",
            "programs": [
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (_rsplit _rdot $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (_rsplit _rempty $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (_rsplit (_rnot _d) $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (_rsplit (_rnot _w) $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda (car (map (lambda (_rconcat _q $1)) (_rsplit _rempty $1)))) (_rsplit _rempty $0))))"
                }
            ]
        },
        {
            "task": "re2_train_316_if_the_word_starts_with_any_letter_replace_that_with_r_r",
            "programs": [
                {
                    "program": "(lambda (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _r (cons _r (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons (_rconcat _r _r) (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (cons (_rconcat _r _r) (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _r (cons _rempty (cons _r (cdr (_rsplit _rempty $0)))))))"
                }
            ]
        },
        {
            "task": "re2_train_331_if_the_word_ends_with_consonant_replace_that_with_o_g",
            "programs": [
                {
                    "program": "(lambda (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rempty $0)))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _g (_rrevcdr (_rsplit _rempty $0))))))))))"
                }
            ]
        },
        {
            "task": "re2_train_344_if_the_word_ends_with_any_letter_add_q_after_that",
            "programs": [
                {
                    "program": "(lambda (_rflatten (_rappend _q (_rsplit _a $0))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _q (_rsplit _b $0))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _q (_rsplit _c $0))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _q (_rsplit _e $0))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _q (_rsplit _l $0))))"
                }
            ]
        },
        {
            "task": "re2_train_407_if_the_word_starts_with_any_letter_any_letter_replace_that_with_e_s",
            "programs": [
                {
                    "program": "(lambda (_rflatten (cons _e (cons _s (cdr (cdr (_rsplit _rdot $0)))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _e (cons _s (cdr (cdr (_rsplit _rempty $0)))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons _e (cons _s (cdr (cdr (_rsplit _rempty $0)))))))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty (_rflatten (cons _e (cdr (cdr (_rsplit _rempty $0)))))))))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _e (cons _s (cdr (cdr (_rsplit _rempty (_rflatten (cons _e (cdr (_rsplit _rempty $0)))))))))))"
                }
            ]
        },
        {
            "task": "re2_train_466_if_the_word_ends_with_any_letter_add_u_after_that",
            "programs": [
                {
                    "program": "(lambda (_rflatten (_rappend _u (_rsplit _a $0))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _u (_rsplit _b $0))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _u (_rsplit _c $0))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _u (_rsplit _e $0))))"
                },
                {
                    "program": "(lambda (_rflatten (_rappend _u (_rsplit _o $0))))"
                }
            ]
        },
        {
            "task": "re2_train_487_if_the_word_starts_with_consonant_add_a_before_that",
            "programs": [
                {
                    "program": "(lambda (_rflatten (cons _a (_rsplit _a $0))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _a (_rsplit _b $0))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _a (_rsplit _c $0))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _a (_rsplit _j $0))))"
                },
                {
                    "program": "(lambda (_rflatten (cons _a (_rsplit _k $0))))"
                }
            ]
        },
        {
            "task": "re2_train_490_if_there_is_any_letter_replace_that_with_l",
            "programs": [
                {
                    "program": "(lambda (_rflatten (map (lambda _l) (_rsplit _rdot $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda _l) (_rsplit _rempty $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda _l) (_rsplit (_rnot _a) $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda _l) (_rsplit (_rnot _b) $0))))"
                },
                {
                    "program": "(lambda (_rflatten (map (lambda _l) (_rsplit (_rnot _rdot) $0))))"
                }
            ]
        }
    ]
}