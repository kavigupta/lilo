{
    "cmd": "python3 run_iterative_experiment.py --experiment_name test_runs_with_rewrites_dreaming --experiment_type dreamcoder --domain re2 --encoder re2 --iterations 16 --global_batch_sizes 96 --enumeration_timeout 1000 --recognition_train_steps 10000 --syMetricMethod Rewrite --verbose",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "no_curried_metavars": false,
            "no_curried_bodies": false,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "structure_penalty": 1.0,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true,
            "fused_lambda_tags": {
                "tags": null
            }
        }
    },
    "original_cost": 14751,
    "final_cost": 6668,
    "compression_ratio": 2.2122075584883025,
    "num_abstractions": 10,
    "original": [
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rappend _o (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _u (_rrevcdr (_rappend _o (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons (_rconcat _m _e) (cdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _j (_rsplit _a $0))))",
        "(lam (_rflatten (cons _j (_rsplit _b $0))))",
        "(lam (_rflatten (cons _j (_rsplit _c $0))))",
        "(lam (_rflatten (cons _j (_rsplit _d $0))))",
        "(lam (_rflatten (cons _j (_rsplit _rdot $0))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cons _rempty (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (map (lam (_rconcat _l _v)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (map (lam (_rconcat _r _v)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rappend _d (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _t (_rrevcdr (_rappend _d (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (map (lam (_rconcat _x _i)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (map (lam (_rconcat _j _t)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (map (lam (_rconcat _y _t)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _k _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _k _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _k (cdr (_rsplit _rempty (_rflatten (cons (_rconcat _z _e) (cdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cons _rempty (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (car (map (lam (_rsplit _rdot $1)) (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (car (map (lam (_rsplit _rempty $1)) (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rempty $1)))) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _r _r) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _r _r) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _r (cons _r (cons _rempty (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _q (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _n $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (cdr (_rrevcdr (_rappend _d (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (cdr (_rrevcdr (_rappend _d (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (cdr (_rrevcdr (_rappend _t (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _n $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _rdot $0))))",
        "(lam (_rflatten (cons _a (_rsplit _a $0))))",
        "(lam (_rflatten (cons _a (_rsplit _b $0))))",
        "(lam (_rflatten (cons _a (_rsplit _c $0))))",
        "(lam (_rflatten (cons _a (_rsplit _d $0))))",
        "(lam (_rflatten (cons _a (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit (_rnot _a) $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit (_rnot _b) $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit (_rnot _rdot) $0))))"
    ],
    "rewritten": [
        "(lam (fn_5 (_rrevcdr (fn_3 $0)) _u))",
        "(lam (fn_2 $0 _o _u))",
        "(lam (fn_5 (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))) _u))",
        "(lam (fn_5 (_rrevcdr (_rappend _o (_rrevcdr (_rsplit _rempty $0)))) _u))",
        "(lam (_rflatten (_rappend _u (_rrevcdr (_rappend _o (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (fn_4 (fn_3 $0) _e))",
        "(lam (fn_0 $0 _e _e))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (fn_3 $0)))))",
        "(lam (fn_9 $0 _e))",
        "(lam (_rflatten (cons _e (cdr (_rsplit _rempty (fn_9 $0 _m))))))",
        "(lam (fn_7 $0 _j))",
        "(lam (_rflatten (cons _j (_rsplit _b $0))))",
        "(lam (_rflatten (cons _j (_rsplit _c $0))))",
        "(lam (_rflatten (cons _j (_rsplit _d $0))))",
        "(lam (_rflatten (cons _j (fn_3 $0))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (fn_3 $0))))))",
        "(lam (fn_0 $0 _i _w))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (fn_3 $0)))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (fn_0 $0 _rempty (_rconcat _w _i)))",
        "(lam (fn_8 $0 _v _r))",
        "(lam (fn_1 $0 (lam (_rconcat _r _v))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (map (lam (_rconcat _l _v)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (map (lam (_rconcat _r _v)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (fn_3 $0)))))))",
        "(lam (fn_2 $0 _d _t))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rappend _d (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _t (_rrevcdr (_rappend _d (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (fn_8 $0 _i _n))",
        "(lam (fn_1 $0 (lam (_rconcat _n _i))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (cons _i (cdr (fn_3 $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (map (lam (_rconcat _x _i)) (_rsplit _rempty $0)))))",
        "(lam (fn_8 $0 _t _w))",
        "(lam (fn_1 $0 (lam (_rconcat _w _t))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (map (lam (_rconcat _j _t)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (map (lam (_rconcat _y _t)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (fn_3 $0))))))",
        "(lam (fn_0 $0 _e _k))",
        "(lam (_rflatten (cons (_rconcat _k _e) (cdr (fn_3 $0)))))",
        "(lam (fn_9 $0 _k))",
        "(lam (_rflatten (cons _k (cdr (_rsplit _rempty (fn_9 $0 _z))))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (fn_3 $0))))))",
        "(lam (fn_0 $0 _e _x))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cdr (fn_3 $0)))))",
        "(lam (fn_9 $0 _x))",
        "(lam (fn_0 $0 _rempty (_rconcat _x _e)))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (fn_3 $0))))",
        "(lam (fn_1 $0 (lam (_rconcat _q $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (car (map (lam (fn_3 $1)) (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (car (map (lam (_rsplit _rempty $1)) (_rsplit _rempty $0))))))",
        "(lam (fn_1 $0 (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rempty $1))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (fn_3 $0))))))",
        "(lam (fn_0 $0 _r _r))",
        "(lam (_rflatten (cons (_rconcat _r _r) (cdr (fn_3 $0)))))",
        "(lam (_rflatten (cons (_rconcat _r _r) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _r (cons _r (cons _rempty (cdr (_rsplit _rempty $0)))))))",
        "(lam (fn_5 (fn_3 $0) _g))",
        "(lam (fn_5 (_rsplit _rempty $0) _g))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (fn_3 $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _q (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _n $0))))",
        "(lam (fn_6 $0 _q))",
        "(lam (fn_4 (cdr (fn_3 $0)) _s))",
        "(lam (fn_4 (cdr (_rsplit _rempty $0)) _s))",
        "(lam (fn_4 (cdr (_rrevcdr (_rappend _d (fn_3 $0)))) _s))",
        "(lam (fn_4 (cdr (_rrevcdr (_rappend _d (_rsplit _rempty $0)))) _s))",
        "(lam (fn_4 (cdr (_rrevcdr (_rappend _t (_rsplit _rempty $0)))) _s))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _n $0))))",
        "(lam (fn_6 $0 _u))",
        "(lam (fn_7 $0 _a))",
        "(lam (_rflatten (cons _a (_rsplit _b $0))))",
        "(lam (_rflatten (cons _a (_rsplit _c $0))))",
        "(lam (_rflatten (cons _a (_rsplit _d $0))))",
        "(lam (_rflatten (cons _a (fn_3 $0))))",
        "(lam (_rflatten (map (lam _l) (fn_3 $0))))",
        "(lam (fn_1 $0 (lam _l)))",
        "(lam (_rflatten (map (lam _l) (_rsplit (_rnot _a) $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit (_rnot _b) $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit (_rnot _rdot) $0))))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rappend _o (_rrevcdr $1)))))) (_rrevcdr (#(lambda (_rsplit _rdot $0)) $0)) _u))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _o _u))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rappend _o (_rrevcdr $1)))))) (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))) _u))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rappend _o (_rrevcdr $1)))))) (_rrevcdr (_rappend _o (_rrevcdr (_rsplit _rempty $0)))) _u))",
        "(lambda (_rflatten (_rappend _u (_rrevcdr (_rappend _o (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lambda (#(lambda (lambda (_rflatten (cons _e (cons $0 (cdr $1)))))) (#(lambda (_rsplit _rdot $0)) $0) _e))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _e))",
        "(lambda (_rflatten (cons (_rconcat _e _e) (cdr (#(lambda (_rsplit _rdot $0)) $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons (_rconcat $0 _e) (cdr (_rsplit _rempty $1)))))) $0 _e))",
        "(lambda (_rflatten (cons _e (cdr (_rsplit _rempty (#(lambda (lambda (_rflatten (cons (_rconcat $0 _e) (cdr (_rsplit _rempty $1)))))) $0 _m))))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _a $1))))) $0 _j))",
        "(lambda (_rflatten (cons _j (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _c $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _d $0))))",
        "(lambda (_rflatten (cons _j (#(lambda (_rsplit _rdot $0)) $0))))",
        "(lambda (_rflatten (cons _w (cons _i (cdr (#(lambda (_rsplit _rdot $0)) $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _i _w))",
        "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (#(lambda (_rsplit _rdot $0)) $0)))))",
        "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _rempty (_rconcat _w _i)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (#(lambda (_rsplit _rdot $0)) $2)))))) $0 _v _r))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _r _v))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (map (lambda (_rconcat _l _v)) (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (map (lambda (_rconcat _r _v)) (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (#(lambda (_rsplit _rdot $0)) $0)))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _d _t))",
        "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rappend _d (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lambda (_rflatten (_rappend _t (_rrevcdr (_rappend _d (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (#(lambda (_rsplit _rdot $0)) $2)))))) $0 _i _n))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _n _i))))",
        "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (cons _i (cdr (#(lambda (_rsplit _rdot $0)) $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (map (lambda (_rconcat _x _i)) (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (#(lambda (_rsplit _rdot $0)) $2)))))) $0 _t _w))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _w _t))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (map (lambda (_rconcat _j _t)) (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (map (lambda (_rconcat _y _t)) (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (cons _k (cons _e (cdr (#(lambda (_rsplit _rdot $0)) $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _k))",
        "(lambda (_rflatten (cons (_rconcat _k _e) (cdr (#(lambda (_rsplit _rdot $0)) $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons (_rconcat $0 _e) (cdr (_rsplit _rempty $1)))))) $0 _k))",
        "(lambda (_rflatten (cons _k (cdr (_rsplit _rempty (#(lambda (lambda (_rflatten (cons (_rconcat $0 _e) (cdr (_rsplit _rempty $1)))))) $0 _z))))))",
        "(lambda (_rflatten (cons _x (cons _e (cdr (#(lambda (_rsplit _rdot $0)) $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _x))",
        "(lambda (_rflatten (cons (_rconcat _x _e) (cdr (#(lambda (_rsplit _rdot $0)) $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons (_rconcat $0 _e) (cdr (_rsplit _rempty $1)))))) $0 _x))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _rempty (_rconcat _x _e)))",
        "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (#(lambda (_rsplit _rdot $0)) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _q $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (car (map (lambda (#(lambda (_rsplit _rdot $0)) $1)) (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (car (map (lambda (_rsplit _rempty $1)) (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (car (map (lambda (_rconcat _q $1)) (_rsplit _rempty $1))))))",
        "(lambda (_rflatten (cons _r (cons _r (cdr (#(lambda (_rsplit _rdot $0)) $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _r _r))",
        "(lambda (_rflatten (cons (_rconcat _r _r) (cdr (#(lambda (_rsplit _rdot $0)) $0)))))",
        "(lambda (_rflatten (cons (_rconcat _r _r) (cdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (cons _r (cons _r (cons _rempty (cdr (_rsplit _rempty $0)))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rappend _o (_rrevcdr $1)))))) (#(lambda (_rsplit _rdot $0)) $0) _g))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rappend _o (_rrevcdr $1)))))) (_rsplit _rempty $0) _g))",
        "(lambda (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (#(lambda (_rsplit _rdot $0)) $0)))))",
        "(lambda (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _a $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _b $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _c $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _n $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (#(lambda (_rsplit _rdot $0)) $1))))) $0 _q))",
        "(lambda (#(lambda (lambda (_rflatten (cons _e (cons $0 (cdr $1)))))) (cdr (#(lambda (_rsplit _rdot $0)) $0)) _s))",
        "(lambda (#(lambda (lambda (_rflatten (cons _e (cons $0 (cdr $1)))))) (cdr (_rsplit _rempty $0)) _s))",
        "(lambda (#(lambda (lambda (_rflatten (cons _e (cons $0 (cdr $1)))))) (cdr (_rrevcdr (_rappend _d (#(lambda (_rsplit _rdot $0)) $0)))) _s))",
        "(lambda (#(lambda (lambda (_rflatten (cons _e (cons $0 (cdr $1)))))) (cdr (_rrevcdr (_rappend _d (_rsplit _rempty $0)))) _s))",
        "(lambda (#(lambda (lambda (_rflatten (cons _e (cons $0 (cdr $1)))))) (cdr (_rrevcdr (_rappend _t (_rsplit _rempty $0)))) _s))",
        "(lambda (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _n $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (#(lambda (_rsplit _rdot $0)) $1))))) $0 _u))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _a $1))))) $0 _a))",
        "(lambda (_rflatten (cons _a (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _a (_rsplit _c $0))))",
        "(lambda (_rflatten (cons _a (_rsplit _d $0))))",
        "(lambda (_rflatten (cons _a (#(lambda (_rsplit _rdot $0)) $0))))",
        "(lambda (_rflatten (map (lambda _l) (#(lambda (_rsplit _rdot $0)) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda _l)))",
        "(lambda (_rflatten (map (lambda _l) (_rsplit (_rnot _a) $0))))",
        "(lambda (_rflatten (map (lambda _l) (_rsplit (_rnot _b) $0))))",
        "(lambda (_rflatten (map (lambda _l) (_rsplit (_rnot _rdot) $0))))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (cons #2 (cons #1 (cdr (_rsplit _rempty #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2))))))))",
            "arity": 3,
            "name": "fn_0",
            "utility": 2525,
            "final_cost": 12226,
            "compression_ratio": 1.2065270734500246,
            "cumulative_compression_ratio": 1.2065270734500246,
            "num_uses": 7,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 _rempty (_rconcat _w _i)": "(_rflatten (cons (_rconcat _w _i) (cons _rempty (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _rempty (_rconcat _x _e)": "(_rflatten (cons (_rconcat _x _e) (cons _rempty (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _e _e": "(_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _e _k": "(_rflatten (cons _k (cons _e (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _i _w": "(_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _e _x": "(_rflatten (cons _x (cons _e (cdr (_rsplit _rempty $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map #1 (_rsplit _rempty #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1)))))",
            "arity": 2,
            "name": "fn_1",
            "utility": 1515,
            "final_cost": 10711,
            "compression_ratio": 1.1414433759686304,
            "cumulative_compression_ratio": 1.3771823359163478,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 (lam (_rconcat _n _i))": "(_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam (_rconcat _q $0))": "(_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam (_rconcat _w _t))": "(_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rempty $1))))": "(_rflatten (map (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rempty $1)))) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam _l)": "(_rflatten (map (lam _l) (_rsplit _rempty $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #2 (_rappend #1 (_rrevcdr (_rrevcdr (_rsplit _rempty #0))))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2)))))))))",
            "arity": 3,
            "name": "fn_2",
            "utility": 1212,
            "final_cost": 9499,
            "compression_ratio": 1.1275923781450679,
            "cumulative_compression_ratio": 1.5529003052952943,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 $0 _d _t": "(_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_2 $0 _o _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rsplit _rdot #0)",
            "dreamcoder": "#(lambda (_rsplit _rdot $0))",
            "arity": 1,
            "name": "fn_3",
            "utility": 606,
            "final_cost": 8893,
            "compression_ratio": 1.068143483638817,
            "cumulative_compression_ratio": 1.658720341841898,
            "num_uses": 27,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 $0": "(_rsplit _rdot $0)"
                },
                {
                    "fn_3 $1": "(_rsplit _rdot $1)"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons _e (cons #1 (cdr #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons _e (cons $0 (cdr $1))))))",
            "arity": 2,
            "name": "fn_4",
            "utility": 404,
            "final_cost": 8489,
            "compression_ratio": 1.0475910001177995,
            "cumulative_compression_ratio": 1.7376605018258924,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 (fn_3 $0) _e": "(_rflatten (cons _e (cons _e (cdr (fn_3 $0)))))"
                },
                {
                    "fn_4 (cdr (_rrevcdr (_rappend _d (_rsplit _rempty $0)))) _s": "(_rflatten (cons _e (cons _s (cdr (cdr (_rrevcdr (_rappend _d (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_4 (cdr (_rrevcdr (_rappend _d (fn_3 $0)))) _s": "(_rflatten (cons _e (cons _s (cdr (cdr (_rrevcdr (_rappend _d (fn_3 $0))))))))"
                },
                {
                    "fn_4 (cdr (_rrevcdr (_rappend _t (_rsplit _rempty $0)))) _s": "(_rflatten (cons _e (cons _s (cdr (cdr (_rrevcdr (_rappend _t (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_4 (cdr (_rsplit _rempty $0)) _s": "(_rflatten (cons _e (cons _s (cdr (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_4 (cdr (fn_3 $0)) _s": "(_rflatten (cons _e (cons _s (cdr (cdr (fn_3 $0))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rappend _o (_rrevcdr #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rappend _o (_rrevcdr $1))))))",
            "arity": 2,
            "name": "fn_5",
            "utility": 404,
            "final_cost": 8085,
            "compression_ratio": 1.0499690785405071,
            "cumulative_compression_ratio": 1.8244897959183672,
            "num_uses": 5,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 (_rsplit _rempty $0) _g": "(_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 (fn_3 $0) _g": "(_rflatten (_rappend _g (_rappend _o (_rrevcdr (fn_3 $0)))))"
                },
                {
                    "fn_5 (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))) _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_5 (_rrevcdr (_rappend _o (_rrevcdr (_rsplit _rempty $0)))) _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_5 (_rrevcdr (fn_3 $0)) _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (fn_3 $0))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (fn_3 #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (#(lambda (_rsplit _rdot $0)) $1)))))",
            "arity": 2,
            "name": "fn_6",
            "utility": 404,
            "final_cost": 7681,
            "compression_ratio": 1.0525973180575445,
            "cumulative_compression_ratio": 1.9204530660070303,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_6 $0 _q": "(_rflatten (_rappend _q (fn_3 $0)))"
                },
                {
                    "fn_6 $0 _u": "(_rflatten (_rappend _u (fn_3 $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (_rsplit _a #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (_rsplit _a $1)))))",
            "arity": 2,
            "name": "fn_7",
            "utility": 404,
            "final_cost": 7277,
            "compression_ratio": 1.0555173835371718,
            "cumulative_compression_ratio": 2.0270715954376803,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_7 $0 _a": "(_rflatten (cons _a (_rsplit _a $0)))"
                },
                {
                    "fn_7 $0 _j": "(_rflatten (cons _j (_rsplit _a $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map (lam (_rconcat #2 #1)) (fn_3 #0)))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (#(lambda (_rsplit _rdot $0)) $2))))))",
            "arity": 3,
            "name": "fn_8",
            "utility": 306,
            "final_cost": 6971,
            "compression_ratio": 1.0438961411562186,
            "cumulative_compression_ratio": 2.116052216324774,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_8 $0 _i _n": "(_rflatten (map (lam (_rconcat _n _i)) (fn_3 $0)))"
                },
                {
                    "fn_8 $0 #0 _q": "(_rflatten (map (lam (_rconcat _q $0)) (fn_3 $0)))"
                },
                {
                    "fn_8 $0 _v _r": "(_rflatten (map (lam (_rconcat _r _v)) (fn_3 $0)))"
                },
                {
                    "fn_8 $0 _t _w": "(_rflatten (map (lam (_rconcat _w _t)) (fn_3 $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons (_rconcat #1 _e) (cdr (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons (_rconcat $0 _e) (cdr (_rsplit _rempty $1))))))",
            "arity": 2,
            "name": "fn_9",
            "utility": 303,
            "final_cost": 6668,
            "compression_ratio": 1.0454409118176364,
            "cumulative_compression_ratio": 2.2122075584883025,
            "num_uses": 5,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_9 $0 _e": "(_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_9 $0 _k": "(_rflatten (cons (_rconcat _k _e) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_9 $0 _m": "(_rflatten (cons (_rconcat _m _e) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_9 $0 _x": "(_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_9 $0 _z": "(_rflatten (cons (_rconcat _z _e) (cdr (_rsplit _rempty $0))))"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}