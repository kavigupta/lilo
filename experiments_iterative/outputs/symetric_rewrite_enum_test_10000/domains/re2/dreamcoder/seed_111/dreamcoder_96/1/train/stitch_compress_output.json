{
    "cmd": "python run_iterative_experiment.py --experiment_name symetric_rewrite_enum_test_10000 --experiment_type dreamcoder --domain re2 --encoder re2 --iterations 16 --global_batch_sizes 96 --enumeration_timeout 1000 --recognition_train_steps 10000 --random_seeds 111 --verbose --syMetricMethod RewriteEnumeration",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "no_curried_metavars": false,
            "no_curried_bodies": false,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "structure_penalty": 1.0,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true,
            "fused_lambda_tags": {
                "tags": null
            }
        }
    },
    "original_cost": 25355,
    "final_cost": 11213,
    "compression_ratio": 2.261214661553554,
    "num_abstractions": 10,
    "original": [
        "(lam (_rflatten (cons _n (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _n (cons _c (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _n (cons _d (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _n (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _n (cons _f (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam _k) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _rempty _k)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _k _rempty)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam _k) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat (_rconcat _rempty _k) _rempty)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _rempty (_rappend _r (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty (_rflatten (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (map (lam $0) (_rrevcdr (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (cons _rempty (_rrevcdr (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rsplit _rdot (_rflatten (_rappend _rempty (_rrevcdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (_rappend _v (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _v (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _b (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _b (_rsplit _a $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty (car (map (lam $1) (_rsplit _rempty $0)))))))",
        "(lam (car (map (lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty $1)))) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (car (map (lam (_rsplit _rempty $1)) (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _v (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _b (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _a (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _t (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _w (cons _v (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _w (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _w (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _w (cons _t (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _w (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _q (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _q (cons _c (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _q (cons _d (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _q (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _q (cons _f (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _i (cons _r (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _i (_rsplit _rempty (_rflatten (cons _r (cdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons _i (_rsplit _rdot (_rflatten (cons _r (cdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _v _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _b _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _a _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _t _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rsplit _rdot (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (_rappend _t (_rappend (_rconcat _rempty _d) (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _t (_rappend (_rconcat _rempty _d) (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (cons _b (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _b _w) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _b _rempty) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _rempty _b) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rempty (_rflatten (cons _e (cons _w (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (_rappend _o (_rappend _v (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _b (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _t (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _w (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _v _t)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _b _t)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _a _t)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _b)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _rempty _x) (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cons _rempty (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _x (_rsplit _i (_rflatten (cons _e (cdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons _j (cons _o (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _j _o) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _j (_rsplit _rdot (_rflatten (cons _o (cdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons _j (_rsplit _rempty (_rflatten (cons _o (cdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons _j (_rsplit _q (_rflatten (cons _o (cdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _m) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _rempty _m) (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _m) (_rappend _rempty (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _i (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _rempty _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rsplit _rempty (_rflatten (cons _i (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rsplit _t (_rflatten (cons _i (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rsplit _q (_rflatten (cons _i (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cons _b (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _e (cons _b (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cons _c (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _e (cons _c (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cons _d (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _r $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _q $0))))",
        "(lam (_rflatten (cons _a (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _a _w) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _a (_rsplit _rdot (_rflatten (cons _w (cdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons (_rconcat _a _rempty) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _rempty _a) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _rempty (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend (_rconcat _rempty _rempty) (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend (_rconcat _rempty _j) (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _v (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _b (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _a (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _t (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _e (cons _v (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _e (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _e (cons _t (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _e (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _j (_rappend _v (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _a (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _t (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _w (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _k (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _t $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _q $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _t $0))))",
        "(lam (_rflatten (cons _rempty (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _rempty (cons _a (cdr (_rsplit _rempty (_rflatten (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (cons (_rconcat _rempty _rempty) (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _rempty _a) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _v (_rsplit _rdot $0))))",
        "(lam (_rflatten (cons _v (_rsplit _v $0))))",
        "(lam (_rflatten (cons _v (_rsplit _b $0))))",
        "(lam (_rflatten (cons _v (_rsplit _a $0))))",
        "(lam (_rflatten (cons _v (_rsplit _t $0))))"
    ],
    "rewritten": [
        "(lam (fn_0 $0 _b _n))",
        "(lam (fn_0 $0 _c _n))",
        "(lam (fn_0 $0 _d _n))",
        "(lam (fn_0 $0 _e _n))",
        "(lam (fn_0 $0 _f _n))",
        "(lam (fn_6 $0 (lam _k)))",
        "(lam (fn_6 $0 (lam (_rconcat _rempty _k))))",
        "(lam (fn_6 $0 (lam (_rconcat _k _rempty))))",
        "(lam (_rflatten (map (lam _k) (_rsplit _rdot $0))))",
        "(lam (fn_6 $0 (lam (_rconcat (_rconcat _rempty _k) _rempty))))",
        "(lam (fn_2 $0 _r))",
        "(lam (fn_7 $0 _r _rempty))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (fn_2 (_rflatten (_rsplit _rdot $0)) _r))",
        "(lam (fn_2 (fn_6 $0 (lam $0)) _r))",
        "(lam (fn_1 $0 _o _u))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (map (lam $0) (_rrevcdr (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (cons _rempty (_rrevcdr (_rsplit _rdot $0))))))))",
        "(lam (fn_7 (fn_2 $0 _rempty) _o _u))",
        "(lam (_rflatten (_rappend _v (_rsplit _b $0))))",
        "(lam (fn_4 $0 _v))",
        "(lam (_rflatten (_rappend _b (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _b $0))))",
        "(lam (fn_4 $0 _b))",
        "(lam (fn_6 $0 (lam (_rconcat $0 _v))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot $0))))",
        "(lam (fn_6 (car (map (lam $1) (_rsplit _rempty $0))) (lam (_rconcat $0 _v))))",
        "(lam (car (map (lam (fn_6 $1 (lam (_rconcat $0 _v)))) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (car (map (lam (_rsplit _rempty $1)) (_rsplit _rempty $0))))))",
        "(lam (fn_2 $0 _f))",
        "(lam (_rflatten (_rappend _v (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _b (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _a (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _t (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 _v _w))",
        "(lam (fn_0 $0 _b _w))",
        "(lam (fn_0 $0 _a _w))",
        "(lam (fn_0 $0 _t _w))",
        "(lam (fn_8 _w $0))",
        "(lam (fn_0 $0 _b _q))",
        "(lam (fn_0 $0 _c _q))",
        "(lam (fn_0 $0 _d _q))",
        "(lam (fn_0 $0 _e _q))",
        "(lam (fn_0 $0 _f _q))",
        "(lam (fn_0 $0 _r _i))",
        "(lam (fn_5 $0 (_rconcat _i _r)))",
        "(lam (_rflatten (cons _i (_rsplit _rempty (fn_5 $0 _r)))))",
        "(lam (fn_9 (fn_5 $0 _r) _i))",
        "(lam (_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_6 $0 (lam (_rconcat _v _v))))",
        "(lam (fn_6 $0 (lam (_rconcat _b _v))))",
        "(lam (fn_6 $0 (lam (_rconcat _a _v))))",
        "(lam (fn_6 $0 (lam (_rconcat _t _v))))",
        "(lam (fn_3 $0))",
        "(lam (fn_1 $0 _d _t))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rsplit _rdot (fn_1 $0 _d _t))))",
        "(lam (fn_1 $0 (_rconcat _rempty _d) _t))",
        "(lam (_rflatten (_rappend _t (_rappend (_rconcat _rempty _d) (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (fn_5 $0 _b))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (fn_8 _b $0))",
        "(lam (fn_5 $0 (_rconcat _b _w)))",
        "(lam (fn_8 (_rconcat _b _rempty) $0))",
        "(lam (fn_8 (_rconcat _rempty _b) $0))",
        "(lam (fn_5 (fn_8 _e $0) _b))",
        "(lam (fn_7 $0 _v _o))",
        "(lam (fn_7 $0 _b _o))",
        "(lam (fn_7 $0 _a _o))",
        "(lam (fn_7 $0 _t _o))",
        "(lam (fn_7 $0 _w _o))",
        "(lam (fn_6 $0 (lam (_rconcat _v _t))))",
        "(lam (fn_3 $0))",
        "(lam (fn_6 $0 (lam (_rconcat _b _t))))",
        "(lam (fn_6 $0 (lam (_rconcat _a _t))))",
        "(lam (fn_6 $0 (lam (_rconcat _w _b))))",
        "(lam (fn_0 $0 _e _x))",
        "(lam (fn_5 $0 (_rconcat _x _e)))",
        "(lam (fn_0 $0 _e (_rconcat _rempty _x)))",
        "(lam (fn_0 $0 _rempty (_rconcat _x _e)))",
        "(lam (_rflatten (cons _x (_rsplit _i (fn_5 $0 _e)))))",
        "(lam (fn_0 $0 _o _j))",
        "(lam (fn_5 $0 (_rconcat _j _o)))",
        "(lam (fn_9 (fn_5 $0 _o) _j))",
        "(lam (_rflatten (cons _j (_rsplit _rempty (fn_5 $0 _o)))))",
        "(lam (_rflatten (cons _j (_rsplit _q (fn_5 $0 _o)))))",
        "(lam (fn_7 $0 _o _m))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (fn_2 $0 (_rconcat _o _m)))",
        "(lam (fn_7 $0 _o (_rconcat _rempty _m)))",
        "(lam (fn_7 $0 _rempty (_rconcat _o _m)))",
        "(lam (fn_5 $0 _i))",
        "(lam (fn_5 $0 (_rconcat _rempty _i)))",
        "(lam (_rflatten (_rsplit _rempty (fn_5 $0 _i))))",
        "(lam (_rflatten (_rsplit _t (fn_5 $0 _i))))",
        "(lam (_rflatten (_rsplit _q (fn_5 $0 _i))))",
        "(lam (_rflatten (cons _e (cons _b (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _e (cons _b (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cons _c (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _e (cons _c (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cons _d (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rempty $0))))",
        "(lam (fn_4 $0 _q))",
        "(lam (_rflatten (_rappend _q (_rsplit _r $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _q $0))))",
        "(lam (fn_8 _a $0))",
        "(lam (fn_5 $0 (_rconcat _a _w)))",
        "(lam (fn_9 (fn_5 $0 _w) _a))",
        "(lam (fn_8 (_rconcat _a _rempty) $0))",
        "(lam (fn_8 (_rconcat _rempty _a) $0))",
        "(lam (fn_1 $0 _j _rempty))",
        "(lam (fn_1 $0 _rempty _j))",
        "(lam (_rflatten (_rappend _j (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (fn_1 $0 (_rconcat _rempty _rempty) _j))",
        "(lam (fn_1 $0 _rempty (_rconcat _rempty _j)))",
        "(lam (fn_2 $0 _i))",
        "(lam (_rflatten (_rappend _v (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _b (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _a (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _t (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 _v _e))",
        "(lam (fn_0 $0 _b _e))",
        "(lam (fn_0 $0 _a _e))",
        "(lam (fn_0 $0 _t _e))",
        "(lam (fn_8 _e $0))",
        "(lam (fn_1 $0 _v _j))",
        "(lam (fn_1 $0 _b _j))",
        "(lam (fn_1 $0 _a _j))",
        "(lam (fn_1 $0 _t _j))",
        "(lam (fn_1 $0 _w _j))",
        "(lam (_rflatten (_rappend _k (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _rempty $0))))",
        "(lam (fn_4 $0 _k))",
        "(lam (_rflatten (_rappend _k (_rsplit _t $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _q $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _b $0))))",
        "(lam (fn_4 $0 _a))",
        "(lam (_rflatten (_rappend _a (_rsplit _t $0))))",
        "(lam (fn_0 $0 _a _rempty))",
        "(lam (fn_5 $0 _a))",
        "(lam (fn_0 (_rflatten (_rsplit _rdot $0)) _a _rempty))",
        "(lam (fn_0 $0 _a (_rconcat _rempty _rempty)))",
        "(lam (fn_5 $0 (_rconcat _rempty _a)))",
        "(lam (fn_9 $0 _v))",
        "(lam (_rflatten (cons _v (_rsplit _v $0))))",
        "(lam (_rflatten (cons _v (_rsplit _b $0))))",
        "(lam (_rflatten (cons _v (_rsplit _a $0))))",
        "(lam (_rflatten (cons _v (_rsplit _t $0))))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _b _n))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _c _n))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _d _n))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _n))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _f _n))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda _k)))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _rempty _k))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _k _rempty))))",
        "(lambda (_rflatten (map (lambda _k) (_rsplit _rdot $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat (_rconcat _rempty _k) _rempty))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _r))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2)))))))) $0 _r _rempty))",
        "(lambda (_rflatten (_rappend _r (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) (_rflatten (_rsplit _rdot $0)) _r))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda $0)) _r))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _o _u))",
        "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (map (lambda $0) (_rrevcdr (_rsplit _rdot $0))))))))",
        "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (cons _rempty (_rrevcdr (_rsplit _rdot $0))))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2)))))))) (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _rempty) _o _u))",
        "(lambda (_rflatten (_rappend _v (_rsplit _b $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1))))) $0 _v))",
        "(lambda (_rflatten (_rappend _b (_rsplit _b $0))))",
        "(lambda (_rflatten (_rappend _a (_rsplit _b $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1))))) $0 _b))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat $0 _v))))",
        "(lambda (_rflatten (map (lambda (_rconcat $0 _v)) (_rsplit _rdot $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (car (map (lambda $1) (_rsplit _rempty $0))) (lambda (_rconcat $0 _v))))",
        "(lambda (car (map (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $1 (lambda (_rconcat $0 _v)))) (_rsplit _rempty $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat $0 _v)) (car (map (lambda (_rsplit _rempty $1)) (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _f))",
        "(lambda (_rflatten (_rappend _v (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend _b (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend _a (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend _t (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _v _w))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _b _w))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a _w))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _t _w))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w $1))) _w $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _b _q))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _c _q))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _d _q))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _q))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _f _q))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _r _i))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _i _r)))",
        "(lambda (_rflatten (cons _i (_rsplit _rempty (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _r)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _r) _i))",
        "(lambda (_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _v _v))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _b _v))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _a _v))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _t _v))))",
        "(lambda (#(lambda (_rflatten (map (lambda (_rconcat _w _v)) (_rsplit _rempty $0)))) $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _d _t))",
        "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lambda (_rflatten (_rsplit _rdot (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _d _t))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 (_rconcat _rempty _d) _t))",
        "(lambda (_rflatten (_rappend _t (_rappend (_rconcat _rempty _d) (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _b))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w $1))) _b $0))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _b _w)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w $1))) (_rconcat _b _rempty) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w $1))) (_rconcat _rempty _b) $0))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w $1))) _e $0) _b))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2)))))))) $0 _v _o))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2)))))))) $0 _b _o))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2)))))))) $0 _a _o))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2)))))))) $0 _t _o))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2)))))))) $0 _w _o))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _v _t))))",
        "(lambda (#(lambda (_rflatten (map (lambda (_rconcat _w _v)) (_rsplit _rempty $0)))) $0))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _b _t))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _a _t))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _w _b))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _x))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _x _e)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e (_rconcat _rempty _x)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _rempty (_rconcat _x _e)))",
        "(lambda (_rflatten (cons _x (_rsplit _i (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _e)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _o _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _j _o)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _o) _j))",
        "(lambda (_rflatten (cons _j (_rsplit _rempty (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _o)))))",
        "(lambda (_rflatten (cons _j (_rsplit _q (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _o)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2)))))))) $0 _o _m))",
        "(lambda (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 (_rconcat _o _m)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2)))))))) $0 _o (_rconcat _rempty _m)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2)))))))) $0 _rempty (_rconcat _o _m)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _i))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _rempty _i)))",
        "(lambda (_rflatten (_rsplit _rempty (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _i))))",
        "(lambda (_rflatten (_rsplit _t (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _i))))",
        "(lambda (_rflatten (_rsplit _q (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _i))))",
        "(lambda (_rflatten (cons _e (cons _b (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lambda (_rflatten (cons _e (cons _b (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lambda (_rflatten (cons _e (cons _c (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lambda (_rflatten (cons _e (cons _c (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lambda (_rflatten (cons _e (cons _d (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1))))) $0 _q))",
        "(lambda (_rflatten (_rappend _q (_rsplit _r $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _q $0))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w $1))) _a $0))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _a _w)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _w) _a))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w $1))) (_rconcat _a _rempty) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w $1))) (_rconcat _rempty _a) $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _j _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _rempty _j))",
        "(lambda (_rflatten (_rappend _j (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 (_rconcat _rempty _rempty) _j))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _rempty (_rconcat _rempty _j)))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _i))",
        "(lambda (_rflatten (_rappend _v (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend _b (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend _a (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend _t (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _v _e))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _b _e))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a _e))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _t _e))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w $1))) _e $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _v _j))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _b _j))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _a _j))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _t _j))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2))))))))) $0 _w _j))",
        "(lambda (_rflatten (_rappend _k (_rsplit _rdot $0))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1))))) $0 _k))",
        "(lambda (_rflatten (_rappend _k (_rsplit _t $0))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _q $0))))",
        "(lambda (_rflatten (_rappend _a (_rsplit _rdot $0))))",
        "(lambda (_rflatten (_rappend _a (_rsplit _rempty $0))))",
        "(lambda (_rflatten (_rappend _a (_rsplit _b $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1))))) $0 _a))",
        "(lambda (_rflatten (_rappend _a (_rsplit _t $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a _rempty))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _a))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) (_rflatten (_rsplit _rdot $0)) _a _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a (_rconcat _rempty _rempty)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _rempty _a)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _rdot $1))))) $0 _v))",
        "(lambda (_rflatten (cons _v (_rsplit _v $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _a $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _t $0))))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (cons #2 (cons #1 (cdr (_rsplit _rempty #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2))))))))",
            "arity": 3,
            "name": "fn_0",
            "utility": 4848,
            "final_cost": 20507,
            "compression_ratio": 1.2364070805090945,
            "cumulative_compression_ratio": 1.2364070805090945,
            "num_uses": 35,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 _w (_rconcat _a _rempty)": "(_rflatten (cons (_rconcat _a _rempty) (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _w (_rconcat _b _rempty)": "(_rflatten (cons (_rconcat _b _rempty) (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _w (_rconcat _rempty _a)": "(_rflatten (cons (_rconcat _rempty _a) (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _w (_rconcat _rempty _b)": "(_rflatten (cons (_rconcat _rempty _b) (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _a (_rconcat _rempty _rempty)": "(_rflatten (cons (_rconcat _rempty _rempty) (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _e (_rconcat _rempty _x)": "(_rflatten (cons (_rconcat _rempty _x) (cons _e (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _rempty (_rconcat _x _e)": "(_rflatten (cons (_rconcat _x _e) (cons _rempty (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _w _a": "(_rflatten (cons _a (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _w _b": "(_rflatten (cons _b (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _a _e": "(_rflatten (cons _e (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _b _e": "(_rflatten (cons _e (cons _b (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _t _e": "(_rflatten (cons _e (cons _t (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _v _e": "(_rflatten (cons _e (cons _v (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _w _e": "(_rflatten (cons _e (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _r _i": "(_rflatten (cons _i (cons _r (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _o _j": "(_rflatten (cons _j (cons _o (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _b _n": "(_rflatten (cons _n (cons _b (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _c _n": "(_rflatten (cons _n (cons _c (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _d _n": "(_rflatten (cons _n (cons _d (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _e _n": "(_rflatten (cons _n (cons _e (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _f _n": "(_rflatten (cons _n (cons _f (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _b _q": "(_rflatten (cons _q (cons _b (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _c _q": "(_rflatten (cons _q (cons _c (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _d _q": "(_rflatten (cons _q (cons _d (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _e _q": "(_rflatten (cons _q (cons _e (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _f _q": "(_rflatten (cons _q (cons _f (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _a _rempty": "(_rflatten (cons _rempty (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 (_rflatten (_rsplit _rdot $0)) _a _rempty": "(_rflatten (cons _rempty (cons _a (cdr (_rsplit _rempty (_rflatten (_rsplit _rdot $0)))))))"
                },
                {
                    "fn_0 $0 _a _w": "(_rflatten (cons _w (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _b _w": "(_rflatten (cons _w (cons _b (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _t _w": "(_rflatten (cons _w (cons _t (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _v _w": "(_rflatten (cons _w (cons _v (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _w _w": "(_rflatten (cons _w (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 _e _x": "(_rflatten (cons _x (cons _e (cdr (_rsplit _rempty $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #2 (_rappend #1 (_rrevcdr (_rrevcdr (_rsplit _rdot #0))))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rdot $2)))))))))",
            "arity": 3,
            "name": "fn_1",
            "utility": 2424,
            "final_cost": 18083,
            "compression_ratio": 1.1340485538903944,
            "cumulative_compression_ratio": 1.402145661671183,
            "num_uses": 13,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 _rempty (_rconcat _rempty _j)": "(_rflatten (_rappend (_rconcat _rempty _j) (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 (_rconcat _rempty _rempty) _j": "(_rflatten (_rappend _j (_rappend (_rconcat _rempty _rempty) (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 _a _j": "(_rflatten (_rappend _j (_rappend _a (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 _b _j": "(_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 _rempty _j": "(_rflatten (_rappend _j (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 _t _j": "(_rflatten (_rappend _j (_rappend _t (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 _v _j": "(_rflatten (_rappend _j (_rappend _v (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 _w _j": "(_rflatten (_rappend _j (_rappend _w (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 _j _rempty": "(_rflatten (_rappend _rempty (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 (_rconcat _rempty _d) _t": "(_rflatten (_rappend _t (_rappend (_rconcat _rempty _d) (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 _d _t": "(_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_1 $0 _o _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rrevcdr (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1))))))",
            "arity": 2,
            "name": "fn_2",
            "utility": 1616,
            "final_cost": 16467,
            "compression_ratio": 1.098135665269934,
            "cumulative_compression_ratio": 1.539746158984636,
            "num_uses": 7,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 $0 (_rconcat _o _m)": "(_rflatten (_rappend (_rconcat _o _m) (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 $0 _f": "(_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 $0 _i": "(_rflatten (_rappend _i (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 $0 _r": "(_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 (_rflatten (_rsplit _rdot $0)) _r": "(_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty (_rflatten (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 (_rflatten (map (lam $0) (_rsplit _rempty $0))) _r": "(_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0)))))))"
                },
                {
                    "fn_2 $0 _rempty": "(_rflatten (_rappend _rempty (_rrevcdr (_rsplit _rempty $0))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map (lam (_rconcat _w _v)) (_rsplit _rempty #0)))",
            "dreamcoder": "#(lambda (_rflatten (map (lambda (_rconcat _w _v)) (_rsplit _rempty $0))))",
            "arity": 1,
            "name": "fn_3",
            "utility": 1214,
            "final_cost": 15253,
            "compression_ratio": 1.07959090015079,
            "cumulative_compression_ratio": 1.6622959417819445,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 $0": "(_rflatten (map (lam (_rconcat _w _v)) (_rsplit _rempty $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rsplit _a #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1)))))",
            "arity": 2,
            "name": "fn_4",
            "utility": 1212,
            "final_cost": 14041,
            "compression_ratio": 1.0863186382736272,
            "cumulative_compression_ratio": 1.8057830638843386,
            "num_uses": 5,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 $0 _a": "(_rflatten (_rappend _a (_rsplit _a $0)))"
                },
                {
                    "fn_4 $0 _b": "(_rflatten (_rappend _b (_rsplit _a $0)))"
                },
                {
                    "fn_4 $0 _k": "(_rflatten (_rappend _k (_rsplit _a $0)))"
                },
                {
                    "fn_4 $0 _q": "(_rflatten (_rappend _q (_rsplit _a $0)))"
                },
                {
                    "fn_4 $0 _v": "(_rflatten (_rappend _v (_rsplit _a $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (cdr (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1))))))",
            "arity": 2,
            "name": "fn_5",
            "utility": 909,
            "final_cost": 13132,
            "compression_ratio": 1.0692202254035943,
            "cumulative_compression_ratio": 1.9307797745964057,
            "num_uses": 21,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 $0 (_rconcat _a _w)": "(_rflatten (cons (_rconcat _a _w) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _b _w)": "(_rflatten (cons (_rconcat _b _w) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _i _r)": "(_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _j _o)": "(_rflatten (cons (_rconcat _j _o) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _rempty _a)": "(_rflatten (cons (_rconcat _rempty _a) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _rempty _i)": "(_rflatten (cons (_rconcat _rempty _i) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _x _e)": "(_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 _a": "(_rflatten (cons _a (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 _b": "(_rflatten (cons _b (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 (fn_0 $0 _w _e) _b": "(_rflatten (cons _b (cdr (_rsplit _rempty (fn_0 $0 _w _e)))))"
                },
                {
                    "fn_5 $0 _e": "(_rflatten (cons _e (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 _i": "(_rflatten (cons _i (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 _o": "(_rflatten (cons _o (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 _r": "(_rflatten (cons _r (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_5 $0 _w": "(_rflatten (cons _w (cdr (_rsplit _rempty $0))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map #1 (_rsplit _rempty #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1)))))",
            "arity": 2,
            "name": "fn_6",
            "utility": 606,
            "final_cost": 12526,
            "compression_ratio": 1.0483793709085103,
            "cumulative_compression_ratio": 2.024189685454255,
            "num_uses": 16,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_6 $0 (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat $0 _v))": "(_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $1 (lam (_rconcat $0 _v))": "(_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty $1)))"
                },
                {
                    "fn_6 (car (map (lam $1) (_rsplit _rempty $0))) (lam (_rconcat $0 _v))": "(_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty (car (map (lam $1) (_rsplit _rempty $0))))))"
                },
                {
                    "fn_6 $0 (lam (_rconcat (_rconcat _rempty _k) _rempty))": "(_rflatten (map (lam (_rconcat (_rconcat _rempty _k) _rempty)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat _a _t))": "(_rflatten (map (lam (_rconcat _a _t)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat _a _v))": "(_rflatten (map (lam (_rconcat _a _v)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat _b _t))": "(_rflatten (map (lam (_rconcat _b _t)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat _b _v))": "(_rflatten (map (lam (_rconcat _b _v)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat _k _rempty))": "(_rflatten (map (lam (_rconcat _k _rempty)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat _rempty _k))": "(_rflatten (map (lam (_rconcat _rempty _k)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat _t _v))": "(_rflatten (map (lam (_rconcat _t _v)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat _v _t))": "(_rflatten (map (lam (_rconcat _v _t)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat _v _v))": "(_rflatten (map (lam (_rconcat _v _v)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam (_rconcat _w _b))": "(_rflatten (map (lam (_rconcat _w _b)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_6 $0 (lam _k)": "(_rflatten (map (lam _k) (_rsplit _rempty $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #2 (_rappend #1 (_rrevcdr (_rsplit _rdot #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rsplit _rdot $2))))))))",
            "arity": 3,
            "name": "fn_7",
            "utility": 606,
            "final_cost": 11920,
            "compression_ratio": 1.0508389261744966,
            "cumulative_compression_ratio": 2.1270973154362416,
            "num_uses": 10,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_7 $0 _rempty (_rconcat _o _m)": "(_rflatten (_rappend (_rconcat _o _m) (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_7 $0 _o (_rconcat _rempty _m)": "(_rflatten (_rappend (_rconcat _rempty _m) (_rappend _o (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_7 $0 _o _m": "(_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_7 $0 _a _o": "(_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_7 $0 _b _o": "(_rflatten (_rappend _o (_rappend _b (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_7 $0 _t _o": "(_rflatten (_rappend _o (_rappend _t (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_7 $0 _v _o": "(_rflatten (_rappend _o (_rappend _v (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_7 $0 _w _o": "(_rflatten (_rappend _o (_rappend _w (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_7 $0 _r _rempty": "(_rflatten (_rappend _rempty (_rappend _r (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_7 (fn_2 $0 _rempty) _o _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rsplit _rdot (fn_2 $0 _rempty))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_0 #1 _w #0)",
            "dreamcoder": "#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w $1)))",
            "arity": 2,
            "name": "fn_8",
            "utility": 404,
            "final_cost": 11516,
            "compression_ratio": 1.0350816255644322,
            "cumulative_compression_ratio": 2.2017193469954845,
            "num_uses": 9,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_8 (_rconcat _a _rempty) $0": "(fn_0 $0 _w (_rconcat _a _rempty))"
                },
                {
                    "fn_8 (_rconcat _b _rempty) $0": "(fn_0 $0 _w (_rconcat _b _rempty))"
                },
                {
                    "fn_8 (_rconcat _rempty _a) $0": "(fn_0 $0 _w (_rconcat _rempty _a))"
                },
                {
                    "fn_8 (_rconcat _rempty _b) $0": "(fn_0 $0 _w (_rconcat _rempty _b))"
                },
                {
                    "fn_8 _a $0": "(fn_0 $0 _w _a)"
                },
                {
                    "fn_8 _b $0": "(fn_0 $0 _w _b)"
                },
                {
                    "fn_8 _e $0": "(fn_0 $0 _w _e)"
                },
                {
                    "fn_8 _w $0": "(fn_0 $0 _w _w)"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (_rsplit _rdot #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (_rsplit _rdot $1)))))",
            "arity": 2,
            "name": "fn_9",
            "utility": 303,
            "final_cost": 11213,
            "compression_ratio": 1.027022206367609,
            "cumulative_compression_ratio": 2.261214661553554,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_9 (fn_5 $0 _w) _a": "(_rflatten (cons _a (_rsplit _rdot (fn_5 $0 _w))))"
                },
                {
                    "fn_9 (fn_5 $0 _r) _i": "(_rflatten (cons _i (_rsplit _rdot (fn_5 $0 _r))))"
                },
                {
                    "fn_9 (fn_5 $0 _o) _j": "(_rflatten (cons _j (_rsplit _rdot (fn_5 $0 _o))))"
                },
                {
                    "fn_9 $0 _v": "(_rflatten (cons _v (_rsplit _rdot $0)))"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}