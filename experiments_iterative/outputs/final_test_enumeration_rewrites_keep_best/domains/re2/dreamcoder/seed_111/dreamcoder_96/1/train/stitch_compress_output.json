{
    "cmd": "python run_iterative_experiment.py --experiment_name final_test_enumeration_rewrites_keep_best --experiment_type dreamcoder --domain re2 --encoder re2 --iterations 16 --global_batch_sizes 96 --enumeration_timeout 1000 --recognition_train_steps 10000 --random_seeds 111 --verbose --syMetricMethod RewriteEnumeration",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "no_curried_metavars": false,
            "no_curried_bodies": false,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "structure_penalty": 1.0,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true,
            "fused_lambda_tags": {
                "tags": null
            }
        }
    },
    "original_cost": 27679,
    "final_cost": 13437,
    "compression_ratio": 2.0599092059239412,
    "num_abstractions": 10,
    "original": [
        "(lam (_rflatten (cons _n (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _n (cons _a (cons _rempty (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _n (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam _k) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _rempty _k)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _k _rempty)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _k _rempty)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _rempty _k)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rsplit _rdot (_rflatten (_rappend _r (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _r (_rsplit _w (_rflatten (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _r (_rsplit _b (_rflatten (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (map (lam $0) (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (cons _rempty (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _d (_rsplit _v $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _d $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _w $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _r $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _t $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot (car (map (lam $1) (_rsplit _rdot $0)))))))",
        "(lam (car (map (lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot $1)))) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (car (map (lam (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _v $0)))))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _d $0)))))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _w $0)))))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _r $0)))))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _t $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _q (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _q (cdr (_rsplit _rdot (_rflatten (cons _v (cons _a (cdr (_rsplit _rdot $0))))))))))",
        "(lam (_rflatten (cons _q (cdr (_rsplit _rdot (_rflatten (cons _d (cons _a (cdr (_rsplit _rdot $0))))))))))",
        "(lam (_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _q (cdr (_rsplit _rdot (_rflatten (cons _w (cons _a (cdr (_rsplit _rdot $0))))))))))",
        "(lam (_rflatten (cons _i (cons _r (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _i (cons (_rconcat _r _rempty) (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _i (cdr (_rsplit _rdot (_rflatten (cons _e (cons _r (cdr (_rsplit _rdot $0))))))))))",
        "(lam (_rflatten (_rsplit _rdot (_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rappend _v (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (cons _v (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rappend _d (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (map (lam $0) (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _t (_rsplit _rdot (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _t (_rsplit _w (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _t (_rsplit _r (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _b (cons _w (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _b _w) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _rempty (cons (_rconcat _b _w) (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _b (cons (_rconcat _rempty _w) (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _b (cons (_rconcat _w _rempty) (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot (_rflatten (_rappend _a (_rrevcdr (_rsplit _rdot $0))))))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rappend _v (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _v (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rappend _d (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _x (_rsplit _rdot (_rflatten (cons _e (cdr (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (_rsplit _rdot (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rsplit _r (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _j (cons _o (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _j _o) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _j (_rsplit _rdot (_rflatten (cons _o (cdr (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (cons _j (_rsplit _v (_rflatten (cons _o (cdr (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (cons _j (_rsplit _r (_rflatten (cons _o (cdr (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _m) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _m (_rsplit _b (_rflatten (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (_rappend _m (_rsplit _rempty (_rflatten (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (cons _i (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _rempty (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _i (cons _rempty (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rsplit _rempty (_rflatten (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lam (if (_rmatch _e _v) $0 (_rflatten (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _e (cdr (_rsplit _rdot (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0)))))))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot (_rflatten (cons _e (cdr (_rsplit _rdot $0)))))))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (map (lam $0) (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _v $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _d $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _w $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _b $0))))",
        "(lam (_rflatten (cons _a (cons _w (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _a _w) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _rempty (cons _a (cons _w (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _rempty (cons _a (cdr (_rsplit _rdot (_rflatten (cons _w (cons _w (cdr (_rsplit _rdot $0)))))))))))",
        "(lam (_rflatten (cons _rempty (cons _a (cdr (_rsplit _rdot (_rflatten (cons _b (cons _w (cdr (_rsplit _rdot $0)))))))))))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _rempty (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _j (_rsplit _rdot (_rflatten (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _j (_rsplit _t (_rflatten (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _e (cdr (_rsplit _rdot (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0))))))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot (_rflatten (_rappend _j (_rrevcdr (_rsplit _rdot $0)))))))))))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rsplit _rdot (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rsplit _rdot (_rflatten (_rappend _v (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))))))",
        "(lam (_rflatten (_rappend _k (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _v $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _d $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _w $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _v $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _d $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _w $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _t $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _i $0))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _rempty (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _rempty (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rsplit _v (_rflatten (cons _a (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _rempty (cons _a (cdr (_rsplit _rdot (_rflatten (_rsplit _v $0))))))))",
        "(lam (_rflatten (cons _v (_rsplit _rdot $0))))",
        "(lam (_rflatten (cons _v (_rsplit _v $0))))",
        "(lam (_rflatten (cons _v (_rsplit _d $0))))",
        "(lam (_rflatten (cons _v (_rsplit _w $0))))",
        "(lam (_rflatten (cons _v (_rsplit _r $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _o $0) _l $0)) (_rsplit _rdot $0))))"
    ],
    "rewritten": [
        "(lam (fn_0 $0 _a _n))",
        "(lam (fn_5 $0 (_rconcat _n _a)))",
        "(lam (fn_6 $0 (lam (cons _rempty $0)) _n))",
        "(lam (_rflatten (cons _n (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rempty $0)))))",
        "(lam (fn_3 $0 (lam _k)))",
        "(lam (fn_8 _k _rempty $0))",
        "(lam (fn_8 _rempty _k $0))",
        "(lam (fn_8 _rempty _k $0))",
        "(lam (fn_8 _k _rempty $0))",
        "(lam (fn_2 $0 _r))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rsplit _rdot (fn_2 $0 _r))))",
        "(lam (fn_4 (_rflatten (_rrevcdr (_rsplit _rempty $0))) _r))",
        "(lam (_rflatten (_rappend _r (_rsplit _b (_rflatten (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (fn_1 $0 _o _u))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (fn_1 $0 _o _u))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (map (lam $0) (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (cons _rempty (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _d (_rsplit _v $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _d $0))))",
        "(lam (fn_4 $0 _d))",
        "(lam (_rflatten (_rappend _d (_rsplit _r $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _t $0))))",
        "(lam (fn_3 $0 (lam (_rconcat $0 _v))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty $0))))",
        "(lam (fn_3 (car (map (lam $1) (_rsplit _rdot $0))) (lam (_rconcat $0 _v))))",
        "(lam (car (map (lam (fn_3 $1 (lam (_rconcat $0 _v)))) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (car (map (lam (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lam (fn_9 (_rflatten (_rappend _o (_rsplit _v $0))) $0 (_rtail (_rsplit _rempty $0))))",
        "(lam (fn_9 (_rflatten (_rappend _o (_rsplit _d $0))) $0 (_rtail (_rsplit _rempty $0))))",
        "(lam (fn_9 (fn_4 $0 _o) $0 (_rtail (_rsplit _rempty $0))))",
        "(lam (fn_9 (_rflatten (_rappend _o (_rsplit _r $0))) $0 (_rtail (_rsplit _rempty $0))))",
        "(lam (fn_9 (_rflatten (_rappend _o (_rsplit _t $0))) $0 (_rtail (_rsplit _rempty $0))))",
        "(lam (fn_2 $0 _f))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (fn_0 $0 _i _w))",
        "(lam (fn_5 $0 (_rconcat _w _i)))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lam (fn_0 $0 _a _q))",
        "(lam (fn_5 (fn_0 $0 _a _v) _q))",
        "(lam (fn_5 (fn_0 $0 _a _d) _q))",
        "(lam (fn_5 $0 (_rconcat _q _a)))",
        "(lam (fn_5 (fn_0 $0 _a _w) _q))",
        "(lam (fn_0 $0 _r _i))",
        "(lam (fn_5 $0 (_rconcat _i _r)))",
        "(lam (fn_0 $0 (_rconcat _r _rempty) _i))",
        "(lam (fn_5 (fn_0 $0 _r _e) _i))",
        "(lam (_rflatten (_rsplit _rdot (fn_5 $0 (_rconcat _i _r)))))",
        "(lam (fn_8 _v _r $0))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rappend _v (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (cons _v (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rappend _d (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (fn_1 $0 _d _t))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (map (lam $0) (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _t (_rsplit _rdot (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (fn_4 (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))) _t))",
        "(lam (_rflatten (_rappend _t (_rsplit _r (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (fn_5 $0 _b))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (fn_0 $0 _w _b))",
        "(lam (fn_5 $0 (_rconcat _b _w)))",
        "(lam (fn_0 $0 (_rconcat _b _w) _rempty))",
        "(lam (fn_0 $0 (_rconcat _rempty _w) _b))",
        "(lam (fn_0 $0 (_rconcat _w _rempty) _b))",
        "(lam (fn_2 $0 (_rconcat _a _o)))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot (fn_2 $0 _a)))))))",
        "(lam (fn_8 _t _w $0))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rappend _v (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _v (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rappend _d (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (fn_0 $0 _e _x))",
        "(lam (fn_5 $0 (_rconcat _x _e)))",
        "(lam (fn_7 (fn_5 $0 _e) _x))",
        "(lam (_rflatten (_rsplit _rdot (fn_5 $0 (_rconcat _x _e)))))",
        "(lam (_rflatten (_rsplit _r (fn_5 $0 (_rconcat _x _e)))))",
        "(lam (fn_0 $0 _o _j))",
        "(lam (fn_5 $0 (_rconcat _j _o)))",
        "(lam (fn_7 (fn_5 $0 _o) _j))",
        "(lam (_rflatten (cons _j (_rsplit _v (fn_5 $0 _o)))))",
        "(lam (_rflatten (cons _j (_rsplit _r (fn_5 $0 _o)))))",
        "(lam (fn_2 $0 (_rconcat _o _m)))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _m (_rsplit _b (fn_2 $0 _o)))))",
        "(lam (_rflatten (_rappend _m (_rsplit _rempty (fn_2 $0 _o)))))",
        "(lam (fn_5 $0 _i))",
        "(lam (fn_0 $0 _i _rempty))",
        "(lam (fn_0 $0 _rempty _i))",
        "(lam (_rflatten (_rsplit _rempty (fn_5 $0 _i))))",
        "(lam (fn_9 (fn_5 $0 _i) $0 _v))",
        "(lam (fn_6 $0 (lam (cdr $0)) _e))",
        "(lam (fn_5 (fn_6 $0 (lam (cdr $0)) _e) _e))",
        "(lam (fn_6 (fn_5 $0 _e) (lam (cdr $0)) _e))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (map (lam $0) (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _v $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _d $0))))",
        "(lam (fn_4 $0 _q))",
        "(lam (_rflatten (_rappend _q (_rsplit _b $0))))",
        "(lam (fn_0 $0 _w _a))",
        "(lam (fn_5 $0 (_rconcat _a _w)))",
        "(lam (fn_6 $0 (lam (cons _w $0)) _rempty))",
        "(lam (fn_0 (fn_0 $0 _w _w) _a _rempty))",
        "(lam (fn_0 (fn_0 $0 _w _b) _a _rempty))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (fn_1 $0 _j _rempty))",
        "(lam (fn_1 $0 _rempty _j))",
        "(lam (_rflatten (_rappend _j (_rsplit _rdot (_rflatten (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _j (_rsplit _t (_rflatten (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (fn_2 $0 _i))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (fn_0 $0 _s _e))",
        "(lam (fn_5 $0 (_rconcat _e _s)))",
        "(lam (fn_5 (fn_0 $0 _s _e) _e))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rempty $0)))))",
        "(lam (fn_1 $0 _b _j))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot (fn_2 $0 _j))))))))",
        "(lam (fn_2 (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))) _j))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rsplit _rdot (_rflatten (_rappend _v (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))))))",
        "(lam (_rflatten (_rappend _k (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _v $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _d $0))))",
        "(lam (fn_4 $0 _k))",
        "(lam (_rflatten (_rappend _k (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _v $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _d $0))))",
        "(lam (fn_4 $0 _a))",
        "(lam (_rflatten (_rappend _a (_rsplit _t $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _i $0))))",
        "(lam (fn_5 $0 _a))",
        "(lam (fn_0 $0 _a _rempty))",
        "(lam (fn_0 $0 _a _rempty))",
        "(lam (_rflatten (_rsplit _v (fn_5 $0 _a))))",
        "(lam (fn_0 (_rflatten (_rsplit _v $0)) _a _rempty))",
        "(lam (fn_7 $0 _v))",
        "(lam (_rflatten (cons _v (_rsplit _v $0))))",
        "(lam (_rflatten (cons _v (_rsplit _d $0))))",
        "(lam (_rflatten (cons _v (_rsplit _w $0))))",
        "(lam (_rflatten (cons _v (_rsplit _r $0))))",
        "(lam (fn_3 $0 (lam (if (_rmatch _o $0) _l $0))))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _a _n))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _n _a)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rdot $2))))))))) $0 (lambda (cons _rempty $0)) _n))",
        "(lambda (_rflatten (cons _n (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _k)))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _k _rempty $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _rempty _k $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _rempty _k $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _k _rempty $0))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) $0 _r))",
        "(lambda (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (_rsplit _rdot (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) $0 _r))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _w $1))))) (_rflatten (_rrevcdr (_rsplit _rempty $0))) _r))",
        "(lambda (_rflatten (_rappend _r (_rsplit _b (_rflatten (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _o _u))",
        "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _o _u))",
        "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (map (lambda $0) (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (cons _rempty (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lambda (_rflatten (_rappend _d (_rsplit _v $0))))",
        "(lambda (_rflatten (_rappend _d (_rsplit _d $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _w $1))))) $0 _d))",
        "(lambda (_rflatten (_rappend _d (_rsplit _r $0))))",
        "(lambda (_rflatten (_rappend _d (_rsplit _t $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $0 _v))))",
        "(lambda (_rflatten (map (lambda (_rconcat $0 _v)) (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (car (map (lambda $1) (_rsplit _rdot $0))) (lambda (_rconcat $0 _v))))",
        "(lambda (car (map (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $1 (lambda (_rconcat $0 _v)))) (_rsplit _rdot $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat $0 _v)) (car (map (lambda (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (if (_rmatch _e $0) $1 $2)))) (_rflatten (_rappend _o (_rsplit _v $0))) $0 (_rtail (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (if (_rmatch _e $0) $1 $2)))) (_rflatten (_rappend _o (_rsplit _d $0))) $0 (_rtail (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (if (_rmatch _e $0) $1 $2)))) (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _w $1))))) $0 _o) $0 (_rtail (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (if (_rmatch _e $0) $1 $2)))) (_rflatten (_rappend _o (_rsplit _r $0))) $0 (_rtail (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (if (_rmatch _e $0) $1 $2)))) (_rflatten (_rappend _o (_rsplit _t $0))) $0 (_rtail (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) $0 _f))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _i _w))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _w _i)))",
        "(lambda (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _a _q))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _a _v) _q))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _a _d) _q))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _q _a)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _a _w) _q))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _r _i))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _i _r)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 (_rconcat _r _rempty) _i))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _r _e) _i))",
        "(lambda (_rflatten (_rsplit _rdot (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _i _r)))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _v _r $0))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (_rsplit _rempty $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (_rappend _v (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (cons _v (cdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (_rappend _d (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _d _t))",
        "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (map (lambda $0) (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lambda (_rflatten (_rappend _t (_rsplit _rdot (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _w $1))))) (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))) _t))",
        "(lambda (_rflatten (_rappend _t (_rsplit _r (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _b))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _w _b))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _b _w)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 (_rconcat _b _w) _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 (_rconcat _rempty _w) _b))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 (_rconcat _w _rempty) _b))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) $0 (_rconcat _a _o)))",
        "(lambda (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) $0 _a)))))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _t _w $0))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (_rsplit _rempty $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (_rappend _v (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (cons _v (cdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (_rappend _d (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e _x))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _x _e)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _e) _x))",
        "(lambda (_rflatten (_rsplit _rdot (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _x _e)))))",
        "(lambda (_rflatten (_rsplit _r (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _x _e)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _o _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _j _o)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _o) _j))",
        "(lambda (_rflatten (cons _j (_rsplit _v (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _o)))))",
        "(lambda (_rflatten (cons _j (_rsplit _r (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _o)))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) $0 (_rconcat _o _m)))",
        "(lambda (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (_rappend _m (_rsplit _b (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) $0 _o)))))",
        "(lambda (_rflatten (_rappend _m (_rsplit _rempty (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) $0 _o)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _i))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _i _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _rempty _i))",
        "(lambda (_rflatten (_rsplit _rempty (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _i))))",
        "(lambda (#(lambda (lambda (lambda (if (_rmatch _e $0) $1 $2)))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _i) $0 _v))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rdot $2))))))))) $0 (lambda (cdr $0)) _e))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rdot $2))))))))) $0 (lambda (cdr $0)) _e) _e))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rdot $2))))))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _e) (lambda (cdr $0)) _e))",
        "(lambda (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lambda (_rflatten (cons _e (cons _a (cdr (cdr (map (lambda $0) (_rsplit _rdot $0))))))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _v $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _d $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _w $1))))) $0 _q))",
        "(lambda (_rflatten (_rappend _q (_rsplit _b $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _w _a))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _a _w)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rdot $2))))))))) $0 (lambda (cons _w $0)) _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _w _w) _a _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _w _b) _a _rempty))",
        "(lambda (_rflatten (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _j _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _rempty _j))",
        "(lambda (_rflatten (_rappend _j (_rsplit _rdot (_rflatten (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lambda (_rflatten (_rappend _j (_rsplit _t (_rflatten (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) $0 _i))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _s _e))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat _e _s)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _s _e) _e))",
        "(lambda (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _b _j))",
        "(lambda (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lambda (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) $0 _j))))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1)))))) (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))) _j))",
        "(lambda (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rsplit _rdot (_rflatten (_rappend _v (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _rdot $0))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _v $0))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _d $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _w $1))))) $0 _k))",
        "(lambda (_rflatten (_rappend _k (_rsplit _b $0))))",
        "(lambda (_rflatten (_rappend _a (_rsplit _v $0))))",
        "(lambda (_rflatten (_rappend _a (_rsplit _d $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _w $1))))) $0 _a))",
        "(lambda (_rflatten (_rappend _a (_rsplit _t $0))))",
        "(lambda (_rflatten (_rappend _a (_rsplit _i $0))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _a))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _a _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _a _rempty))",
        "(lambda (_rflatten (_rsplit _v (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _a))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (_rflatten (_rsplit _v $0)) _a _rempty))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _rdot $1))))) $0 _v))",
        "(lambda (_rflatten (cons _v (_rsplit _v $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _d $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _w $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _r $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (if (_rmatch _o $0) _l $0))))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (cons #2 (cons #1 (cdr (_rsplit _rdot #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2))))))))",
            "arity": 3,
            "name": "fn_0",
            "utility": 5151,
            "final_cost": 22528,
            "compression_ratio": 1.2286487926136365,
            "cumulative_compression_ratio": 1.2286487926136365,
            "num_uses": 27,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 _w _a": "(_rflatten (cons _a (cons _w (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 (_rconcat _rempty _w) _b": "(_rflatten (cons _b (cons (_rconcat _rempty _w) (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 (_rconcat _w _rempty) _b": "(_rflatten (cons _b (cons (_rconcat _w _rempty) (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _w _b": "(_rflatten (cons _b (cons _w (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _a _d": "(_rflatten (cons _d (cons _a (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _r _e": "(_rflatten (cons _e (cons _r (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _s _e": "(_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 (_rconcat _r _rempty) _i": "(_rflatten (cons _i (cons (_rconcat _r _rempty) (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _r _i": "(_rflatten (cons _i (cons _r (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _rempty _i": "(_rflatten (cons _i (cons _rempty (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _o _j": "(_rflatten (cons _j (cons _o (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _a _n": "(_rflatten (cons _n (cons _a (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _a _q": "(_rflatten (cons _q (cons _a (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 (_rconcat _b _w) _rempty": "(_rflatten (cons _rempty (cons (_rconcat _b _w) (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _a _rempty": "(_rflatten (cons _rempty (cons _a (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 (_rflatten (_rsplit _v $0)) _a _rempty": "(_rflatten (cons _rempty (cons _a (cdr (_rsplit _rdot (_rflatten (_rsplit _v $0)))))))"
                },
                {
                    "fn_0 (_rflatten (cons _b (cons _w (cdr (_rsplit _rdot $0))))) _a _rempty": "(_rflatten (cons _rempty (cons _a (cdr (_rsplit _rdot (_rflatten (cons _b (cons _w (cdr (_rsplit _rdot $0))))))))))"
                },
                {
                    "fn_0 (_rflatten (cons _w (cons _w (cdr (_rsplit _rdot $0))))) _a _rempty": "(_rflatten (cons _rempty (cons _a (cdr (_rsplit _rdot (_rflatten (cons _w (cons _w (cdr (_rsplit _rdot $0))))))))))"
                },
                {
                    "fn_0 $0 _i _rempty": "(_rflatten (cons _rempty (cons _i (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _a _v": "(_rflatten (cons _v (cons _a (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _a _w": "(_rflatten (cons _w (cons _a (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _i _w": "(_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _w _w": "(_rflatten (cons _w (cons _w (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _e _x": "(_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #2 (_rappend #1 (_rrevcdr (_rrevcdr (_rsplit _rempty #0))))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2)))))))))",
            "arity": 3,
            "name": "fn_1",
            "utility": 2222,
            "final_cost": 20306,
            "compression_ratio": 1.1094257854821234,
            "cumulative_compression_ratio": 1.3630946518270461,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 _b _j": "(_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_1 $0 _rempty _j": "(_rflatten (_rappend _j (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_1 $0 _j _rempty": "(_rflatten (_rappend _rempty (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_1 $0 _d _t": "(_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_1 $0 _o _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rrevcdr (_rsplit _rdot #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rdot $1))))))",
            "arity": 2,
            "name": "fn_2",
            "utility": 2020,
            "final_cost": 18286,
            "compression_ratio": 1.1104670239527508,
            "cumulative_compression_ratio": 1.513671661380291,
            "num_uses": 11,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 $0 (_rconcat _a _o)": "(_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_2 $0 (_rconcat _o _m)": "(_rflatten (_rappend (_rconcat _o _m) (_rrevcdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_2 $0 _a": "(_rflatten (_rappend _a (_rrevcdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_2 $0 _f": "(_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_2 $0 _i": "(_rflatten (_rappend _i (_rrevcdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_2 $0 _j": "(_rflatten (_rappend _j (_rrevcdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_2 (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))) _j": "(_rflatten (_rappend _j (_rrevcdr (_rsplit _rdot (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))))))"
                },
                {
                    "fn_2 $0 _o": "(_rflatten (_rappend _o (_rrevcdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_2 $0 _r": "(_rflatten (_rappend _r (_rrevcdr (_rsplit _rdot $0))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map #1 (_rsplit _rdot #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1)))))",
            "arity": 2,
            "name": "fn_3",
            "utility": 1515,
            "final_cost": 16771,
            "compression_ratio": 1.090334505992487,
            "cumulative_compression_ratio": 1.6504084431459067,
            "num_uses": 11,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 $0 (lam (_rconcat $0 _v))": "(_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_3 $1 (lam (_rconcat $0 _v))": "(_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot $1)))"
                },
                {
                    "fn_3 (car (map (lam $1) (_rsplit _rdot $0))) (lam (_rconcat $0 _v))": "(_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot (car (map (lam $1) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_3 $0 (lam (_rconcat _k _rempty))": "(_rflatten (map (lam (_rconcat _k _rempty)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_3 $0 (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_3 $0 (lam (_rconcat _rempty _k))": "(_rflatten (map (lam (_rconcat _rempty _k)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_3 $0 (lam (_rconcat _w _t))": "(_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_3 $0 (lam (if (_rmatch _o $0) _l $0))": "(_rflatten (map (lam (if (_rmatch _o $0) _l $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_3 $0 (lam _k)": "(_rflatten (map (lam _k) (_rsplit _rdot $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rsplit _w #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _w $1)))))",
            "arity": 2,
            "name": "fn_4",
            "utility": 1515,
            "final_cost": 15256,
            "compression_ratio": 1.0993051914001049,
            "cumulative_compression_ratio": 1.8143025694808599,
            "num_uses": 7,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 $0 _a": "(_rflatten (_rappend _a (_rsplit _w $0)))"
                },
                {
                    "fn_4 $0 _d": "(_rflatten (_rappend _d (_rsplit _w $0)))"
                },
                {
                    "fn_4 $0 _k": "(_rflatten (_rappend _k (_rsplit _w $0)))"
                },
                {
                    "fn_4 $0 _o": "(_rflatten (_rappend _o (_rsplit _w $0)))"
                },
                {
                    "fn_4 $0 _q": "(_rflatten (_rappend _q (_rsplit _w $0)))"
                },
                {
                    "fn_4 (_rflatten (_rrevcdr (_rsplit _rempty $0))) _r": "(_rflatten (_rappend _r (_rsplit _w (_rflatten (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_4 (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))) _t": "(_rflatten (_rappend _t (_rsplit _w (_rflatten (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (cdr (_rsplit _rdot #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1))))))",
            "arity": 2,
            "name": "fn_5",
            "utility": 606,
            "final_cost": 14650,
            "compression_ratio": 1.0413651877133105,
            "cumulative_compression_ratio": 1.8893515358361774,
            "num_uses": 29,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 $0 (_rconcat _a _w)": "(_rflatten (cons (_rconcat _a _w) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _b _w)": "(_rflatten (cons (_rconcat _b _w) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _e _s)": "(_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _i _r)": "(_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _j _o)": "(_rflatten (cons (_rconcat _j _o) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _n _a)": "(_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _q _a)": "(_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _w _i)": "(_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 (_rconcat _x _e)": "(_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 _a": "(_rflatten (cons _a (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 _b": "(_rflatten (cons _b (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 $0 _e": "(_rflatten (cons _e (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0)))))) _e": "(_rflatten (cons _e (cdr (_rsplit _rdot (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0))))))))))"
                },
                {
                    "fn_5 (fn_0 $0 _s _e) _e": "(_rflatten (cons _e (cdr (_rsplit _rdot (fn_0 $0 _s _e)))))"
                },
                {
                    "fn_5 $0 _i": "(_rflatten (cons _i (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 (fn_0 $0 _r _e) _i": "(_rflatten (cons _i (cdr (_rsplit _rdot (fn_0 $0 _r _e)))))"
                },
                {
                    "fn_5 $0 _o": "(_rflatten (cons _o (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_5 (fn_0 $0 _a _d) _q": "(_rflatten (cons _q (cdr (_rsplit _rdot (fn_0 $0 _a _d)))))"
                },
                {
                    "fn_5 (fn_0 $0 _a _v) _q": "(_rflatten (cons _q (cdr (_rsplit _rdot (fn_0 $0 _a _v)))))"
                },
                {
                    "fn_5 (fn_0 $0 _a _w) _q": "(_rflatten (cons _q (cdr (_rsplit _rdot (fn_0 $0 _a _w)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #2 (cons _a (#1 (cdr (_rsplit _rdot #0))))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rdot $2)))))))))",
            "arity": 3,
            "name": "fn_6",
            "utility": 504,
            "final_cost": 14146,
            "compression_ratio": 1.0356284462038738,
            "cumulative_compression_ratio": 1.9566661953909232,
            "num_uses": 5,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_6 $0 cdr _e": "(_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_6 (fn_5 $0 _e) cdr _e": "(_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot (fn_5 $0 _e)))))))"
                },
                {
                    "fn_6 $0 (cons _rempty) _n": "(_rflatten (cons _n (cons _a (cons _rempty (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_6 $0 (cons _w) _rempty": "(_rflatten (cons _rempty (cons _a (cons _w (cdr (_rsplit _rdot $0))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (_rsplit _rdot #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (_rsplit _rdot $1)))))",
            "arity": 2,
            "name": "fn_7",
            "utility": 303,
            "final_cost": 13843,
            "compression_ratio": 1.0218883190059957,
            "cumulative_compression_ratio": 1.9994943292638878,
            "num_uses": 3,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_7 (fn_5 $0 _o) _j": "(_rflatten (cons _j (_rsplit _rdot (fn_5 $0 _o))))"
                },
                {
                    "fn_7 $0 _v": "(_rflatten (cons _v (_rsplit _rdot $0)))"
                },
                {
                    "fn_7 (fn_5 $0 _e) _x": "(_rflatten (cons _x (_rsplit _rdot (fn_5 $0 _e))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_3 #2 (lam (_rconcat #1 #0)))",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3))))))",
            "arity": 3,
            "name": "fn_8",
            "utility": 204,
            "final_cost": 13639,
            "compression_ratio": 1.0149571082923967,
            "cumulative_compression_ratio": 2.029400982476721,
            "num_uses": 9,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_8 _v #0 $0": "(fn_3 $0 (lam (_rconcat $0 _v)))"
                },
                {
                    "fn_8 _rempty _k $0": "(fn_3 $0 (lam (_rconcat _k _rempty)))"
                },
                {
                    "fn_8 _v _r $0": "(fn_3 $0 (lam (_rconcat _r _v)))"
                },
                {
                    "fn_8 _k _rempty $0": "(fn_3 $0 (lam (_rconcat _rempty _k)))"
                },
                {
                    "fn_8 _t _w $0": "(fn_3 $0 (lam (_rconcat _w _t)))"
                },
                {
                    "fn_8 _v #0 $1": "(fn_3 $1 (lam (_rconcat $0 _v)))"
                },
                {
                    "fn_8 _v #0 (car (map (lam $1) (_rsplit _rdot $0)))": "(fn_3 (car (map (lam $1) (_rsplit _rdot $0))) (lam (_rconcat $0 _v)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(if (_rmatch _e #2) #1 #0)",
            "dreamcoder": "#(lambda (lambda (lambda (if (_rmatch _e $0) $1 $2))))",
            "arity": 3,
            "name": "fn_9",
            "utility": 202,
            "final_cost": 13437,
            "compression_ratio": 1.0150331175113492,
            "cumulative_compression_ratio": 2.0599092059239412,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_9 (_rflatten (_rappend _o (_rsplit _d $0))) $0 (_rtail (_rsplit _rempty $0))": "(if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _d $0))))"
                },
                {
                    "fn_9 (_rflatten (_rappend _o (_rsplit _r $0))) $0 (_rtail (_rsplit _rempty $0))": "(if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _r $0))))"
                },
                {
                    "fn_9 (_rflatten (_rappend _o (_rsplit _t $0))) $0 (_rtail (_rsplit _rempty $0))": "(if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _t $0))))"
                },
                {
                    "fn_9 (_rflatten (_rappend _o (_rsplit _v $0))) $0 (_rtail (_rsplit _rempty $0))": "(if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _v $0))))"
                },
                {
                    "fn_9 (fn_4 $0 _o) $0 (_rtail (_rsplit _rempty $0))": "(if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (fn_4 $0 _o))"
                },
                {
                    "fn_9 (fn_5 $0 _i) $0 _v": "(if (_rmatch _e _v) $0 (fn_5 $0 _i))"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}