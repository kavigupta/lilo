{
    "_summary": {
        "n_tasks_solved": {
            "train": 8,
            "test": 12
        }
    },
    "train": {
        "a small triangle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small triangle ((lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium triangle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium triangle ((lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 8 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 8 gon ((lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 9 gon next to a medium square": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 9 gon next to a medium square ((lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "4 concentric square s_copy_5": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 concentric square s_copy_5 ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4 concentric square s_copy_3": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 concentric square s_copy_3 ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium circle and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium circle and a small 5 gon as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a short line next to a small 6 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a short line next to a small 6 gon ((lambda (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 6) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short line and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short line and a small semicircle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 small 5 gon s in a row_copy_0": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 small 5 gon s in a row_copy_0 ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) 5 logo_UL)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (logo_FWRT logo_UL logo_UA $0) 5 logo_UL)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_PT (lambda $0) $0)) 5 logo_UL)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_ZL) (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) 5 logo_UL)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) (logo_forLoop 4 (lambda (lambda $0)) $0) (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) 5 logo_UL)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.02065300941467285
        },
        "3 sided snowflake with a short line and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short line and a small square as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a small 5 gon and a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a small 5 gon and a short line as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a short line and a short space and a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a short line and a short space and a short line as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium 8 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium 8 gon ((lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 8) $0))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 8 (logo_MULL logo_UL 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) 8 (logo_MULL logo_UL 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda $0))) 8 (logo_MULL logo_UL 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL 2)) 8 (logo_MULL logo_UL 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (lambda (logo_FWRT (logo_MULL logo_UL $0) $1 $2)))) $0 (logo_DIVA logo_UA 8) 2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.020004987716674805
        },
        "4 medium semicircle s in a row_copy_1": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 medium semicircle s in a row_copy_1 ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small circle connected by a big line to a small semicircle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small circle connected by a big line to a small semicircle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium 5 gon next to a small 5 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium 5 gon next to a small 5 gon ((lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a small triangle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a small triangle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a medium triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a medium triangle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short line and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short line and a medium circle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 concentric circle s_copy_3": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 concentric circle s_copy_3 ((lambda (logo_forLoop 9 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 7 gon next to a small 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 7 gon next to a small 9 gon ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short line as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 9 gon ((lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a short line and a medium triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short line and a medium triangle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "2 concentric circle s_copy_1": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2 concentric circle s_copy_1 ((lambda (logo_forLoop 3 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 small square s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 small square s in a row ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short line and a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short line and a small triangle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a short space and a short line and a short space and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short space and a short line and a short space and a small semicircle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium line and a small 6 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium line and a small 6 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 6) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a small 9 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a small 9 gon as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a small 9 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a small 9 gon as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "2 concentric circle s_copy_2": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2 concentric circle s_copy_2 ((lambda (logo_forLoop 3 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 concentric circle s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 concentric circle s ((lambda (logo_forLoop 8 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium 9 gon ((lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 9) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a short line and a short space and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a short line and a short space and a small 5 gon as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4 medium semicircle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 medium semicircle s in a row ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small semicircle connected by a big line to a small 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small semicircle connected by a big line to a small 9 gon ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short line and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short line and a small square as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a medium semicircle and a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a medium semicircle and a small circle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a short line and a short space and a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a short line and a short space and a short line as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short line and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short line and a medium circle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small circle next to a small 6 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small circle next to a small 6 gon ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 6) $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "6 short line s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 short line s in a row ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 6 gon next to a medium 5 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 6 gon next to a medium 5 gon ((lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 6) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a small semicircle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small semicircle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 logo_epsA $0))) $1))) $0 logo_epsL))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 99.0156455039978
        },
        "8 sided snowflake with a short space and a short line and a short space and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short space and a short line and a short space and a small 5 gon as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium semicircle and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium semicircle and a medium circle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a short space and a short line and a short space and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short space and a short line and a short space and a small 5 gon as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium space and a medium triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium space and a medium triangle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a small circle and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a small circle and a medium circle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium semicircle connected by a big line to a medium triangle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium semicircle connected by a big line to a medium triangle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short space and a short line and a short space and a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short space and a short line and a short space and a medium semicircle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a small 6 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a small 6 gon as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 6) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short line and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short line and a small 5 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small circle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))",
            "programs": [],
            "best_search_time": null
        },
        "a small 7 gon connected by a medium line to a small triangle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 7 gon connected by a medium line to a small triangle ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a medium semicircle and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a medium semicircle and a small semicircle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a short space and a short line and a short space and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short space and a short line and a short space and a small square as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium 5 gon as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a medium space and a medium triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a medium space and a medium triangle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 9 gon connected by a big line to a medium square": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 9 gon connected by a big line to a medium square ((lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium triangle connected by a big line to a small 8 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium triangle connected by a big line to a small 8 gon ((lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a small 8 gon next to a small 5 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 8 gon next to a small 5 gon ((lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a small square as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 4 stepped staircase_copy_0": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 4 stepped staircase_copy_0 ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium semicircle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium semicircle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 medium semicircle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 medium semicircle s in a row ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small semicircle connected by a big line to a medium circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small semicircle connected by a big line to a medium circle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a medium circle and a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a medium circle and a short line as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a short space and a short line and a short space and a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short space and a short line and a short space and a small triangle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4 short line s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 short line s in a row ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) 4 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL 4)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_FWRT (logo_MULL logo_UL $0) $1 $2)))) $0 logo_UA 4))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_FWRT (logo_MULL logo_UL $0) $1 $2)))) $0 logo_ZA 4))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_FWRT (logo_MULL logo_UL 4) logo_ZA $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.003906726837158203
        },
        "a medium triangle connected by a big line to a small square": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium triangle connected by a big line to a small square ((lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a 4 stepped staircase_copy_4": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 4 stepped staircase_copy_4 ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a small square as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium square connected by a big line to a small square": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium square connected by a big line to a small square ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short space and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short space and a medium circle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium circle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a small 7 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a small 7 gon as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4 concentric square s_copy_4": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 concentric square s_copy_4 ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a medium line and a small 7 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a medium line and a small 7 gon as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 small square s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 small square s in a row ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $1 (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (lambda (logo_FWRT (logo_MULL logo_UL $0) $1 $2)))) $0 logo_UA $1))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (lambda (logo_FWRT (logo_MULL logo_UL $0) $1 $2)))) $0 logo_ZA $1))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) 4 $0) (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $1 (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) $0) (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $1 (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0200650691986084
        },
        "3 sided snowflake with a medium line and a medium 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium line and a medium 5 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 7 gon connected by a medium line to a small semicircle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 7 gon connected by a medium line to a small semicircle ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a 5 stepped zigzag": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 5 stepped zigzag ((lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_ADDA (logo_DIVA logo_UA 2) (logo_DIVA logo_UA 4)) $0)))) $0))))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium space and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium space and a small 5 gon as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 4 stepped zigzag": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 4 stepped zigzag ((lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_ADDA (logo_DIVA logo_UA 2) (logo_DIVA logo_UA 4)) $0)))) $0))))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short line and a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short line and a medium semicircle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a big semicircle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a big semicircle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 5) logo_epsA $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a short space and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short space and a medium circle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a short line and a short space and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a short line and a short space and a small semicircle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a short line and a short space and a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a short line and a short space and a small triangle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium square as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 9 gon separated by a big space from a small circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 9 gon separated by a big space from a small circle ((lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 5) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a short line and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short line and a medium circle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a small triangle and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a small triangle and a small 5 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small triangle connected by a big line to a medium triangle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small triangle connected by a big line to a medium triangle ((lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a small circle connected by a medium line to a small 8 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small circle connected by a medium line to a small 8 gon ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "4 concentric square s_copy_2": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 concentric square s_copy_2 ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a big circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a big circle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 5) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 5) logo_epsA $0))) $0))))",
            "programs": [],
            "best_search_time": null
        },
        "4 small 5 gon s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 small 5 gon s in a row ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small semicircle connected by a medium line to a medium triangle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small semicircle connected by a medium line to a medium triangle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "4 concentric square s_copy_1": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 concentric square s_copy_1 ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a medium triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a medium triangle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 7 stepped staircase": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 7 stepped staircase ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a small 5 gon and a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a small 5 gon and a short line as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a small triangle and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a small triangle and a medium circle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium triangle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a small 7 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a small 7 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with 2 short line s as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with 2 short line s as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small square": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small square ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a short line": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a short line ((lambda (logo_FWRT logo_UL logo_ZA $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a vertical short line": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a vertical short line ((lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL logo_ZA $0))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) logo_ZL)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) logo_ZL)) (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) logo_ZL)) (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) logo_ZL)) (logo_PT (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) logo_ZL)) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_ZL)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.018631935119628906
        },
        "3 concentric square s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 concentric square s ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium semicircle connected by a medium line to a medium circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium semicircle connected by a medium line to a medium circle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a 4 stepped staircase_copy_3": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 4 stepped staircase_copy_3 ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 8 logo_ZL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 logo_epsA $0))) $1))) $0 logo_ZL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_ZL) logo_ZL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_ZL)) logo_UL)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.570647954940796
        },
        "5 sided snowflake with a short space and a short line and a short space and a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short space and a short line and a short space and a short line as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium triangle separated by a big space from a medium triangle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium triangle separated by a big space from a medium triangle ((lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 5) logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short line and a small 8 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short line and a small 8 gon as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "2 concentric circle s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2 concentric circle s ((lambda (logo_forLoop 3 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 7 stepped staircase_copy_1": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 7 stepped staircase_copy_1 ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium square": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium square ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a small 5 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 5 gon separated by a big space from a small 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 5 gon separated by a big space from a small 9 gon ((lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 5) logo_ZA $0)) (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a medium triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a medium triangle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 4 stepped staircase_copy_2": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 4 stepped staircase_copy_2 ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium triangle connected by a medium line to a small 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium triangle connected by a medium line to a small 9 gon ((lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "8 concentric circle s_copy_0": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 concentric circle s_copy_0 ((lambda (logo_forLoop 9 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a small 8 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a small 8 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 small 5 gon s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 small 5 gon s in a row ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short space and a small 7 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short space and a small 7 gon as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a small semicircle and a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a small semicircle and a short line as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 5 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 5 gon ((lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a small circle and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a small circle and a small 5 gon as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4 small square s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 small square s in a row ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a short line and a short space and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a short line and a short space and a small square as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a medium square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a medium square as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4 concentric square s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 concentric square s ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 8 gon next to a small 7 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 8 gon next to a small 7 gon ((lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "3 small triangle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 small triangle s in a row ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 5 gon next to a small 7 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 5 gon next to a small 7 gon ((lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a short line and a medium 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short line and a medium 5 gon as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 small triangle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 small triangle s in a row ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium 5 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium 5 gon ((lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a short line and a short space and a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a short line and a short space and a medium semicircle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a medium line and a small 9 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a medium line and a small 9 gon as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium triangle separated by a big space from a small 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium triangle separated by a big space from a small 9 gon ((lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 5) logo_ZA $0)) (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a small 9 gon connected by a medium line to a small 7 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 9 gon connected by a medium line to a small 7 gon ((lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short line and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short line and a small semicircle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 concentric circle s_copy_4": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 concentric circle s_copy_4 ((lambda (logo_forLoop 8 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 9 gon connected by a big line to a small 8 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 9 gon connected by a big line to a small 8 gon ((lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a small 7 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a small 7 gon as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a short line and a short space and a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a short line and a short space and a medium semicircle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium circle connected by a big line to a medium circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium circle connected by a big line to a medium circle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "a small 6 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 6 gon ((lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 6) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium semicircle and a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium semicircle and a short line as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium space and a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium space and a small circle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a small triangle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a small semicircle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a greek spiral with 8 turns": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a greek spiral with 8 turns ((lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a medium space and a small 8 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a medium space and a small 8 gon as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 8 gon next to a medium square": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 8 gon next to a medium square ((lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "3 concentric square s_copy_0": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 concentric square s_copy_0 ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0)))))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $5 $0)))))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) (lambda (lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 2.6809234619140625
        },
        "5 sided snowflake with a short line and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short line and a small 5 gon as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 9 pointed star": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 9 pointed star ((lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_SUBA (logo_DIVA logo_UA 2) (logo_DIVA (logo_DIVA logo_UA 2) 9)) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium 6 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium 6 gon ((lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 6) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 medium semicircle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 medium semicircle s in a row ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a small triangle and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a small triangle and a medium circle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4 small circle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 small circle s in a row ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small square connected by a big line to a small 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small square connected by a big line to a small 9 gon ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "3 small 5 gon s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 small 5 gon s in a row ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a short space and a small 7 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short space and a small 7 gon as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a small 7 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a small 7 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium semicircle next to a small 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium semicircle next to a small 9 gon ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short line and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short line and a small 5 gon as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium line and a small 9 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium line and a small 9 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small 7 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 7 gon ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 short line s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 short line s in a row ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short space and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short space and a small semicircle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 4 stepped staircase": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 4 stepped staircase ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short space and a short line and a short space and a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short space and a short line and a short space and a small circle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 short line s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 short line s in a row ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4 small semicircle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 small semicircle s in a row ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium circle connected by a medium line to a small 5 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium circle connected by a medium line to a small 5 gon ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a 7 stepped staircase_copy_5": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 7 stepped staircase_copy_5 ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium semicircle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short space and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short space and a small semicircle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium 7 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium 7 gon ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 7) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a medium 5 gon separated by a big space from a short line": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium 5 gon separated by a big space from a short line ((lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 5) logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short space and a short line and a short space and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short space and a short line and a short space and a small square as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 medium circle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 medium circle s in a row ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a greek spiral with 6 turns": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a greek spiral with 6 turns ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium space and a small 6 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium space and a small 6 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 6) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a small 5 gon and a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a small 5 gon and a small circle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a small semicircle connected by a big line to a medium semicircle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small semicircle connected by a big line to a medium semicircle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a small square and a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a small square and a small triangle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a medium triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a medium triangle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a small triangle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        }
    },
    "test": {
        "a greek spiral with 7 turns": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a greek spiral with 7 turns ((lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0)))",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $1 $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $1 $0))) $0) (lambda (lambda $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $1 $0))) (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $1 $0))) (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) 7 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 65.72071981430054
        },
        "a 7 pointed star": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 7 pointed star ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_SUBA (logo_DIVA logo_UA 2) (logo_DIVA (logo_DIVA logo_UA 2) 7)) $0))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 5 stepped staircase": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 5 stepped staircase ((lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 logo_epsA $0))) $1))) $0 logo_ZL)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) $0) (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 logo_epsA $0))) $1))) $0 logo_ZL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 141.41031527519226
        },
        "8 sided snowflake with a short line and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short line and a small semicircle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a medium semicircle and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a medium semicircle and a small 5 gon as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a small circle and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a small circle and a small semicircle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a small 5 gon and a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a small 5 gon and a medium semicircle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a small triangle and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a small triangle and a medium circle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium semicircle and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium semicircle and a small semicircle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a medium circle and a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a medium circle and a small circle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with 2 small circle s as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with 2 small circle s as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a small square and a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a small square and a small circle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a small 5 gon and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a small 5 gon and a small square as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 8 stepped staircase": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 8 stepped staircase ((lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 logo_epsA $0))) $1))) $0 logo_ZL)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 125.99928689002991
        },
        "6 sided snowflake with a small 5 gon and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a small 5 gon and a small square as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 3 stepped staircase": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 3 stepped staircase ((lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "a 6 stepped staircase": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 6 stepped staircase ((lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 2) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_ZL)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 logo_epsA $0))) $1))) $0 logo_ZL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 logo_epsA $0))) $1))) $0 logo_ZL)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda $0))) (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 logo_epsA $0))) $1))) $0 logo_ZL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 logo_epsA $0))) $1))) $0 logo_ZL))))) (lambda (lambda $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 95.5469183921814
        },
        "a 3 stepped zigzag": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a 3 stepped zigzag ((lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) (logo_forLoop 3 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_ADDA (logo_DIVA logo_UA 2) (logo_DIVA logo_UA 4)) $0)))) $0))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium 5 gon next to a medium square": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium 5 gon next to a medium square ((lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium semicircle next to a small 8 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium semicircle next to a small 8 gon ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium circle next to a short line": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium circle next to a short line ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium circle next to a small 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium circle next to a small 9 gon ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a small 7 gon next to a medium triangle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 7 gon next to a medium triangle ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "6 concentric square s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 concentric square s ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 4 (logo_MULL logo_UL $1)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0)))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0)))))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 4 (logo_MULL logo_UL $1))))) (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) 6 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0))))))) (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) 6 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 110.35254764556885
        },
        "a small semicircle next to a small 9 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small semicircle next to a small 9 gon ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a small square next to a small 6 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small square next to a small 6 gon ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 6) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium semicircle separated by a big space from a medium circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium semicircle separated by a big space from a medium circle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 5) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium square next to a medium triangle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium square next to a medium triangle ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a small 7 gon separated by a big space from a small circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 7 gon separated by a big space from a small circle ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 5) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium semicircle next to a small semicircle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium semicircle next to a small semicircle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium circle separated by a big space from a short line": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium circle separated by a big space from a short line ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 5) logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a small triangle connected by a medium line to a small 8 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small triangle connected by a medium line to a small 8 gon ((lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium 5 gon connected by a big line to a medium circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium 5 gon connected by a big line to a medium circle ((lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a short line connected by a big line to a medium semicircle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a short line connected by a big line to a medium semicircle ((lambda (logo_FWRT logo_UL logo_ZA (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "8 concentric square s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 concentric square s ((lambda (logo_forLoop 9 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 4 (logo_MULL logo_UL $1)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 155.43948769569397
        },
        "a small circle connected by a medium line to a small triangle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small circle connected by a medium line to a small triangle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium semicircle connected by a big line to a medium circle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium semicircle connected by a big line to a medium circle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a small 5 gon connected by a medium line to a small 5 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 5 gon connected by a medium line to a small 5 gon ((lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (lambda (lambda (logo_FWRT (logo_MULL logo_UL $0) $1 $2)))) (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 5 logo_UL) logo_UA 2) 5 logo_UL))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (lambda (lambda (logo_FWRT (logo_MULL logo_UL $0) $1 $2)))) (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 5 logo_UL) logo_ZA 2) 5 logo_UL))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 5 logo_UL))) 5 logo_UL))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 157.89503741264343
        },
        "a small circle connected by a medium line to a medium semicircle": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small circle connected by a medium line to a medium semicircle ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "a small 8 gon connected by a big line to a small 8 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 8 gon connected by a big line to a small 8 gon ((lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a small 7 gon connected by a big line to a small 5 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small 7 gon connected by a big line to a small 5 gon ((lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a medium semicircle connected by a big line to a medium square": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium semicircle connected by a big line to a medium square ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 5) logo_ZA (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0)))))",
            "programs": [],
            "best_search_time": null
        },
        "a small square connected by a medium line to a small 6 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a small square connected by a medium line to a small 6 gon ((lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 6) $0))) $0)))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) (logo_FWRT logo_UL logo_ZA (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 6 logo_UL)) (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) logo_ZL)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 6 logo_UL))) 4 logo_UL))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) logo_ZL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) logo_ZL)) (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) 6 logo_UL)))))))))))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (logo_FWRT logo_UL logo_ZA (#(lambda (logo_FWRT logo_UL logo_ZA $0)) (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 6 logo_UL))))))))))))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (lambda (logo_FWRT (logo_MULL logo_UL $0) $1 $2)))) (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 6 logo_UL)))) logo_ZA 2))))))))))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 141.97922468185425
        },
        "a medium circle connected by a medium line to a medium 5 gon": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "a medium circle connected by a medium line to a medium 5 gon ((lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "4 small triangle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 small triangle s in a row ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 concentric square s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 concentric square s ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 4 (logo_MULL logo_UL $1))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 85.46443843841553
        },
        "6 small semicircle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 small semicircle s in a row ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 medium circle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 medium circle s in a row ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 small semicircle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 small semicircle s in a row ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4 medium circle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 medium circle s in a row ((lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 small circle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 small circle s in a row ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 small circle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 small circle s in a row ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 small 5 gon s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 small 5 gon s in a row ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 small triangle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 small triangle s in a row ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 small circle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 small circle s in a row ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 small square s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 small square s in a row ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (lambda (logo_FWRT (logo_MULL logo_UL $0) $1 $2)))) $0 logo_ZA $1))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (lambda (logo_FWRT (logo_MULL logo_UL $0) $1 $2)))) $0 logo_ZA $1)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL) logo_UL)) (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) logo_ZL)) $0)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL))))))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 97.02798509597778
        },
        "7 concentric square s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 concentric square s ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $4) (logo_DIVA logo_UA 4) $0))) $0)) $0))) $0)))",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 4 (logo_MULL logo_UL $1)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0)))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $3))))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_forLoop 4 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 (logo_MULL logo_UL $1)))) $3 $0)))))) (#(lambda (lambda (logo_FWRT $0 (logo_DIVA logo_UA 4) $1))) $0 logo_UL)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 129.23408460617065
        },
        "5 small semicircle s in a row": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 small semicircle s in a row ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a small 8 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a small 8 gon as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a small 5 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a small circle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a small triangle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) (#(lambda (logo_FWRT logo_UL logo_ZA $0)) $0) 3 logo_UL)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 6 $0 $1))) $0 (lambda (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 3 logo_UL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 4 $0 $1))) $0 (lambda (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 (logo_DIVA logo_UA $3) $0))) $2)))) $0 3 logo_UL))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 148.91726446151733
        },
        "3 sided snowflake with a medium square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium square as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a medium 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a medium 5 gon as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium semicircle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a medium semicircle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a small 6 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a small 6 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 6) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 concentric circle s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 concentric circle s ((lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short line as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a medium square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a medium square as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short line as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short line as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short line and a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short line and a medium semicircle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium line and a medium square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium line and a medium square as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short line and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short line and a small 5 gon as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium line and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium line and a medium circle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a medium line and a small 9 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a medium line and a small 9 gon as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium line and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium line and a small square as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a medium line and a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a medium line and a small circle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4 concentric circle s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 concentric circle s ((lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short line and a small 9 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short line and a small 9 gon as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium line and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium line and a medium circle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short line and a small 8 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short line and a small 8 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short line and a medium triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short line and a medium triangle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a medium line and a medium triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a medium line and a medium triangle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium space and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium space and a medium circle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short space and a medium square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short space and a medium square as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a small 7 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a small 7 gon as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 7) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a medium space and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a medium space and a medium circle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a medium space and a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a medium space and a medium semicircle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 concentric circle s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 concentric circle s ((lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short space and a small 8 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short space and a small 8 gon as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 8) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a medium circle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short space and a medium semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short space and a medium semicircle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a medium 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a medium 5 gon as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short space and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short space and a small square as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a small circle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 1) logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a medium space and a small 9 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a medium space and a small 9 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL 2) logo_ZA $0)) (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 9) $0))) $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with a short space and a short line and a short space and a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with a short space and a short line and a short space and a small circle as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short space and a short line and a short space and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short space and a short line and a short space and a small square as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a short line and a short space and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a short line and a short space and a small 5 gon as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 concentric circle s": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 concentric circle s ((lambda (logo_forLoop 4 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $3) logo_epsA $0))) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short space and a short line and a short space and a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short space and a short line and a short space and a small triangle as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a short line and a short space and a small semicircle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a short line and a short space and a small semicircle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short space and a short line and a short space and a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short space and a short line and a short space and a small triangle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "8 sided snowflake with a short space and a short line and a short space and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8 sided snowflake with a short space and a short line and a short space and a medium circle as arms ((lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a short line and a short space and a small circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a short line and a short space and a small circle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 1) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a short line and a short space and a medium circle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a short line and a short space and a medium circle as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0)))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3 sided snowflake with a short space and a short line and a short space and a small triangle as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 sided snowflake with a short space and a short line and a short space and a small triangle as arms ((lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 3) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "7 sided snowflake with a short space and a short line and a short space and a small square as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7 sided snowflake with a short space and a short line and a short space and a small square as arms ((lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 4) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "6 sided snowflake with a short space and a short line and a short space and a small 5 gon as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 sided snowflake with a short space and a short line and a short space and a small 5 gon as arms ((lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5 sided snowflake with 2 small 5 gon s as arms": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 sided snowflake with 2 small 5 gon s as arms ((lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 1) (logo_DIVA logo_UA 5) $0))) $0))))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 5) $0)))) $0)))",
            "programs": [],
            "best_search_time": null
        }
    }
}