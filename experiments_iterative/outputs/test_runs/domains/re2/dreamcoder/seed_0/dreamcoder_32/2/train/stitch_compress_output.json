{
    "cmd": "python3 run_iterative_experiment.py --experiment_name test_runs --experiment_type dreamcoder --domain re2 --encoder re2 --iterations 5 --global_batch_sizes 32 --enumeration_timeout 300 --recognition_train_steps 100 --verbose",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "no_curried_metavars": false,
            "no_curried_bodies": false,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "structure_penalty": 1.0,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true,
            "fused_lambda_tags": {
                "tags": null
            }
        }
    },
    "original_cost": 24575,
    "final_cost": 10771,
    "compression_ratio": 2.281589453161266,
    "num_abstractions": 10,
    "original": [
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty (_rflatten (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rsplit _rempty (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rdot (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (_rappend _u (_rsplit _i (_rflatten (_rappend _rempty (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _c $0) (_rconcat _d _c) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _c $0) (_rconcat _d _c) $0)) (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (if (_rmatch (_ror _c _rempty) $0) (_rconcat _d _c) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch (_ror _c _c) $0) (_rconcat _d _c) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch (_ror _z _c) $0) (_rconcat _d _c) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _e (cons _e (cons _rempty (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _j (_rsplit _i $0))))",
        "(lam (_rflatten (cons _j (_rsplit _a $0))))",
        "(lam (_rflatten (cons _j (_rsplit _b $0))))",
        "(lam (_rflatten (cons _j (_rsplit _c $0))))",
        "(lam (_rflatten (cons _j (_rsplit _m $0))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _l $0) (_rconcat _n _k) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r $0)) (_rsplit _rdot (_rflatten (map (lam _v) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (_rsplit _i $0))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend (_rconcat _d _t) (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rappend _o (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _p $0) (_rconcat _p _p) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _p $0) (_rconcat _p _p) $0)) (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rdot (_rflatten (map (lam (if (_rmatch _p $0) (_rconcat _p _p) $0)) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _p $0) (_rconcat _p _p) $0)) (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _p $0) (_rconcat (_rconcat _rempty _p) _p) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _t $0) (_rconcat _x _w) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (cons (car (_rsplit _rempty $0)) (cons _d (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (car (_rrevcdr (_rsplit _rempty $0))) (cons _d (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (car (_rsplit _rempty $0)) (cons _d (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons (car (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))) (cons _d (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (car (_rsplit _rempty (_rflatten (_rappend _q (_rsplit _i $0))))) (cons _d (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _d $0) (_rconcat _d _i) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _d $0) (_rconcat $0 _i) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _n $0)) (_rsplit _rdot (_rflatten (map (lam _i) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _i)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w $0)) (_rsplit _rdot (_rflatten (map (lam _t) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot (_rflatten (map (lam _l) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _rdot $0) (_rconcat _w _t) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (cons (_rconcat _rempty _k) (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (_rsplit _i $0))))))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rdot (_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (cons _x (_rsplit _i (_rflatten (cons _rempty (cons _e (cdr (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat (_rconcat _q $0) _rempty)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1)))) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (car (map (lam (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rdot (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (_rsplit _i $0))))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _t $0) _i $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _t $0) _i $0)) (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rdot (_rflatten (map (lam (if (_rmatch _t $0) _i $0)) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _t $0) (_rconcat _i _rempty) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _t $0) (_rconcat _rempty _i) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _t $0) (_rconcat _l _p) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _q (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _u $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _d _u) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _d _u) $0)) (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _d _u) $0)) (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rdot (_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _d _u) $0)) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _d (_rtail (map (lam _u) (_rsplit _rempty $1)))) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _s $0) _h $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _s) _h $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot (_rflatten (cdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot (_rflatten (cons _rempty (cons _rempty (cdr (_rsplit _rdot $0)))))))))))",
        "(lam (_rflatten (_rappend _u (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _m $0))))",
        "(lam (_rflatten (cons _a (_rsplit _i $0))))",
        "(lam (_rflatten (cons _a (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _a (_rsplit _u $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _rempty _l)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (_rsplit _i $0))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _r _a) $0)) (_rsplit _rdot $0))))"
    ],
    "rewritten": [
        "(lam (fn_3 $0 _o _u))",
        "(lam (fn_3 (_rflatten (_rsplit _rempty $0)) _o _u))",
        "(lam (_rflatten (_rsplit _rempty (fn_3 $0 _o _u))))",
        "(lam (fn_2 (fn_3 $0 _o _u) (lam $0)))",
        "(lam (fn_5 (fn_3 $0 _o _rempty) _u))",
        "(lam (fn_4 _c _c $0))",
        "(lam (fn_4 _c _c (_rflatten (_rsplit _rempty $0))))",
        "(lam (fn_4 (_ror _c _rempty) _c $0))",
        "(lam (fn_4 (_ror _c _c) _c $0))",
        "(lam (fn_4 (_ror _z _c) _c $0))",
        "(lam (fn_1 $0 _e _e))",
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _e (cons _e (cons _rempty (cdr (_rsplit _rdot $0)))))))",
        "(lam (fn_6 $0 _j))",
        "(lam (_rflatten (cons _j (_rsplit _a $0))))",
        "(lam (_rflatten (cons _j (_rsplit _b $0))))",
        "(lam (_rflatten (cons _j (_rsplit _c $0))))",
        "(lam (_rflatten (cons _j (_rsplit _m $0))))",
        "(lam (fn_1 $0 _i _w))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lam (fn_0 $0 (_rconcat _n _k) _l))",
        "(lam (fn_9 _v _r $0))",
        "(lam (fn_2 (fn_2 $0 (lam _v)) (lam (_rconcat _r $0))))",
        "(lam (fn_9 _v _r (fn_2 $0 (lam _n))))",
        "(lam (fn_9 _v _r (fn_2 $0 (lam _f))))",
        "(lam (fn_9 _v _r (_rflatten (_rsplit _i $0))))",
        "(lam (fn_3 $0 _d _t))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend (_rconcat _d _t) (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (fn_8 $0)))))))",
        "(lam (fn_7 _p _p $0))",
        "(lam (fn_7 _p _p (_rflatten (_rsplit _rempty $0))))",
        "(lam (fn_2 (fn_7 _p _p $0) (lam $0)))",
        "(lam (fn_7 _p _p (fn_2 $0 (lam $0))))",
        "(lam (fn_7 _p (_rconcat _rempty _p) $0))",
        "(lam (fn_0 $0 (_rconcat _x _w) _t))",
        "(lam (fn_1 $0 _d (car (_rsplit _rempty $0))))",
        "(lam (fn_1 $0 _d (car (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (fn_1 (_rflatten (_rsplit _rempty $0)) _d (car (_rsplit _rempty $0))))",
        "(lam (fn_1 $0 _d (car (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (fn_1 $0 _d (car (_rsplit _rempty (fn_5 $0 _q)))))",
        "(lam (fn_4 _d _i $0))",
        "(lam (fn_2 $0 (lam (if (_rmatch _d $0) (_rconcat $0 _i) $0))))",
        "(lam (fn_9 _i _n $0))",
        "(lam (fn_2 (fn_2 $0 (lam _i)) (lam (_rconcat _n $0))))",
        "(lam (fn_9 _i _n (fn_2 $0 (lam _n))))",
        "(lam (fn_9 _i _n (fn_2 $0 (lam _f))))",
        "(lam (fn_2 (fn_2 $0 (lam _n)) (lam (_rconcat $0 _i))))",
        "(lam (fn_9 _t _w $0))",
        "(lam (fn_2 (fn_2 $0 (lam _t)) (lam (_rconcat _w $0))))",
        "(lam (fn_9 _t _w (_rflatten (_rsplit _rempty $0))))",
        "(lam (fn_9 _t _w (fn_2 $0 (lam _l))))",
        "(lam (fn_0 $0 (_rconcat _w _t) _rdot))",
        "(lam (fn_1 $0 _e _k))",
        "(lam (fn_1 (_rflatten (_rsplit _rempty $0)) _e _k))",
        "(lam (fn_1 (fn_2 $0 (lam $0)) _e _k))",
        "(lam (fn_1 $0 _e (_rconcat _rempty _k)))",
        "(lam (fn_1 (_rflatten (_rsplit _i $0)) _e _k))",
        "(lam (fn_1 $0 _e _x))",
        "(lam (fn_1 $0 _e _x))",
        "(lam (fn_1 (_rflatten (_rsplit _rempty $0)) _e _x))",
        "(lam (fn_2 (fn_1 $0 _e _x) (lam $0)))",
        "(lam (fn_6 (fn_1 $0 _e _rempty) _x))",
        "(lam (fn_2 $0 (lam (_rconcat _q $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rempty $0))))",
        "(lam (fn_2 $0 (lam (_rconcat (_rconcat _q $0) _rempty))))",
        "(lam (fn_2 $0 (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1))))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (car (map (lam (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lam (fn_1 $0 _r _r))",
        "(lam (fn_1 (_rflatten (_rsplit _rempty $0)) _r _r))",
        "(lam (fn_2 (fn_1 $0 _r _r) (lam $0)))",
        "(lam (fn_1 (fn_2 $0 (lam $0)) _r _r))",
        "(lam (fn_1 (_rflatten (_rsplit _i $0)) _r _r))",
        "(lam (fn_0 $0 _i _t))",
        "(lam (fn_0 (_rflatten (_rsplit _rempty $0)) _i _t))",
        "(lam (fn_2 (fn_0 $0 _i _t) (lam $0)))",
        "(lam (fn_0 $0 (_rconcat _i _rempty) _t))",
        "(lam (fn_0 $0 (_rconcat _rempty _i) _t))",
        "(lam (fn_7 _t _l $0))",
        "(lam (_rflatten (_rappend _g (fn_8 $0))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (fn_5 $0 _q))",
        "(lam (_rflatten (_rappend _q (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _u $0))))",
        "(lam (fn_4 _s _u $0))",
        "(lam (fn_4 _s _u (_rflatten (_rsplit _rempty $0))))",
        "(lam (fn_4 _s _u (fn_2 $0 (lam $0))))",
        "(lam (fn_2 (fn_4 _s _u $0) (lam $0)))",
        "(lam (fn_4 _s (_rtail (map (lam _u) (_rsplit _rempty $0))) $0))",
        "(lam (fn_0 $0 _h _s))",
        "(lam (fn_2 $0 (lam (if (_rmatch $0 _s) _h $0))))",
        "(lam (fn_1 (_rflatten (cdr (_rsplit _rempty $0))) _s _e))",
        "(lam (_rflatten (cons _e (cons _s (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (fn_1 (fn_1 $0 _rempty _rempty) _s _e))",
        "(lam (fn_5 $0 _u))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _m $0))))",
        "(lam (fn_6 $0 _a))",
        "(lam (_rflatten (cons _a (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _a (_rsplit _u $0))))",
        "(lam (fn_2 $0 (lam _l)))",
        "(lam (fn_9 _l _rempty $0))",
        "(lam (fn_2 (fn_2 $0 (lam _n)) (lam _l)))",
        "(lam (fn_2 (fn_2 $0 (lam _f)) (lam _l)))",
        "(lam (fn_2 (_rflatten (_rsplit _i $0)) (lam _l)))",
        "(lam (fn_0 $0 (_rconcat _r _a) _s))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _o _u))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) (_rflatten (_rsplit _rempty $0)) _o _u))",
        "(lambda (_rflatten (_rsplit _rempty (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _o _u))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _o _u) (lambda $0)))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _o _rempty) _u))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) _c _c $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) _c _c (_rflatten (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) (_ror _c _rempty) _c $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) (_ror _c _c) _c $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) (_ror _z _c) _c $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e _e))",
        "(lambda (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (cons _e (cons _e (cons _rempty (cdr (_rsplit _rdot $0)))))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1))))) $0 _j))",
        "(lambda (_rflatten (cons _j (_rsplit _a $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _c $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _m $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _i _w))",
        "(lambda (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _n _k) _l))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _v _r $0))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _v)) (lambda (_rconcat _r $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _v _r (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _n))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _v _r (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _f))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _v _r (_rflatten (_rsplit _i $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _d _t))",
        "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lambda (_rflatten (_rappend (_rconcat _d _t) (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lambda (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (#(lambda (_rappend _o (_rrevcdr (_rsplit _rempty $0)))) $0)))))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat $1 _p) $2)))) _p _p $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat $1 _p) $2)))) _p _p (_rflatten (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat $1 _p) $2)))) _p _p $0) (lambda $0)))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat $1 _p) $2)))) _p _p (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat $1 _p) $2)))) _p (_rconcat _rempty _p) $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _x _w) _t))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _d (car (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _d (car (_rrevcdr (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (_rflatten (_rsplit _rempty $0)) _d (car (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _d (car (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _d (car (_rsplit _rempty (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) $0 _q)))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) _d _i $0))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (if (_rmatch _d $0) (_rconcat $0 _i) $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _i _n $0))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _i)) (lambda (_rconcat _n $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _i _n (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _n))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _i _n (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _f))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _n)) (lambda (_rconcat $0 _i))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _t _w $0))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _t)) (lambda (_rconcat _w $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _t _w (_rflatten (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _t _w (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _l))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _w _t) _rdot))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e _k))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (_rflatten (_rsplit _rempty $0)) _e _k))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda $0)) _e _k))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e (_rconcat _rempty _k)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (_rflatten (_rsplit _i $0)) _e _k))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e _x))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e _x))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (_rflatten (_rsplit _rempty $0)) _e _x))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e _x) (lambda $0)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e _rempty) _x))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat _q $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat (_rconcat _q $0) _rempty))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (car (map (lambda (_rconcat _q $1)) (_rsplit _rdot $1))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (car (map (lambda (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _r _r))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (_rflatten (_rsplit _rempty $0)) _r _r))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _r _r) (lambda $0)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda $0)) _r _r))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (_rflatten (_rsplit _i $0)) _r _r))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 _i _t))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) (_rflatten (_rsplit _rempty $0)) _i _t))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 _i _t) (lambda $0)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _i _rempty) _t))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _rempty _i) _t))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat $1 _p) $2)))) _t _l $0))",
        "(lambda (_rflatten (_rappend _g (#(lambda (_rappend _o (_rrevcdr (_rsplit _rempty $0)))) $0))))",
        "(lambda (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) $0 _q))",
        "(lambda (_rflatten (_rappend _q (_rsplit _rempty $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _u $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) _s _u $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) _s _u (_rflatten (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) _s _u (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) _s _u $0) (lambda $0)))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2)))) _s (_rtail (map (lambda _u) (_rsplit _rempty $0))) $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 _h _s))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (if (_rmatch $0 _s) _h $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (_rflatten (cdr (_rsplit _rempty $0))) _s _e))",
        "(lambda (_rflatten (cons _e (cons _s (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _rempty _rempty) _s _e))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) $0 _u))",
        "(lambda (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _m $0))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1))))) $0 _a))",
        "(lambda (_rflatten (cons _a (_rsplit _rempty $0))))",
        "(lambda (_rflatten (cons _a (_rsplit _u $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _l)))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _l _rempty $0))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _n)) (lambda _l)))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _f)) (lambda _l)))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (_rflatten (_rsplit _i $0)) (lambda _l)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _r _a) _s))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (map (lam (if (_rmatch #2 $0) #1 $0)) (_rsplit _rdot #0)))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2))))))",
            "arity": 3,
            "name": "fn_0",
            "utility": 7283,
            "final_cost": 18143,
            "compression_ratio": 1.3545168935677672,
            "cumulative_compression_ratio": 1.3545168935677672,
            "num_uses": 28,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 (_rconcat _d _c) (_ror _c _c)": "(_rflatten (map (lam (if (_rmatch (_ror _c _c) $0) (_rconcat _d _c) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _d _c) (_ror _c _rempty)": "(_rflatten (map (lam (if (_rmatch (_ror _c _rempty) $0) (_rconcat _d _c) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _d _c) (_ror _z _c)": "(_rflatten (map (lam (if (_rmatch (_ror _z _c) $0) (_rconcat _d _c) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _d _c) _c": "(_rflatten (map (lam (if (_rmatch _c $0) (_rconcat _d _c) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 (_rflatten (_rsplit _rempty $0)) (_rconcat _d _c) _c": "(_rflatten (map (lam (if (_rmatch _c $0) (_rconcat _d _c) $0)) (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 $0 (_rconcat #0 _i) _d": "(_rflatten (map (lam (if (_rmatch _d $0) (_rconcat $0 _i) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _d _i) _d": "(_rflatten (map (lam (if (_rmatch _d $0) (_rconcat _d _i) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _n _k) _l": "(_rflatten (map (lam (if (_rmatch _l $0) (_rconcat _n _k) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat (_rconcat _rempty _p) _p) _p": "(_rflatten (map (lam (if (_rmatch _p $0) (_rconcat (_rconcat _rempty _p) _p) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _p _p) _p": "(_rflatten (map (lam (if (_rmatch _p $0) (_rconcat _p _p) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 (_rflatten (_rsplit _rempty $0)) (_rconcat _p _p) _p": "(_rflatten (map (lam (if (_rmatch _p $0) (_rconcat _p _p) $0)) (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 (_rflatten (map (lam $0) (_rsplit _rdot $0))) (_rconcat _p _p) _p": "(_rflatten (map (lam (if (_rmatch _p $0) (_rconcat _p _p) $0)) (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_0 $0 (_rconcat _w _t) _rdot": "(_rflatten (map (lam (if (_rmatch _rdot $0) (_rconcat _w _t) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _d (_rtail (map (lam _u) (_rsplit _rempty $0)))) _s": "(_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _d (_rtail (map (lam _u) (_rsplit _rempty $1)))) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _d _u) _s": "(_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _d _u) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 (_rflatten (_rsplit _rempty $0)) (_rconcat _d _u) _s": "(_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _d _u) $0)) (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))"
                },
                {
                    "fn_0 (_rflatten (map (lam $0) (_rsplit _rdot $0))) (_rconcat _d _u) _s": "(_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _d _u) $0)) (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_0 $0 (_rconcat _r _a) _s": "(_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _r _a) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 _h _s": "(_rflatten (map (lam (if (_rmatch _s $0) _h $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _i _rempty) _t": "(_rflatten (map (lam (if (_rmatch _t $0) (_rconcat _i _rempty) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _l _p) _t": "(_rflatten (map (lam (if (_rmatch _t $0) (_rconcat _l _p) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _rempty _i) _t": "(_rflatten (map (lam (if (_rmatch _t $0) (_rconcat _rempty _i) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _x _w) _t": "(_rflatten (map (lam (if (_rmatch _t $0) (_rconcat _x _w) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 _i _t": "(_rflatten (map (lam (if (_rmatch _t $0) _i $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 (_rflatten (_rsplit _rempty $0)) _i _t": "(_rflatten (map (lam (if (_rmatch _t $0) _i $0)) (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #2 (cons #1 (cdr (_rsplit _rdot #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2))))))))",
            "arity": 3,
            "name": "fn_1",
            "utility": 3333,
            "final_cost": 15336,
            "compression_ratio": 1.1830333854981743,
            "cumulative_compression_ratio": 1.6024387063119458,
            "num_uses": 25,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 _e (_rconcat _rempty _k)": "(_rflatten (cons (_rconcat _rempty _k) (cons _e (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 $0 _d (car (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))": "(_rflatten (cons (car (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))) (cons _d (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 $0 _d (car (_rrevcdr (_rsplit _rempty $0)))": "(_rflatten (cons (car (_rrevcdr (_rsplit _rempty $0))) (cons _d (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 $0 _d (car (_rsplit _rempty $0))": "(_rflatten (cons (car (_rsplit _rempty $0)) (cons _d (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 (_rflatten (_rsplit _rempty $0)) _d (car (_rsplit _rempty $0))": "(_rflatten (cons (car (_rsplit _rempty $0)) (cons _d (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))))"
                },
                {
                    "fn_1 $0 _d (car (_rsplit _rempty (_rflatten (_rappend _q (_rsplit _i $0)))))": "(_rflatten (cons (car (_rsplit _rempty (_rflatten (_rappend _q (_rsplit _i $0))))) (cons _d (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 $0 _e _e": "(_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 (_rflatten (cdr (_rsplit _rempty $0))) _s _e": "(_rflatten (cons _e (cons _s (cdr (_rsplit _rdot (_rflatten (cdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_1 (_rflatten (cons _rempty (cons _rempty (cdr (_rsplit _rdot $0))))) _s _e": "(_rflatten (cons _e (cons _s (cdr (_rsplit _rdot (_rflatten (cons _rempty (cons _rempty (cdr (_rsplit _rdot $0))))))))))"
                },
                {
                    "fn_1 $0 _e _k": "(_rflatten (cons _k (cons _e (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 (_rflatten (_rsplit _i $0)) _e _k": "(_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (_rsplit _i $0)))))))"
                },
                {
                    "fn_1 (_rflatten (_rsplit _rempty $0)) _e _k": "(_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))))"
                },
                {
                    "fn_1 (_rflatten (map (lam $0) (_rsplit _rdot $0))) _e _k": "(_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0))))))))"
                },
                {
                    "fn_1 $0 _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 (_rflatten (_rsplit _i $0)) _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (_rsplit _i $0)))))))"
                },
                {
                    "fn_1 (_rflatten (_rsplit _rempty $0)) _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))))"
                },
                {
                    "fn_1 (_rflatten (map (lam $0) (_rsplit _rdot $0))) _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0))))))))"
                },
                {
                    "fn_1 $0 _e _rempty": "(_rflatten (cons _rempty (cons _e (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 $0 _rempty _rempty": "(_rflatten (cons _rempty (cons _rempty (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 $0 _i _w": "(_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 $0 _e _x": "(_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 (_rflatten (_rsplit _rempty $0)) _e _x": "(_rflatten (cons _x (cons _e (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map #1 (_rsplit _rdot #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1)))))",
            "arity": 2,
            "name": "fn_2",
            "utility": 1312,
            "final_cost": 14303,
            "compression_ratio": 1.0722226106411243,
            "cumulative_compression_ratio": 1.7181710130741803,
            "num_uses": 45,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 $0 (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rdot (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_2 (fn_0 $0 (_rconcat _d _u) _s) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rdot (fn_0 $0 (_rconcat _d _u) _s))))"
                },
                {
                    "fn_2 (fn_0 $0 (_rconcat _p _p) _p) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rdot (fn_0 $0 (_rconcat _p _p) _p))))"
                },
                {
                    "fn_2 (fn_0 $0 _i _t) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rdot (fn_0 $0 _i _t))))"
                },
                {
                    "fn_2 (fn_1 $0 _e _x) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rdot (fn_1 $0 _e _x))))"
                },
                {
                    "fn_2 (fn_1 $0 _r _r) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rdot (fn_1 $0 _r _r))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _n) (_rsplit _rdot $0))) (lam (_rconcat $0 _i))": "(_rflatten (map (lam (_rconcat $0 _i)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat (_rconcat _q $0) _rempty))": "(_rflatten (map (lam (_rconcat (_rconcat _q $0) _rempty)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (map (lam _i) (_rsplit _rdot $0))) (lam (_rconcat _n $0))": "(_rflatten (map (lam (_rconcat _n $0)) (_rsplit _rdot (_rflatten (map (lam _i) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat _n _i))": "(_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (map (lam _f) (_rsplit _rdot $0))) (lam (_rconcat _n _i))": "(_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _n) (_rsplit _rdot $0))) (lam (_rconcat _n _i))": "(_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat _q $0))": "(_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (map (lam _v) (_rsplit _rdot $0))) (lam (_rconcat _r $0))": "(_rflatten (map (lam (_rconcat _r $0)) (_rsplit _rdot (_rflatten (map (lam _v) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (_rsplit _i $0)) (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (_rsplit _i $0)))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _f) (_rsplit _rdot $0))) (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _n) (_rsplit _rdot $0))) (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat _rempty _l))": "(_rflatten (map (lam (_rconcat _rempty _l)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (map (lam _t) (_rsplit _rdot $0))) (lam (_rconcat _w $0))": "(_rflatten (map (lam (_rconcat _w $0)) (_rsplit _rdot (_rflatten (map (lam _t) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat _w _t))": "(_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (_rsplit _rempty $0)) (lam (_rconcat _w _t))": "(_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _l) (_rsplit _rdot $0))) (lam (_rconcat _w _t))": "(_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot (_rflatten (map (lam _l) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1))))": "(_rflatten (map (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1)))) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam (if (_rmatch $0 _s) _h $0))": "(_rflatten (map (lam (if (_rmatch $0 _s) _h $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam (if (_rmatch _d $0) (_rconcat $0 _i) $0))": "(_rflatten (map (lam (if (_rmatch _d $0) (_rconcat $0 _i) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam _f)": "(_rflatten (map (lam _f) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam _i)": "(_rflatten (map (lam _i) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam _l)": "(_rflatten (map (lam _l) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (_rsplit _i $0)) (lam _l)": "(_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (_rsplit _i $0)))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _f) (_rsplit _rdot $0))) (lam _l)": "(_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _n) (_rsplit _rdot $0))) (lam _l)": "(_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam _n)": "(_rflatten (map (lam _n) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam _t)": "(_rflatten (map (lam _t) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam _v)": "(_rflatten (map (lam _v) (_rsplit _rdot $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #2 (_rappend #1 (_rrevcdr (_rrevcdr (_rsplit _rempty #0))))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2)))))))))",
            "arity": 3,
            "name": "fn_3",
            "utility": 1212,
            "final_cost": 13212,
            "compression_ratio": 1.0825764456554647,
            "cumulative_compression_ratio": 1.860051468362095,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 $0 _o _rempty": "(_rflatten (_rappend _rempty (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 $0 _d _t": "(_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 $0 _o _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 (_rflatten (_rsplit _rempty $0)) _o _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty (_rflatten (_rsplit _rempty $0))))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_0 #2 (_rconcat _d #1) #0)",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d $1) $2))))",
            "arity": 3,
            "name": "fn_4",
            "utility": 606,
            "final_cost": 12646,
            "compression_ratio": 1.0447572354894827,
            "cumulative_compression_ratio": 1.9433022299541356,
            "num_uses": 11,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 _s (_rtail (map (lam _u) (_rsplit _rempty $0))) $0": "(fn_0 $0 (_rconcat _d (_rtail (map (lam _u) (_rsplit _rempty $0)))) _s)"
                },
                {
                    "fn_4 (_ror _c _c) _c $0": "(fn_0 $0 (_rconcat _d _c) (_ror _c _c))"
                },
                {
                    "fn_4 (_ror _c _rempty) _c $0": "(fn_0 $0 (_rconcat _d _c) (_ror _c _rempty))"
                },
                {
                    "fn_4 (_ror _z _c) _c $0": "(fn_0 $0 (_rconcat _d _c) (_ror _z _c))"
                },
                {
                    "fn_4 _c _c $0": "(fn_0 $0 (_rconcat _d _c) _c)"
                },
                {
                    "fn_4 _d _i $0": "(fn_0 $0 (_rconcat _d _i) _d)"
                },
                {
                    "fn_4 _s _u $0": "(fn_0 $0 (_rconcat _d _u) _s)"
                },
                {
                    "fn_4 _c _c (_rflatten (_rsplit _rempty $0))": "(fn_0 (_rflatten (_rsplit _rempty $0)) (_rconcat _d _c) _c)"
                },
                {
                    "fn_4 _s _u (_rflatten (_rsplit _rempty $0))": "(fn_0 (_rflatten (_rsplit _rempty $0)) (_rconcat _d _u) _s)"
                },
                {
                    "fn_4 _s _u (fn_2 $0 (lam $0))": "(fn_0 (fn_2 $0 (lam $0)) (_rconcat _d _u) _s)"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rsplit _i #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1)))))",
            "arity": 2,
            "name": "fn_5",
            "utility": 606,
            "final_cost": 12161,
            "compression_ratio": 1.0398815886851411,
            "cumulative_compression_ratio": 2.020804210180084,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 $0 _q": "(_rflatten (_rappend _q (_rsplit _i $0)))"
                },
                {
                    "fn_5 $0 _u": "(_rflatten (_rappend _u (_rsplit _i $0)))"
                },
                {
                    "fn_5 (fn_3 $0 _o _rempty) _u": "(_rflatten (_rappend _u (_rsplit _i (fn_3 $0 _o _rempty))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (_rsplit _i #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1)))))",
            "arity": 2,
            "name": "fn_6",
            "utility": 606,
            "final_cost": 11676,
            "compression_ratio": 1.041538198013018,
            "cumulative_compression_ratio": 2.104744775608085,
            "num_uses": 3,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_6 $0 _a": "(_rflatten (cons _a (_rsplit _i $0)))"
                },
                {
                    "fn_6 $0 _j": "(_rflatten (cons _j (_rsplit _i $0)))"
                },
                {
                    "fn_6 (fn_1 $0 _e _rempty) _x": "(_rflatten (cons _x (_rsplit _i (fn_1 $0 _e _rempty))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_0 #2 (_rconcat #1 _p) #0)",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat $1 _p) $2))))",
            "arity": 3,
            "name": "fn_7",
            "utility": 404,
            "final_cost": 11312,
            "compression_ratio": 1.0321782178217822,
            "cumulative_compression_ratio": 2.17247171145686,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_7 _p (_rconcat _rempty _p) $0": "(fn_0 $0 (_rconcat (_rconcat _rempty _p) _p) _p)"
                },
                {
                    "fn_7 _t _l $0": "(fn_0 $0 (_rconcat _l _p) _t)"
                },
                {
                    "fn_7 _p _p $0": "(fn_0 $0 (_rconcat _p _p) _p)"
                },
                {
                    "fn_7 _p _p (_rflatten (_rsplit _rempty $0))": "(fn_0 (_rflatten (_rsplit _rempty $0)) (_rconcat _p _p) _p)"
                },
                {
                    "fn_7 _p _p (fn_2 $0 (lam $0))": "(fn_0 (fn_2 $0 (lam $0)) (_rconcat _p _p) _p)"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rappend _o (_rrevcdr (_rsplit _rempty #0)))",
            "dreamcoder": "#(lambda (_rappend _o (_rrevcdr (_rsplit _rempty $0))))",
            "arity": 1,
            "name": "fn_8",
            "utility": 404,
            "final_cost": 11037,
            "compression_ratio": 1.0249161909939295,
            "cumulative_compression_ratio": 2.226601431548428,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_8 $0": "(_rappend _o (_rrevcdr (_rsplit _rempty $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_2 #2 (lam (_rconcat #1 #0)))",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3))))))",
            "arity": 3,
            "name": "fn_9",
            "utility": 306,
            "final_cost": 10771,
            "compression_ratio": 1.0246959428093956,
            "cumulative_compression_ratio": 2.281589453161266,
            "num_uses": 17,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_9 _rempty (_rconcat _q #0) $0": "(fn_2 $0 (lam (_rconcat (_rconcat _q $0) _rempty)))"
                },
                {
                    "fn_9 _i _n $0": "(fn_2 $0 (lam (_rconcat _n _i)))"
                },
                {
                    "fn_9 #0 _q $0": "(fn_2 $0 (lam (_rconcat _q $0)))"
                },
                {
                    "fn_9 _v _r $0": "(fn_2 $0 (lam (_rconcat _r _v)))"
                },
                {
                    "fn_9 _l _rempty $0": "(fn_2 $0 (lam (_rconcat _rempty _l)))"
                },
                {
                    "fn_9 _t _w $0": "(fn_2 $0 (lam (_rconcat _w _t)))"
                },
                {
                    "fn_9 _v _r (_rflatten (_rsplit _i $0))": "(fn_2 (_rflatten (_rsplit _i $0)) (lam (_rconcat _r _v)))"
                },
                {
                    "fn_9 _t _w (_rflatten (_rsplit _rempty $0))": "(fn_2 (_rflatten (_rsplit _rempty $0)) (lam (_rconcat _w _t)))"
                },
                {
                    "fn_9 _i _n (fn_2 $0 (lam _f))": "(fn_2 (fn_2 $0 (lam _f)) (lam (_rconcat _n _i)))"
                },
                {
                    "fn_9 _v _r (fn_2 $0 (lam _f))": "(fn_2 (fn_2 $0 (lam _f)) (lam (_rconcat _r _v)))"
                },
                {
                    "fn_9 #0 _n (fn_2 $0 (lam _i))": "(fn_2 (fn_2 $0 (lam _i)) (lam (_rconcat _n $0)))"
                },
                {
                    "fn_9 _t _w (fn_2 $0 (lam _l))": "(fn_2 (fn_2 $0 (lam _l)) (lam (_rconcat _w _t)))"
                },
                {
                    "fn_9 _i #0 (fn_2 $0 (lam _n))": "(fn_2 (fn_2 $0 (lam _n)) (lam (_rconcat $0 _i)))"
                },
                {
                    "fn_9 _i _n (fn_2 $0 (lam _n))": "(fn_2 (fn_2 $0 (lam _n)) (lam (_rconcat _n _i)))"
                },
                {
                    "fn_9 _v _r (fn_2 $0 (lam _n))": "(fn_2 (fn_2 $0 (lam _n)) (lam (_rconcat _r _v)))"
                },
                {
                    "fn_9 #0 _w (fn_2 $0 (lam _t))": "(fn_2 (fn_2 $0 (lam _t)) (lam (_rconcat _w $0)))"
                },
                {
                    "fn_9 #0 _r (fn_2 $0 (lam _v))": "(fn_2 (fn_2 $0 (lam _v)) (lam (_rconcat _r $0)))"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}