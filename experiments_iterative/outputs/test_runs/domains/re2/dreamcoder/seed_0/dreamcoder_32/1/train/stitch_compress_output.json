{
    "cmd": "python3 run_iterative_experiment.py --experiment_name test_runs --experiment_type dreamcoder --domain re2 --encoder re2 --iterations 5 --global_batch_sizes 32 --enumeration_timeout 300 --recognition_train_steps 100 --verbose",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "no_curried_metavars": false,
            "no_curried_bodies": false,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "structure_penalty": 1.0,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true,
            "fused_lambda_tags": {
                "tags": null
            }
        }
    },
    "original_cost": 16242,
    "final_cost": 7486,
    "compression_ratio": 2.1696500133582686,
    "num_abstractions": 10,
    "original": [
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _e (cons _e (cons _rempty (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _j (_rsplit _i $0))))",
        "(lam (_rflatten (cons _j (_rsplit _a $0))))",
        "(lam (_rflatten (cons _j (_rsplit _b $0))))",
        "(lam (_rflatten (cons _j (_rsplit _c $0))))",
        "(lam (_rflatten (cons _j (_rsplit _m $0))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _l $0) (_rconcat _n _k) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (_rsplit _i $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r $0)) (_rsplit _rdot (_rflatten (map (lam _v) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend (_rconcat _d _t) (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rappend _o (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _d $0) (_rconcat $0 _i) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _d $0) (_rconcat _d _i) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _n $0)) (_rsplit _rdot (_rflatten (map (lam _i) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _i)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (_rsplit _i $0))))))))",
        "(lam (_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (cons (_rconcat _rempty _k) (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat (_rconcat _q $0) _rempty)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1)))) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (car (map (lam (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (_rsplit _i $0))))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rdot (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (map (lam (if (_rmatch _t $0) (_rconcat _l _p) $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _u $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _s) _h $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _s $0) _h $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _m $0))))",
        "(lam (_rflatten (cons _a (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _a (_rsplit _i $0))))",
        "(lam (_rflatten (cons _a (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _a (_rsplit _i $0))))",
        "(lam (_rflatten (cons _a (_rsplit _u $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (_rsplit _i $0))))))",
        "(lam (_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _rempty _l)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _r _a) $0)) (_rsplit _rdot $0))))"
    ],
    "rewritten": [
        "(lam (fn_9 _e $0))",
        "(lam (_rflatten (cons _e (cons _e (cdr (fn_8 $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (fn_8 $0)))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _e (cons _e (cons _rempty (cdr (_rsplit _rdot $0)))))))",
        "(lam (fn_5 $0 _j))",
        "(lam (_rflatten (cons _j (_rsplit _a $0))))",
        "(lam (_rflatten (cons _j (_rsplit _b $0))))",
        "(lam (_rflatten (cons _j (_rsplit _c $0))))",
        "(lam (_rflatten (cons _j (_rsplit _m $0))))",
        "(lam (fn_1 $0 _i _w))",
        "(lam (_rflatten (cons _w (cons _i (cdr (fn_8 $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (fn_8 $0)))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lam (fn_0 $0 (_rconcat _n _k) _l))",
        "(lam (fn_6 _v _r $0))",
        "(lam (fn_6 _v _r (_rflatten (_rsplit _i $0))))",
        "(lam (fn_7 _r (fn_2 $0 (lam _v))))",
        "(lam (fn_6 _v _r (fn_2 $0 (lam _f))))",
        "(lam (fn_6 _v _r (fn_2 $0 (lam _n))))",
        "(lam (fn_3 (_rrevcdr (fn_8 $0)) _d _t))",
        "(lam (_rflatten (_rappend (_rconcat _d _t) (_rrevcdr (_rrevcdr (fn_8 $0))))))",
        "(lam (fn_3 (_rrevcdr (_rsplit _rdot $0)) _d _t))",
        "(lam (fn_3 (_rappend _o (_rrevcdr (_rrevcdr (fn_8 $0)))) _d _t))",
        "(lam (fn_3 (_rrevcdr (_rappend _o (_rrevcdr (fn_8 $0)))) _d _t))",
        "(lam (fn_2 $0 (lam (if (_rmatch _d $0) (_rconcat $0 _i) $0))))",
        "(lam (fn_0 $0 (_rconcat _d _i) _d))",
        "(lam (fn_6 _i _n $0))",
        "(lam (fn_7 _n (fn_2 $0 (lam _i))))",
        "(lam (fn_2 (fn_2 $0 (lam _n)) (lam (_rconcat $0 _i))))",
        "(lam (fn_6 _i _n (fn_2 $0 (lam _f))))",
        "(lam (fn_6 _i _n (fn_2 $0 (lam _n))))",
        "(lam (fn_9 _k $0))",
        "(lam (fn_9 _k (_rflatten (fn_8 $0))))",
        "(lam (fn_9 _k (_rflatten (_rsplit _i $0))))",
        "(lam (fn_9 _k (fn_2 $0 (lam $0))))",
        "(lam (fn_9 (_rconcat _rempty _k) $0))",
        "(lam (fn_7 _q $0))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (fn_8 $0))))",
        "(lam (fn_2 $0 (lam (_rconcat (_rconcat _q $0) _rempty))))",
        "(lam (fn_2 $0 (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1))))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (car (map (lam (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lam (fn_1 $0 _r _r))",
        "(lam (fn_1 (_rflatten (fn_8 $0)) _r _r))",
        "(lam (fn_1 (_rflatten (_rsplit _i $0)) _r _r))",
        "(lam (fn_2 (fn_1 $0 _r _r) (lam $0)))",
        "(lam (fn_1 (fn_2 $0 (lam $0)) _r _r))",
        "(lam (fn_0 $0 (_rconcat _l _p) _t))",
        "(lam (fn_3 (fn_8 $0) _o _g))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (fn_8 $0)))))",
        "(lam (fn_3 (_rsplit _rdot $0) _o _g))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _q (fn_8 $0))))",
        "(lam (fn_4 $0 _q))",
        "(lam (_rflatten (_rappend _q (fn_8 $0))))",
        "(lam (fn_4 $0 _q))",
        "(lam (_rflatten (_rappend _q (_rsplit _u $0))))",
        "(lam (fn_2 $0 (lam (if (_rmatch $0 _s) _h $0))))",
        "(lam (fn_0 $0 _h _s))",
        "(lam (fn_4 $0 _u))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _m $0))))",
        "(lam (_rflatten (cons _a (fn_8 $0))))",
        "(lam (fn_5 $0 _a))",
        "(lam (_rflatten (cons _a (fn_8 $0))))",
        "(lam (fn_5 $0 _a))",
        "(lam (_rflatten (cons _a (_rsplit _u $0))))",
        "(lam (fn_2 $0 (lam _l)))",
        "(lam (fn_2 (_rflatten (_rsplit _i $0)) (lam _l)))",
        "(lam (fn_2 (fn_2 $0 (lam _f)) (lam _l)))",
        "(lam (fn_2 (fn_2 $0 (lam _n)) (lam _l)))",
        "(lam (fn_6 _l _rempty $0))",
        "(lam (fn_0 $0 (_rconcat _r _a) _s))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e $1))) _e $0))",
        "(lambda (_rflatten (cons _e (cons _e (cdr (#(lambda (_rsplit _rempty $0)) $0))))))",
        "(lambda (_rflatten (cons (_rconcat _e _e) (cdr (#(lambda (_rsplit _rempty $0)) $0)))))",
        "(lambda (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (cons _e (cons _e (cons _rempty (cdr (_rsplit _rdot $0)))))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1))))) $0 _j))",
        "(lambda (_rflatten (cons _j (_rsplit _a $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _c $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _m $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _i _w))",
        "(lambda (_rflatten (cons _w (cons _i (cdr (#(lambda (_rsplit _rempty $0)) $0))))))",
        "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (#(lambda (_rsplit _rempty $0)) $0)))))",
        "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _n _k) _l))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _v _r $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _v _r (_rflatten (_rsplit _i $0))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $0))))) _r (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _v))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _v _r (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _f))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _v _r (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _n))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rrevcdr (#(lambda (_rsplit _rempty $0)) $0)) _d _t))",
        "(lambda (_rflatten (_rappend (_rconcat _d _t) (_rrevcdr (_rrevcdr (#(lambda (_rsplit _rempty $0)) $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rrevcdr (_rsplit _rdot $0)) _d _t))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rappend _o (_rrevcdr (_rrevcdr (#(lambda (_rsplit _rempty $0)) $0)))) _d _t))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rrevcdr (_rappend _o (_rrevcdr (#(lambda (_rsplit _rempty $0)) $0)))) _d _t))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (if (_rmatch _d $0) (_rconcat $0 _i) $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _d _i) _d))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _i _n $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $0))))) _n (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _i))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _n)) (lambda (_rconcat $0 _i))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _i _n (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _f))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _i _n (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _n))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e $1))) _k $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e $1))) _k (_rflatten (#(lambda (_rsplit _rempty $0)) $0))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e $1))) _k (_rflatten (_rsplit _i $0))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e $1))) _k (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda $0))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e $1))) (_rconcat _rempty _k) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $0))))) _q $0))",
        "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (#(lambda (_rsplit _rempty $0)) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat (_rconcat _q $0) _rempty))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (car (map (lambda (_rconcat _q $1)) (_rsplit _rdot $1))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (car (map (lambda (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _r _r))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (_rflatten (#(lambda (_rsplit _rempty $0)) $0)) _r _r))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (_rflatten (_rsplit _i $0)) _r _r))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _r _r) (lambda $0)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda $0)) _r _r))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _l _p) _t))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (#(lambda (_rsplit _rempty $0)) $0) _o _g))",
        "(lambda (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (#(lambda (_rsplit _rempty $0)) $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rsplit _rdot $0) _o _g))",
        "(lambda (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lambda (_rflatten (_rappend _q (#(lambda (_rsplit _rempty $0)) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) $0 _q))",
        "(lambda (_rflatten (_rappend _q (#(lambda (_rsplit _rempty $0)) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) $0 _q))",
        "(lambda (_rflatten (_rappend _q (_rsplit _u $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (if (_rmatch $0 _s) _h $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 _h _s))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) $0 _u))",
        "(lambda (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _m $0))))",
        "(lambda (_rflatten (cons _a (#(lambda (_rsplit _rempty $0)) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1))))) $0 _a))",
        "(lambda (_rflatten (cons _a (#(lambda (_rsplit _rempty $0)) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1))))) $0 _a))",
        "(lambda (_rflatten (cons _a (_rsplit _u $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _l)))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (_rflatten (_rsplit _i $0)) (lambda _l)))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _f)) (lambda _l)))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda _n)) (lambda _l)))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3)))))) _l _rempty $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2)))))) $0 (_rconcat _r _a) _s))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (map (lam (if (_rmatch #2 $0) #1 $0)) (_rsplit _rdot #0)))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $1 $0) $2 $0)) (_rsplit _rdot $2))))))",
            "arity": 3,
            "name": "fn_0",
            "utility": 3540,
            "final_cost": 12843,
            "compression_ratio": 1.2646577902359262,
            "cumulative_compression_ratio": 1.2646577902359262,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 (_rconcat #0 _i) _d": "(_rflatten (map (lam (if (_rmatch _d $0) (_rconcat $0 _i) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _d _i) _d": "(_rflatten (map (lam (if (_rmatch _d $0) (_rconcat _d _i) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _n _k) _l": "(_rflatten (map (lam (if (_rmatch _l $0) (_rconcat _n _k) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _r _a) _s": "(_rflatten (map (lam (if (_rmatch _s $0) (_rconcat _r _a) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 _h _s": "(_rflatten (map (lam (if (_rmatch _s $0) _h $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _l _p) _t": "(_rflatten (map (lam (if (_rmatch _t $0) (_rconcat _l _p) $0)) (_rsplit _rdot $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #2 (cons #1 (cdr (_rsplit _rdot #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2))))))))",
            "arity": 3,
            "name": "fn_1",
            "utility": 2020,
            "final_cost": 11025,
            "compression_ratio": 1.1648979591836734,
            "cumulative_compression_ratio": 1.4731972789115646,
            "num_uses": 12,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 _e (_rconcat _rempty _k)": "(_rflatten (cons (_rconcat _rempty _k) (cons _e (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 $0 _e _e": "(_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 $0 _e _k": "(_rflatten (cons _k (cons _e (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 (_rflatten (_rsplit _i $0)) _e _k": "(_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (_rsplit _i $0)))))))"
                },
                {
                    "fn_1 (_rflatten (_rsplit _rempty $0)) _e _k": "(_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))))"
                },
                {
                    "fn_1 (_rflatten (map (lam $0) (_rsplit _rdot $0))) _e _k": "(_rflatten (cons _k (cons _e (cdr (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0))))))))"
                },
                {
                    "fn_1 $0 _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_1 (_rflatten (_rsplit _i $0)) _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (_rsplit _i $0)))))))"
                },
                {
                    "fn_1 (_rflatten (_rsplit _rempty $0)) _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (_rsplit _rempty $0)))))))"
                },
                {
                    "fn_1 (_rflatten (map (lam $0) (_rsplit _rdot $0))) _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rdot (_rflatten (map (lam $0) (_rsplit _rdot $0))))))))"
                },
                {
                    "fn_1 $0 _i _w": "(_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map #1 (_rsplit _rdot #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1)))))",
            "arity": 2,
            "name": "fn_2",
            "utility": 1212,
            "final_cost": 9861,
            "compression_ratio": 1.1180407666565257,
            "cumulative_compression_ratio": 1.6470946151505932,
            "num_uses": 32,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 $0 (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (fn_1 $0 _r _r) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rdot (fn_1 $0 _r _r))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _n) (_rsplit _rdot $0))) (lam (_rconcat $0 _i))": "(_rflatten (map (lam (_rconcat $0 _i)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat (_rconcat _q $0) _rempty))": "(_rflatten (map (lam (_rconcat (_rconcat _q $0) _rempty)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (map (lam _i) (_rsplit _rdot $0))) (lam (_rconcat _n $0))": "(_rflatten (map (lam (_rconcat _n $0)) (_rsplit _rdot (_rflatten (map (lam _i) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat _n _i))": "(_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (map (lam _f) (_rsplit _rdot $0))) (lam (_rconcat _n _i))": "(_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _n) (_rsplit _rdot $0))) (lam (_rconcat _n _i))": "(_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat _q $0))": "(_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (map (lam _v) (_rsplit _rdot $0))) (lam (_rconcat _r $0))": "(_rflatten (map (lam (_rconcat _r $0)) (_rsplit _rdot (_rflatten (map (lam _v) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (_rsplit _i $0)) (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (_rsplit _i $0)))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _f) (_rsplit _rdot $0))) (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _n) (_rsplit _rdot $0))) (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam (_rconcat _rempty _l))": "(_rflatten (map (lam (_rconcat _rempty _l)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1))))": "(_rflatten (map (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1)))) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam (if (_rmatch $0 _s) _h $0))": "(_rflatten (map (lam (if (_rmatch $0 _s) _h $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam (if (_rmatch _d $0) (_rconcat $0 _i) $0))": "(_rflatten (map (lam (if (_rmatch _d $0) (_rconcat $0 _i) $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam _f)": "(_rflatten (map (lam _f) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam _i)": "(_rflatten (map (lam _i) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam _l)": "(_rflatten (map (lam _l) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 (_rflatten (_rsplit _i $0)) (lam _l)": "(_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (_rsplit _i $0)))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _f) (_rsplit _rdot $0))) (lam _l)": "(_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (map (lam _f) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 (_rflatten (map (lam _n) (_rsplit _rdot $0))) (lam _l)": "(_rflatten (map (lam _l) (_rsplit _rdot (_rflatten (map (lam _n) (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 $0 (lam _n)": "(_rflatten (map (lam _n) (_rsplit _rdot $0)))"
                },
                {
                    "fn_2 $0 (lam _v)": "(_rflatten (map (lam _v) (_rsplit _rdot $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #2 (_rappend #1 (_rrevcdr #0))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2)))))))",
            "arity": 3,
            "name": "fn_3",
            "utility": 606,
            "final_cost": 9316,
            "compression_ratio": 1.0585015027908973,
            "cumulative_compression_ratio": 1.7434521253756978,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 (_rsplit _rdot $0) _o _g": "(_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_3 (_rsplit _rempty $0) _o _g": "(_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_3 (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))) _d _t": "(_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_3 (_rrevcdr (_rappend _o (_rrevcdr (_rsplit _rempty $0)))) _d _t": "(_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_3 (_rrevcdr (_rsplit _rdot $0)) _d _t": "(_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_3 (_rrevcdr (_rsplit _rempty $0)) _d _t": "(_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rsplit _i #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1)))))",
            "arity": 2,
            "name": "fn_4",
            "utility": 606,
            "final_cost": 8770,
            "compression_ratio": 1.0622576966932724,
            "cumulative_compression_ratio": 1.8519954389965791,
            "num_uses": 3,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 $0 _q": "(_rflatten (_rappend _q (_rsplit _i $0)))"
                },
                {
                    "fn_4 $0 _u": "(_rflatten (_rappend _u (_rsplit _i $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (_rsplit _i #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1)))))",
            "arity": 2,
            "name": "fn_5",
            "utility": 606,
            "final_cost": 8224,
            "compression_ratio": 1.0663910505836576,
            "cumulative_compression_ratio": 1.9749513618677044,
            "num_uses": 3,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 $0 _a": "(_rflatten (cons _a (_rsplit _i $0)))"
                },
                {
                    "fn_5 $0 _j": "(_rflatten (cons _j (_rsplit _i $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_2 #2 (lam (_rconcat #1 #0)))",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $3))))))",
            "arity": 3,
            "name": "fn_6",
            "utility": 204,
            "final_cost": 8020,
            "compression_ratio": 1.025436408977556,
            "cumulative_compression_ratio": 2.0251870324189527,
            "num_uses": 13,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_6 _rempty (_rconcat _q #0) $0": "(fn_2 $0 (lam (_rconcat (_rconcat _q $0) _rempty)))"
                },
                {
                    "fn_6 _i _n $0": "(fn_2 $0 (lam (_rconcat _n _i)))"
                },
                {
                    "fn_6 #0 _q $0": "(fn_2 $0 (lam (_rconcat _q $0)))"
                },
                {
                    "fn_6 _v _r $0": "(fn_2 $0 (lam (_rconcat _r _v)))"
                },
                {
                    "fn_6 _l _rempty $0": "(fn_2 $0 (lam (_rconcat _rempty _l)))"
                },
                {
                    "fn_6 _v _r (_rflatten (_rsplit _i $0))": "(fn_2 (_rflatten (_rsplit _i $0)) (lam (_rconcat _r _v)))"
                },
                {
                    "fn_6 _i _n (fn_2 $0 (lam _f))": "(fn_2 (fn_2 $0 (lam _f)) (lam (_rconcat _n _i)))"
                },
                {
                    "fn_6 _v _r (fn_2 $0 (lam _f))": "(fn_2 (fn_2 $0 (lam _f)) (lam (_rconcat _r _v)))"
                },
                {
                    "fn_6 #0 _n (fn_2 $0 (lam _i))": "(fn_2 (fn_2 $0 (lam _i)) (lam (_rconcat _n $0)))"
                },
                {
                    "fn_6 _i #0 (fn_2 $0 (lam _n))": "(fn_2 (fn_2 $0 (lam _n)) (lam (_rconcat $0 _i)))"
                },
                {
                    "fn_6 _i _n (fn_2 $0 (lam _n))": "(fn_2 (fn_2 $0 (lam _n)) (lam (_rconcat _n _i)))"
                },
                {
                    "fn_6 _v _r (fn_2 $0 (lam _n))": "(fn_2 (fn_2 $0 (lam _n)) (lam (_rconcat _r _v)))"
                },
                {
                    "fn_6 #0 _r (fn_2 $0 (lam _v))": "(fn_2 (fn_2 $0 (lam _v)) (lam (_rconcat _r $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_2 #1 (lam (_rconcat #0 $0)))",
            "dreamcoder": "#(lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat $2 $0)))))",
            "arity": 2,
            "name": "fn_7",
            "utility": 203,
            "final_cost": 7850,
            "compression_ratio": 1.021656050955414,
            "cumulative_compression_ratio": 2.0690445859872613,
            "num_uses": 3,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_7 _q $0": "(fn_2 $0 (lam (_rconcat _q $0)))"
                },
                {
                    "fn_7 _n (fn_2 $0 (lam _i))": "(fn_2 (fn_2 $0 (lam _i)) (lam (_rconcat _n $0)))"
                },
                {
                    "fn_7 _r (fn_2 $0 (lam _v))": "(fn_2 (fn_2 $0 (lam _v)) (lam (_rconcat _r $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rsplit _rempty #0)",
            "dreamcoder": "#(lambda (_rsplit _rempty $0))",
            "arity": 1,
            "name": "fn_8",
            "utility": 202,
            "final_cost": 7668,
            "compression_ratio": 1.0237350026082421,
            "cumulative_compression_ratio": 2.1181533646322377,
            "num_uses": 17,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_8 $0": "(_rsplit _rempty $0)"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_1 #1 _e #0)",
            "dreamcoder": "#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e $1)))",
            "arity": 2,
            "name": "fn_9",
            "utility": 202,
            "final_cost": 7486,
            "compression_ratio": 1.024312049158429,
            "cumulative_compression_ratio": 2.1696500133582686,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_9 (_rconcat _rempty _k) $0": "(fn_1 $0 _e (_rconcat _rempty _k))"
                },
                {
                    "fn_9 _e $0": "(fn_1 $0 _e _e)"
                },
                {
                    "fn_9 _k $0": "(fn_1 $0 _e _k)"
                },
                {
                    "fn_9 _k (_rflatten (_rsplit _i $0))": "(fn_1 (_rflatten (_rsplit _i $0)) _e _k)"
                },
                {
                    "fn_9 _k (_rflatten (fn_8 $0))": "(fn_1 (_rflatten (fn_8 $0)) _e _k)"
                },
                {
                    "fn_9 _k (fn_2 $0 (lam $0))": "(fn_1 (fn_2 $0 (lam $0)) _e _k)"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}