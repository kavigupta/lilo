{
    "cmd": "python3 run_iterative_experiment.py --experiment_name test_runs --experiment_type dreamcoder --domain re2 --encoder re2 --iterations 5 --global_batch_sizes 32 --enumeration_timeout 300 --recognition_train_steps 100 --verbose",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "no_curried_metavars": false,
            "no_curried_bodies": false,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "structure_penalty": 1.0,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true,
            "fused_lambda_tags": {
                "tags": null
            }
        }
    },
    "original_cost": 5860,
    "final_cost": 3638,
    "compression_ratio": 1.6107751511819681,
    "num_abstractions": 6,
    "original": [
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _e (cons _e (cons _rempty (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _j (_rsplit _a $0))))",
        "(lam (_rflatten (cons _j (_rsplit _b $0))))",
        "(lam (_rflatten (cons _j (_rsplit _c $0))))",
        "(lam (_rflatten (cons _j (_rsplit _i $0))))",
        "(lam (_rflatten (cons _j (_rsplit _m $0))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat (_rconcat _q $0) _rempty)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (car (map (lam (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lam (_rflatten (map (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1)))) (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _s) _h $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _s $0) _h $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _m $0))))"
    ],
    "rewritten": [
        "(lam (fn_0 $0 _e _e))",
        "(lam (fn_4 (cons _e (cdr (fn_5 $0))) _e))",
        "(lam (fn_4 (cdr (_rsplit _rdot $0)) (_rconcat _e _e)))",
        "(lam (fn_4 (cdr (fn_5 $0)) (_rconcat _e _e)))",
        "(lam (fn_4 (cons _e (cons _rempty (cdr (_rsplit _rdot $0)))) _e))",
        "(lam (fn_4 (_rsplit _a $0) _j))",
        "(lam (fn_4 (_rsplit _b $0) _j))",
        "(lam (fn_4 (_rsplit _c $0) _j))",
        "(lam (fn_4 (fn_3 $0) _j))",
        "(lam (fn_4 (_rsplit _m $0) _j))",
        "(lam (fn_0 $0 _i _w))",
        "(lam (fn_4 (cons _i (cdr (fn_5 $0))) _w))",
        "(lam (fn_4 (cdr (_rsplit _rdot $0)) (_rconcat _w _i)))",
        "(lam (fn_4 (cdr (fn_5 $0)) (_rconcat _w _i)))",
        "(lam (fn_4 (cons _w (cons _i (cdr (_rsplit _rdot $0)))) _rempty))",
        "(lam (fn_1 $0 (lam (_rconcat _q $0))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (fn_5 $0))))",
        "(lam (fn_1 $0 (lam (_rconcat (_rconcat _q $0) _rempty))))",
        "(lam (_rflatten (map (lam (_rconcat _q $0)) (car (map (lam (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lam (fn_1 $0 (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1))))))",
        "(lam (fn_2 (_rappend _o (_rrevcdr (_rsplit _rdot $0))) _g))",
        "(lam (fn_2 (_rappend _o (_rrevcdr (fn_5 $0))) _g))",
        "(lam (fn_2 (_rrevcdr (_rsplit _rdot $0)) (_rconcat _o _g)))",
        "(lam (fn_2 (_rrevcdr (fn_5 $0)) (_rconcat _o _g)))",
        "(lam (fn_2 (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))) _g))",
        "(lam (fn_1 $0 (lam (if (_rmatch $0 _s) _h $0))))",
        "(lam (fn_1 $0 (lam (if (_rmatch _s $0) _h $0))))",
        "(lam (fn_2 (_rsplit _a $0) _u))",
        "(lam (fn_2 (_rsplit _b $0) _u))",
        "(lam (fn_2 (_rsplit _c $0) _u))",
        "(lam (fn_2 (fn_3 $0) _u))",
        "(lam (fn_2 (_rsplit _m $0) _u))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _e _e))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (cons _e (cdr (#(lambda (_rsplit _rempty $0)) $0))) _e))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (cdr (_rsplit _rdot $0)) (_rconcat _e _e)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (cdr (#(lambda (_rsplit _rempty $0)) $0)) (_rconcat _e _e)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (cons _e (cons _rempty (cdr (_rsplit _rdot $0)))) _e))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (_rsplit _a $0) _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (_rsplit _b $0) _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (_rsplit _c $0) _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (#(lambda (_rsplit _i $0)) $0) _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (_rsplit _m $0) _j))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2)))))))) $0 _i _w))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (cons _i (cdr (#(lambda (_rsplit _rempty $0)) $0))) _w))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (cdr (_rsplit _rdot $0)) (_rconcat _w _i)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (cdr (#(lambda (_rsplit _rempty $0)) $0)) (_rconcat _w _i)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 $1)))) (cons _w (cons _i (cdr (_rsplit _rdot $0)))) _rempty))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat _q $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (#(lambda (_rsplit _rempty $0)) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (_rconcat (_rconcat _q $0) _rempty))))",
        "(lambda (_rflatten (map (lambda (_rconcat _q $0)) (car (map (lambda (_rsplit _rdot $1)) (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (car (map (lambda (_rconcat _q $1)) (_rsplit _rdot $1))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rappend _o (_rrevcdr (_rsplit _rdot $0))) _g))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rappend _o (_rrevcdr (#(lambda (_rsplit _rempty $0)) $0))) _g))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rrevcdr (_rsplit _rdot $0)) (_rconcat _o _g)))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rrevcdr (#(lambda (_rsplit _rempty $0)) $0)) (_rconcat _o _g)))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))) _g))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (if (_rmatch $0 _s) _h $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1))))) $0 (lambda (if (_rmatch _s $0) _h $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _a $0) _u))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _b $0) _u))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _c $0) _u))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (#(lambda (_rsplit _i $0)) $0) _u))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _m $0) _u))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (cons #2 (cons #1 (cdr (_rsplit _rdot #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rdot $2))))))))",
            "arity": 3,
            "name": "fn_0",
            "utility": 1010,
            "final_cost": 4850,
            "compression_ratio": 1.2082474226804123,
            "cumulative_compression_ratio": 1.2082474226804123,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 _e _e": "(_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_0 $0 _i _w": "(_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map #1 (_rsplit _rdot #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (map $0 (_rsplit _rdot $1)))))",
            "arity": 2,
            "name": "fn_1",
            "utility": 606,
            "final_cost": 4244,
            "compression_ratio": 1.1427898209236569,
            "cumulative_compression_ratio": 1.3807728557964185,
            "num_uses": 5,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 (lam (_rconcat (_rconcat _q $0) _rempty))": "(_rflatten (map (lam (_rconcat (_rconcat _q $0) _rempty)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_1 $0 (lam (_rconcat _q $0))": "(_rflatten (map (lam (_rconcat _q $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_1 $0 (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1))))": "(_rflatten (map (lam (car (map (lam (_rconcat _q $1)) (_rsplit _rdot $1)))) (_rsplit _rdot $0)))"
                },
                {
                    "fn_1 $0 (lam (if (_rmatch $0 _s) _h $0))": "(_rflatten (map (lam (if (_rmatch $0 _s) _h $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_1 $0 (lam (if (_rmatch _s $0) _h $0))": "(_rflatten (map (lam (if (_rmatch _s $0) _h $0)) (_rsplit _rdot $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 #0))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 $1))))",
            "arity": 2,
            "name": "fn_2",
            "utility": 202,
            "final_cost": 4042,
            "compression_ratio": 1.04997525977239,
            "cumulative_compression_ratio": 1.449777337951509,
            "num_uses": 10,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 (_rrevcdr (_rsplit _rdot $0)) (_rconcat _o _g)": "(_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_2 (_rrevcdr (_rsplit _rempty $0)) (_rconcat _o _g)": "(_rflatten (_rappend (_rconcat _o _g) (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0)))) _g": "(_rflatten (_rappend _g (_rappend _o (_rappend _rempty (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_2 (_rappend _o (_rrevcdr (_rsplit _rdot $0))) _g": "(_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_2 (_rappend _o (_rrevcdr (_rsplit _rempty $0))) _g": "(_rflatten (_rappend _g (_rappend _o (_rrevcdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_2 (_rsplit _a $0) _u": "(_rflatten (_rappend _u (_rsplit _a $0)))"
                },
                {
                    "fn_2 (_rsplit _b $0) _u": "(_rflatten (_rappend _u (_rsplit _b $0)))"
                },
                {
                    "fn_2 (_rsplit _c $0) _u": "(_rflatten (_rappend _u (_rsplit _c $0)))"
                },
                {
                    "fn_2 (_rsplit _i $0) _u": "(_rflatten (_rappend _u (_rsplit _i $0)))"
                },
                {
                    "fn_2 (_rsplit _m $0) _u": "(_rflatten (_rappend _u (_rsplit _m $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rsplit _i #0)",
            "dreamcoder": "#(lambda (_rsplit _i $0))",
            "arity": 1,
            "name": "fn_3",
            "utility": 202,
            "final_cost": 3840,
            "compression_ratio": 1.0526041666666666,
            "cumulative_compression_ratio": 1.5260416666666667,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 $0": "(_rsplit _i $0)"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 #0))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 $1))))",
            "arity": 2,
            "name": "fn_4",
            "utility": 101,
            "final_cost": 3739,
            "compression_ratio": 1.0270125702059374,
            "cumulative_compression_ratio": 1.5672639743246857,
            "num_uses": 13,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 (cdr (_rsplit _rdot $0)) (_rconcat _e _e)": "(_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_4 (cdr (_rsplit _rempty $0)) (_rconcat _e _e)": "(_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_4 (cdr (_rsplit _rdot $0)) (_rconcat _w _i)": "(_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_4 (cdr (_rsplit _rempty $0)) (_rconcat _w _i)": "(_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_4 (cons _e (cdr (_rsplit _rempty $0))) _e": "(_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_4 (cons _e (cons _rempty (cdr (_rsplit _rdot $0)))) _e": "(_rflatten (cons _e (cons _e (cons _rempty (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_4 (_rsplit _a $0) _j": "(_rflatten (cons _j (_rsplit _a $0)))"
                },
                {
                    "fn_4 (_rsplit _b $0) _j": "(_rflatten (cons _j (_rsplit _b $0)))"
                },
                {
                    "fn_4 (_rsplit _c $0) _j": "(_rflatten (cons _j (_rsplit _c $0)))"
                },
                {
                    "fn_4 (_rsplit _m $0) _j": "(_rflatten (cons _j (_rsplit _m $0)))"
                },
                {
                    "fn_4 (fn_3 $0) _j": "(_rflatten (cons _j (fn_3 $0)))"
                },
                {
                    "fn_4 (cons _w (cons _i (cdr (_rsplit _rdot $0)))) _rempty": "(_rflatten (cons _rempty (cons _w (cons _i (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_4 (cons _i (cdr (_rsplit _rempty $0))) _w": "(_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rsplit _rempty #0)",
            "dreamcoder": "#(lambda (_rsplit _rempty $0))",
            "arity": 1,
            "name": "fn_5",
            "utility": 101,
            "final_cost": 3638,
            "compression_ratio": 1.0277625068719076,
            "cumulative_compression_ratio": 1.6107751511819681,
            "num_uses": 7,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 $0": "(_rsplit _rempty $0)"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}