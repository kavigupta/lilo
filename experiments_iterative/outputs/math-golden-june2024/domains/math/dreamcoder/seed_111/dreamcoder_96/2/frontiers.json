{
    "_summary": {
        "n_tasks_solved": {
            "train": 50,
            "test": 0
        }
    },
    "train": {
        "mathEq0: (= (* (2) (x)) (5))=>(= (x) (/ (5) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq0: (= (* (2) (x)) (5))=>(= (x) (/ (5) (2)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_swap $0 mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 $0) mathDomain_4)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 1.0727345943450928
        },
        "mathEq1: (= (* (x) (2)) (5))=>(= (x) (/ (5) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq1: (= (* (x) (2)) (5))=>(= (x) (/ (5) (2)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_2 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div $0 mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div $0 mathDomain_3))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.9984707832336426
        },
        "mathEq2: (= (+ (x) (5)) (5))=>(= (x) (0))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq2: (= (+ (x) (5)) (5))=>(= (x) (0))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (mathDomain_swap $0 mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.9518256187438965
        },
        "mathEq3: (= (+ (5) (x)) (8))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq3: (= (+ (5) (x)) (8))=>(= (x) (3))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 1.4403297901153564
        },
        "mathEq4: (= (* (6) (x)) (* (4) (x)))=>(= (x) (0))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq4: (= (* (6) (x)) (* (4) (x)))=>(= (x) (0))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) $0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) $0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (mathDomain_revdist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_4) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (mathDomain_subzero (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_6) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 33.79745054244995
        },
        "mathEq5: (= (/ (3) (x)) (5))=>(= (x) (/ (3) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq5: (= (/ (3) (x)) (5))=>(= (x) (/ (3) (5)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_mult (mathDomain_swap $0 mathDomain_0) mathDomain_4)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_mult (mathDomain_swap (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_0) mathDomain_4)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_mult (mathDomain_swap (mathDomain_dist $0 mathDomain_3) mathDomain_0) mathDomain_4)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_mult (mathDomain_simplify (mathDomain_swap $0 mathDomain_0) mathDomain_0) mathDomain_4)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_mult (mathDomain_swap (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_3) mathDomain_0) mathDomain_4)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 2.7362661361694336
        },
        "mathEq6: (= (+ (* (3) (x)) (4)) (5))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq6: (= (+ (* (3) (x)) (4)) (5))=>(= (x) (/ (1) (3)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap $0 mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_2)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_3)) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_3)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 51.545469522476196
        },
        "mathEq7: (= (+ (4) (* (3) (x))) (5))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq7: (= (+ (4) (* (3) (x))) (5))=>(= (x) (/ (1) (3)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist $0 mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist $0 mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.312812328338623
        },
        "mathEq8: (= (0) (+ (* (2) (x)) (* (7) (x))))=>(= (x) (0))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq8: (= (0) (+ (* (2) (x)) (* (7) (x))))=>(= (x) (0))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (mathDomain_swap $0 mathDomain_0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (mathDomain_simplify (mathDomain_swap $0 mathDomain_0) mathDomain_2) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (mathDomain_subzero (mathDomain_swap $0 mathDomain_0) mathDomain_3) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (mathDomain_subzero (mathDomain_swap $0 mathDomain_0) mathDomain_6) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 36.399486780166626
        },
        "mathEq9: (= (+ (3) (* (6) (x))) (* (5) (x)))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq9: (= (+ (3) (* (6) (x))) (* (5) (x)))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq10: (= (+ (* (5) (x)) (3)) (* (6) (x)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq10: (= (+ (* (5) (x)) (3)) (* (6) (x)))=>(= (x) (3))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) $0) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_dist (mathDomain_swap (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) $0) mathDomain_0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_dist (mathDomain_swap (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) $0) mathDomain_0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (mathDomain_swap (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) $0) mathDomain_2) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 79.366046667099
        },
        "mathEq11: (= (/ (* (3) (x)) (2)) (9))=>(= (x) (6))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq11: (= (/ (* (3) (x)) (2)) (9))=>(= (x) (6))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_2 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (mathDomain_div (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_3) mathDomain_10)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_3)) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (mathDomain_div (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)) mathDomain_3) mathDomain_10)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (mathDomain_div (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_3) mathDomain_10))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.049699544906616
        },
        "mathEq12: (= (/ (* (5) (x)) (5)) (3))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq12: (= (/ (* (5) (x)) (5)) (3))=>(= (x) (3))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_swap $0 mathDomain_0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_simplify $0 mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (mathDomain_simplify (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 1.109114646911621
        },
        "mathEq13: (= (+ (1) (2)) (* (4) (x)))=>(= (x) (/ (3) (4)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq13: (= (+ (1) (2)) (* (4) (x)))=>(= (x) (/ (3) (4)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_swap $0 mathDomain_0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.570441246032715
        },
        "mathEq14: (= (+ (* (5) (x)) (1)) (+ (* (3) (x)) (3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq14: (= (+ (* (5) (x)) (1)) (+ (* (3) (x)) (3)))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap $0 mathDomain_1)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap (mathDomain_dist $0 mathDomain_2) mathDomain_1)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 223.11535477638245
        },
        "mathEq15: (= (+ (1) (* (5) (x))) (+ (* (3) (x)) (3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq15: (= (+ (1) (* (5) (x))) (+ (* (3) (x)) (3)))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist $0 mathDomain_2)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist $0 mathDomain_1)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0) mathDomain_3) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.688768148422241
        },
        "mathEq16: (= (+ (-1) (* (5) (x))) (+ (* (3) (x)) (3)))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq16: (= (+ (-1) (* (5) (x))) (+ (* (3) (x)) (3)))=>(= (x) (2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_3))) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_3))) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (mathDomain_subzero $0 mathDomain_2) mathDomain_5))) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (mathDomain_subzero (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_2) mathDomain_5))) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (mathDomain_multone (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_2) mathDomain_5))) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 1448.6308052539825
        },
        "mathEq17: (= (+ (1) (* (5) (x))) (+ (3) (* (3) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq17: (= (+ (1) (* (5) (x))) (+ (3) (* (3) (x))))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (mathDomain_swap (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0) mathDomain_4) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap $0 mathDomain_6)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (mathDomain_swap (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0) mathDomain_3) mathDomain_3) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (mathDomain_swap (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0) mathDomain_3)) mathDomain_3) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (mathDomain_revdist (mathDomain_addzero (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0) mathDomain_3) mathDomain_8) mathDomain_6) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 66.85045766830444
        },
        "mathEq18: (= (+ (1) (* (5) (x))) (+ (-3) (* (3) (x))))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq18: (= (+ (1) (* (5) (x))) (+ (-3) (* (3) (x))))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq19: (= (+ (-1) (* (5) (x))) (+ (3) (* (3) (x))))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq19: (= (+ (-1) (* (5) (x))) (+ (3) (* (3) (x))))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq20: (= (+ (-1) (* (5) (x))) (+ (-3) (* (3) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq20: (= (+ (-1) (* (5) (x))) (+ (-3) (* (3) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq21: (= (+ (+ (* (5) (x)) (1)) (3)) (* (3) (x)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq21: (= (+ (+ (* (5) (x)) (1)) (3)) (* (3) (x)))=>(= (x) (-2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) $0)) mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) $0)) mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 904.5980682373047
        },
        "mathEq22: (= (+ (+ (1) (* (5) (x))) (3)) (* (3) (x)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq22: (= (+ (+ (1) (* (5) (x))) (3)) (* (3) (x)))=>(= (x) (-2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)) mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) $0) mathDomain_2))) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 265.7666699886322
        },
        "mathEq23: (= (+ (+ (-1) (* (5) (x))) (3)) (* (3) (x)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq23: (= (+ (+ (-1) (* (5) (x))) (3)) (* (3) (x)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq24: (= (+ (+ (* (5) (x)) (1)) (* (3) (x))) (* (9) (x)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq24: (= (+ (+ (* (5) (x)) (1)) (* (3) (x))) (* (9) (x)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq25: (= (+ (+ (1) (* (5) (x))) (* (3) (x))) (* (9) (x)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq25: (= (+ (+ (1) (* (5) (x))) (* (3) (x))) (* (9) (x)))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_revdist (mathDomain_addzero $0 mathDomain_6) mathDomain_4)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_revdist (mathDomain_addzero (mathDomain_dist $0 mathDomain_2) mathDomain_6) mathDomain_4)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_revdist (mathDomain_subzero (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_3 (mathDomain_dist $0 mathDomain_2)) mathDomain_6) mathDomain_4)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_revdist (mathDomain_addzero (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_3 (mathDomain_dist $0 mathDomain_2)) mathDomain_6) mathDomain_4)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 141.94585180282593
        },
        "mathEq26: (= (+ (+ (x) (* (2) (x))) (5)) (8))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq26: (= (+ (+ (x) (* (2) (x))) (5)) (8))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (mathDomain_subzero (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) $0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (mathDomain_multone (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) $0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_7))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (mathDomain_dist $0 mathDomain_2) mathDomain_7))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (mathDomain_subzero $0 mathDomain_6) mathDomain_9))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 57.414382457733154
        },
        "mathEq27: (= (+ (+ (* (3) (x)) (4)) (7)) (5))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq27: (= (+ (+ (* (3) (x)) (4)) (7)) (5))=>(= (x) (-2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) $0) mathDomain_5))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) $0) mathDomain_5))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) $0)) mathDomain_5))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) $0) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 96.31444478034973
        },
        "mathEq28: (= (+ (+ (4) (* (3) (x))) (7)) (5))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq28: (= (+ (+ (4) (* (3) (x))) (7)) (5))=>(= (x) (-2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_5))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_2) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_5))) mathDomain_5))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_5))) mathDomain_5)) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 57.62282991409302
        },
        "mathEq29: (= (* (/ (4) (x)) (x)) (* (-2) (x)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq29: (= (* (/ (4) (x)) (x)) (* (-2) (x)))=>(= (x) (-2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_swap $0 mathDomain_0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.210424423217773
        },
        "mathEq30: (= (+ (* (/ (4) (x)) (x)) (* (2) (x))) (* (3) (x)))=>(= (x) (4))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq30: (= (+ (* (/ (4) (x)) (x)) (* (2) (x))) (* (3) (x)))=>(= (x) (4))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq31: (= (* (+ (/ (4) (x)) (1)) (x)) (5))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq31: (= (* (+ (/ (4) (x)) (1)) (x)) (5))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq32: (= (+ (/ (4) (x)) (3)) (7))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq32: (= (+ (/ (4) (x)) (3)) (7))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq33: (= (- (-1) (2)) (- (/ (3) (x)) (4)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq33: (= (- (-1) (2)) (- (/ (3) (x)) (4)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq34: (= (- (-1) (2)) (- (+ (/ (3) (x)) (5)) (9)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq34: (= (- (-1) (2)) (- (+ (/ (3) (x)) (5)) (9)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq35: (= (+ (* (2) (x)) (* (5) (x))) (+ (+ (* (-1) (x)) (2)) (6)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq35: (= (+ (* (2) (x)) (* (5) (x))) (+ (+ (* (-1) (x)) (2)) (6)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq36: (= (+ (2) (5)) (+ (+ (-1) (* (2) (x))) (* (6) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq36: (= (+ (2) (5)) (+ (+ (-1) (* (2) (x))) (* (6) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq37: (= (+ (2) (5)) (+ (+ (* (-1) (x)) (* (2) (x))) (* (6) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq37: (= (+ (2) (5)) (+ (+ (* (-1) (x)) (* (2) (x))) (* (6) (x))))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist $0 mathDomain_5))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (mathDomain_dist $0 mathDomain_5))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_3 (mathDomain_dist (mathDomain_swap $0 mathDomain_0) mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_3 (mathDomain_dist (mathDomain_swap (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_0) mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_3 (mathDomain_dist (mathDomain_swap (mathDomain_dist $0 mathDomain_2) mathDomain_0) mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 67.81154918670654
        },
        "mathEq38: (= (+ (* (2) (x)) (5)) (+ (+ (* (-1) (x)) (2)) (6)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq38: (= (+ (* (2) (x)) (5)) (+ (+ (* (-1) (x)) (2)) (6)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq39: (= (+ (+ (-1) (* (4) (x))) (* (2) (x))) (+ (* (-4) (x)) (9)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq39: (= (+ (+ (-1) (* (4) (x))) (* (2) (x))) (+ (* (-4) (x)) (9)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq40: (= (- (* (2) (x)) (* (5) (x))) (- (- (* (2) (x)) (* (1) (x))) (6)))=>(= (x) (/ (3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq40: (= (- (* (2) (x)) (* (5) (x))) (- (- (* (2) (x)) (* (1) (x))) (6)))=>(= (x) (/ (3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq41: (= (- (* (2) (x)) (5)) (- (+ (2) (* (1) (x))) (* (6) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq41: (= (- (* (2) (x)) (5)) (- (+ (2) (* (1) (x))) (* (6) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq42: (= (- (2) (5)) (+ (- (2) (* (1) (x))) (6)))=>(= (x) (1) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq42: (= (- (2) (5)) (+ (- (2) (* (1) (x))) (6)))=>(= (x) (1) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq43: (= (+ (2) (* (5) (x))) (+ (- (2) (* (1) (x))) (6)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq43: (= (+ (2) (* (5) (x))) (+ (- (2) (* (1) (x))) (6)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq44: (= (- (* (2) (x)) (* (5) (x))) (+ (- (2) (* (1) (x))) (6)))=>(= (x) (-4))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq44: (= (- (* (2) (x)) (* (5) (x))) (+ (- (2) (* (1) (x))) (6)))=>(= (x) (-4))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq45: (= (- (* (2) (x)) (5)) (- (- (* (2) (x)) (1)) (* (6) (x))))=>(= (x) (/ (2) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq45: (= (- (* (2) (x)) (5)) (- (- (* (2) (x)) (1)) (* (6) (x))))=>(= (x) (/ (2) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq46: (= (+ (2) (* (5) (x))) (- (- (* (2) (x)) (* (1) (x))) (* (6) (x))))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq46: (= (+ (2) (* (5) (x))) (- (- (* (2) (x)) (* (1) (x))) (* (6) (x))))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq47: (= (- (2) (5)) (+ (- (* (2) (x)) (1)) (* (6) (x))))=>(= (x) (/ (-1) (4)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq47: (= (- (2) (5)) (+ (- (* (2) (x)) (1)) (* (6) (x))))=>(= (x) (/ (-1) (4)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_3) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0))) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_3)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.70089602470398
        },
        "mathEq48: (= (- (* (2) (x)) (* (5) (x))) (+ (+ (2) (* (1) (x))) (* (6) (x))))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq48: (= (- (* (2) (x)) (* (5) (x))) (+ (+ (2) (* (1) (x))) (* (6) (x))))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq49: (= (- (- (4) (* (1) (x))) (* (2) (x))) (+ (+ (* (-6) (x)) (2)) (* (1) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq49: (= (- (- (4) (* (1) (x))) (* (2) (x))) (+ (+ (* (-6) (x)) (2)) (* (1) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq50: (= (+ (- (* (4) (x)) (1)) (2)) (- (- (* (-6) (x)) (2)) (1)))=>(= (x) (/ (-2) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq50: (= (+ (- (* (4) (x)) (1)) (2)) (- (- (* (-6) (x)) (2)) (1)))=>(= (x) (/ (-2) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq51: (= (- (- (* (4) (x)) (* (1) (x))) (* (2) (x))) (+ (- (* (-6) (x)) (2)) (* (1) (x))))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq51: (= (- (- (* (4) (x)) (* (1) (x))) (* (2) (x))) (+ (- (* (-6) (x)) (2)) (* (1) (x))))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq52: (= (- (+ (4) (* (1) (x))) (2)) (- (- (-6) (* (2) (x))) (* (1) (x))))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq52: (= (- (+ (4) (* (1) (x))) (2)) (- (- (-6) (* (2) (x))) (* (1) (x))))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq53: (= (- (+ (4) (* (1) (x))) (* (2) (x))) (+ (+ (-6) (2)) (1)))=>(= (x) (7))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq53: (= (- (+ (4) (* (1) (x))) (* (2) (x))) (+ (+ (-6) (2)) (1)))=>(= (x) (7))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq54: (= (- (- (4) (* (1) (x))) (* (2) (x))) (+ (+ (-6) (* (2) (x))) (* (1) (x))))=>(= (x) (/ (5) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq54: (= (- (- (4) (* (1) (x))) (* (2) (x))) (+ (+ (-6) (* (2) (x))) (* (1) (x))))=>(= (x) (/ (5) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq55: (= (- (+ (4) (* (1) (x))) (* (2) (x))) (+ (+ (-6) (2)) (* (1) (x))))=>(= (x) (4))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq55: (= (- (+ (4) (* (1) (x))) (* (2) (x))) (+ (+ (-6) (2)) (* (1) (x))))=>(= (x) (4))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq56: (= (+ (+ (4) (1)) (2)) (- (- (-6) (* (2) (x))) (* (1) (x))))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq56: (= (+ (+ (4) (1)) (2)) (- (- (-6) (* (2) (x))) (* (1) (x))))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq57: (= (- (+ (* (4) (x)) (1)) (* (2) (x))) (- (- (* (-6) (x)) (2)) (* (1) (x))))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq57: (= (- (+ (* (4) (x)) (1)) (* (2) (x))) (- (- (* (-6) (x)) (2)) (* (1) (x))))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq58: (= (+ (- (* (4) (x)) (1)) (2)) (- (- (* (-6) (x)) (* (2) (x))) (1)))=>(= (x) (/ (-1) (6)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq58: (= (+ (- (* (4) (x)) (1)) (2)) (- (- (* (-6) (x)) (* (2) (x))) (1)))=>(= (x) (/ (-1) (6)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq59: (= (+ (+ (* (4) (x)) (* (1) (x))) (* (2) (x))) (- (- (* (-6) (x)) (2)) (* (1) (x))))=>(= (x) (/ (-1) (7)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq59: (= (+ (+ (* (4) (x)) (* (1) (x))) (* (2) (x))) (- (- (* (-6) (x)) (2)) (* (1) (x))))=>(= (x) (/ (-1) (7)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq60: (= (+ (+ (* (4) (x)) (1)) (2)) (+ (- (-6) (2)) (* (1) (x))))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq60: (= (+ (+ (* (4) (x)) (1)) (2)) (+ (- (-6) (2)) (* (1) (x))))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq61: (= (5) (* (2) (x)))=>(= (x) (/ (5) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq61: (= (5) (* (2) (x)))=>(= (x) (/ (5) (2)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (mathDomain_swap $0 mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (mathDomain_swap (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) $0) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (mathDomain_swap (mathDomain_revdist $0 mathDomain_4) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (mathDomain_swap (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_2)) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 1.3998823165893555
        },
        "mathEq62: (= (5) (* (x) (2)))=>(= (x) (/ (5) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq62: (= (5) (* (x) (2)))=>(= (x) (/ (5) (2)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (mathDomain_swap (mathDomain_swap $0 mathDomain_2) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 1.040764331817627
        },
        "mathEq63: (= (5) (+ (x) (5)))=>(= (x) (0))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq63: (= (5) (+ (x) (5)))=>(= (x) (0))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (mathDomain_swap $0 mathDomain_0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist $0 mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 1.6490912437438965
        },
        "mathEq64: (= (8) (+ (5) (x)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq64: (= (8) (+ (5) (x)))=>(= (x) (3))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (mathDomain_simplify (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (mathDomain_simplify (mathDomain_swap $0 mathDomain_0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 42.753631830215454
        },
        "mathEq65: (= (* (4) (x)) (* (6) (x)))=>(= (x) (0))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq65: (= (* (4) (x)) (* (6) (x)))=>(= (x) (0))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) $0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) $0) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (mathDomain_subzero (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_3) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (mathDomain_subzero (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_6) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 34.807985067367554
        },
        "mathEq66: (= (5) (/ (3) (x)))=>(= (x) (/ (3) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq66: (= (5) (/ (3) (x)))=>(= (x) (/ (3) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq67: (= (5) (+ (* (3) (x)) (4)))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq67: (= (5) (+ (* (3) (x)) (4)))=>(= (x) (/ (1) (3)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (mathDomain_swap $0 mathDomain_0) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_5))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_5))) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (mathDomain_lrotate (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_2) mathDomain_5))) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.78374671936035
        },
        "mathEq68: (= (5) (+ (4) (* (3) (x))))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq68: (= (5) (+ (4) (* (3) (x))))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq69: (= (+ (* (2) (x)) (* (7) (x))) (0))=>(= (x) (0))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq69: (= (+ (* (2) (x)) (* (7) (x))) (0))=>(= (x) (0))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist $0 mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist $0 mathDomain_1))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (mathDomain_dist $0 mathDomain_1) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)) mathDomain_1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_dist (mathDomain_swap $0 mathDomain_2) mathDomain_1))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 2.9116132259368896
        },
        "mathEq70: (= (* (5) (x)) (+ (3) (* (6) (x))))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq70: (= (* (5) (x)) (+ (3) (* (6) (x))))=>(= (x) (-3))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_5))) mathDomain_5))) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 1710.8691754341125
        },
        "mathEq71: (= (* (6) (x)) (+ (* (5) (x)) (3)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq71: (= (* (6) (x)) (+ (* (5) (x)) (3)))=>(= (x) (3))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0)) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (mathDomain_simplify (mathDomain_swap $0 mathDomain_0) mathDomain_1)) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (mathDomain_simplify (mathDomain_swap $0 mathDomain_0) mathDomain_0)) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (mathDomain_simplify (mathDomain_swap $0 mathDomain_0) mathDomain_4)) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 57.181151151657104
        },
        "mathEq72: (= (9) (/ (* (3) (x)) (2)))=>(= (x) (6))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq72: (= (9) (/ (* (3) (x)) (2)))=>(= (x) (6))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (mathDomain_div (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_3) mathDomain_10)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (mathDomain_div (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_3) mathDomain_10)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (mathDomain_div (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0)) mathDomain_3) mathDomain_10)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (mathDomain_div (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_subzero (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_3)) mathDomain_3) mathDomain_10)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (mathDomain_div (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_subzero (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_6)) mathDomain_3) mathDomain_10)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 34.382550954818726
        },
        "mathEq73: (= (3) (/ (* (5) (x)) (5)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq73: (= (3) (/ (* (5) (x)) (5)))=>(= (x) (3))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist $0 mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 1.4375271797180176
        },
        "mathEq74: (= (* (4) (x)) (+ (1) (2)))=>(= (x) (/ (3) (4)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq74: (= (* (4) (x)) (+ (1) (2)))=>(= (x) (/ (3) (4)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_div $0 mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_swap $0 mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 1.534409999847412
        },
        "mathEq75: (= (+ (* (3) (x)) (3)) (+ (* (5) (x)) (1)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq75: (= (+ (* (3) (x)) (3)) (+ (* (5) (x)) (1)))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap $0 mathDomain_1)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap (mathDomain_swap $0 mathDomain_0) mathDomain_1)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap (mathDomain_dist $0 mathDomain_2) mathDomain_1)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_simplify (mathDomain_swap $0 mathDomain_1) mathDomain_1)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap (mathDomain_swap $0 mathDomain_6) mathDomain_0)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 76.61325573921204
        },
        "mathEq76: (= (+ (* (3) (x)) (3)) (+ (1) (* (5) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq76: (= (+ (* (3) (x)) (3)) (+ (1) (* (5) (x))))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap $0 mathDomain_0)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist $0 mathDomain_2))) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist $0 mathDomain_1))) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap (mathDomain_dist $0 mathDomain_2) mathDomain_0)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 59.16089177131653
        },
        "mathEq77: (= (+ (* (3) (x)) (3)) (+ (-1) (* (5) (x))))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq77: (= (+ (* (3) (x)) (3)) (+ (-1) (* (5) (x))))=>(= (x) (2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_3))) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 157.3761546611786
        },
        "mathEq78: (= (+ (3) (* (3) (x))) (+ (1) (* (5) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq78: (= (+ (3) (* (3) (x))) (+ (1) (* (5) (x))))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (mathDomain_swap (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0) mathDomain_4) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_swap $0 mathDomain_6)) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (mathDomain_swap (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0) mathDomain_3) mathDomain_3) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (mathDomain_swap (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0) mathDomain_3)) mathDomain_3) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_rrotate (mathDomain_revdist (mathDomain_addzero (mathDomain_rrotate (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) $0) mathDomain_3) mathDomain_8) mathDomain_6) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 65.88227105140686
        },
        "mathEq79: (= (+ (-3) (* (3) (x))) (+ (1) (* (5) (x))))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq79: (= (+ (-3) (* (3) (x))) (+ (1) (* (5) (x))))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq80: (= (+ (3) (* (3) (x))) (+ (-1) (* (5) (x))))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq80: (= (+ (3) (* (3) (x))) (+ (-1) (* (5) (x))))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq81: (= (+ (-3) (* (3) (x))) (+ (-1) (* (5) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq81: (= (+ (-3) (* (3) (x))) (+ (-1) (* (5) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq82: (= (* (3) (x)) (+ (+ (* (5) (x)) (1)) (3)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq82: (= (* (3) (x)) (+ (+ (* (5) (x)) (1)) (3)))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq83: (= (* (3) (x)) (+ (+ (1) (* (5) (x))) (3)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq83: (= (* (3) (x)) (+ (+ (1) (* (5) (x))) (3)))=>(= (x) (-2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2))) (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0)) mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 240.98593521118164
        },
        "mathEq84: (= (* (3) (x)) (+ (+ (-1) (* (5) (x))) (3)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq84: (= (* (3) (x)) (+ (+ (-1) (* (5) (x))) (3)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq85: (= (* (9) (x)) (+ (+ (* (5) (x)) (1)) (* (3) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq85: (= (* (9) (x)) (+ (+ (* (5) (x)) (1)) (* (3) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq86: (= (* (9) (x)) (+ (+ (1) (* (5) (x))) (* (3) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq86: (= (* (9) (x)) (+ (+ (1) (* (5) (x))) (* (3) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq87: (= (8) (+ (+ (x) (* (2) (x))) (5)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq87: (= (8) (+ (+ (x) (* (2) (x))) (5)))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (mathDomain_swap $0 mathDomain_0) mathDomain_7))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 286.2710301876068
        },
        "mathEq88: (= (5) (+ (+ (* (3) (x)) (4)) (7)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq88: (= (5) (+ (+ (* (3) (x)) (4)) (7)))=>(= (x) (-2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_swap $0 mathDomain_3)) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_2))) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_0))) mathDomain_5))) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (mathDomain_swap $0 mathDomain_0) mathDomain_2))) mathDomain_5))) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_lrotate (mathDomain_swap $0 mathDomain_0) mathDomain_6))) mathDomain_5))) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 56.33450412750244
        },
        "mathEq89: (= (5) (+ (+ (4) (* (3) (x))) (7)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq89: (= (5) (+ (+ (4) (* (3) (x))) (7)))=>(= (x) (-2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) $0) mathDomain_5))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) $0)) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist $0 mathDomain_2)) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_0 (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub (#(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_swap $0 mathDomain_0))) (mathDomain_dist $0 mathDomain_1)) mathDomain_5)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.597621202468872
        },
        "mathEq90: (= (* (-2) (x)) (* (/ (4) (x)) (x)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq90: (= (* (-2) (x)) (* (/ (4) (x)) (x)))=>(= (x) (-2))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_swap $0 mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_dist $0 mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (mathDomain_rrotate $0 mathDomain_4))) (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 2.51102876663208
        },
        "mathEq91: (= (* (3) (x)) (+ (* (/ (4) (x)) (x)) (* (2) (x))))=>(= (x) (4))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq91: (= (* (3) (x)) (+ (* (/ (4) (x)) (x)) (* (2) (x))))=>(= (x) (4))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq92: (= (5) (* (+ (/ (4) (x)) (1)) (x)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq92: (= (5) (* (+ (/ (4) (x)) (1)) (x)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq93: (= (7) (+ (/ (4) (x)) (3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq93: (= (7) (+ (/ (4) (x)) (3)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq94: (= (- (/ (3) (x)) (4)) (- (-1) (2)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq94: (= (- (/ (3) (x)) (4)) (- (-1) (2)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq95: (= (- (+ (/ (3) (x)) (5)) (9)) (- (-1) (2)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq95: (= (- (+ (/ (3) (x)) (5)) (9)) (- (-1) (2)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq96: (= (+ (+ (* (-1) (x)) (2)) (6)) (+ (* (2) (x)) (* (5) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq96: (= (+ (+ (* (-1) (x)) (2)) (6)) (+ (* (2) (x)) (* (5) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq97: (= (+ (+ (-1) (* (2) (x))) (* (6) (x))) (+ (2) (5)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq97: (= (+ (+ (-1) (* (2) (x))) (* (6) (x))) (+ (2) (5)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq98: (= (+ (+ (* (-1) (x)) (* (2) (x))) (* (6) (x))) (+ (2) (5)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq98: (= (+ (+ (* (-1) (x)) (* (2) (x))) (* (6) (x))) (+ (2) (5)))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_3 (mathDomain_dist $0 mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_4 (mathDomain_dist $0 mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_5 (mathDomain_dist $0 mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_8 (mathDomain_dist $0 mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_6 (mathDomain_dist $0 mathDomain_2))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.462276935577393
        },
        "mathEq99: (= (+ (+ (* (-1) (x)) (2)) (6)) (+ (* (2) (x)) (5)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq99: (= (+ (+ (* (-1) (x)) (2)) (6)) (+ (* (2) (x)) (5)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq100: (= (+ (* (-4) (x)) (9)) (+ (+ (-1) (* (4) (x))) (* (2) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq100: (= (+ (* (-4) (x)) (9)) (+ (+ (-1) (* (4) (x))) (* (2) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq101: (= (- (- (* (2) (x)) (* (1) (x))) (6)) (- (* (2) (x)) (* (5) (x))))=>(= (x) (/ (3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq101: (= (- (- (* (2) (x)) (* (1) (x))) (6)) (- (* (2) (x)) (* (5) (x))))=>(= (x) (/ (3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq102: (= (- (+ (2) (* (1) (x))) (* (6) (x))) (- (* (2) (x)) (5)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq102: (= (- (+ (2) (* (1) (x))) (* (6) (x))) (- (* (2) (x)) (5)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq103: (= (+ (- (2) (* (1) (x))) (6)) (- (2) (5)))=>(= (x) (1) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq103: (= (+ (- (2) (* (1) (x))) (6)) (- (2) (5)))=>(= (x) (1) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq104: (= (+ (- (2) (* (1) (x))) (6)) (+ (2) (* (5) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq104: (= (+ (- (2) (* (1) (x))) (6)) (+ (2) (* (5) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq105: (= (+ (- (2) (* (1) (x))) (6)) (- (* (2) (x)) (* (5) (x))))=>(= (x) (-4))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq105: (= (+ (- (2) (* (1) (x))) (6)) (- (* (2) (x)) (* (5) (x))))=>(= (x) (-4))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq106: (= (- (- (* (2) (x)) (1)) (* (6) (x))) (- (* (2) (x)) (5)))=>(= (x) (/ (2) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq106: (= (- (- (* (2) (x)) (1)) (* (6) (x))) (- (* (2) (x)) (5)))=>(= (x) (/ (2) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq107: (= (- (- (* (2) (x)) (* (1) (x))) (* (6) (x))) (+ (2) (* (5) (x))))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq107: (= (- (- (* (2) (x)) (* (1) (x))) (* (6) (x))) (+ (2) (* (5) (x))))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq108: (= (+ (- (* (2) (x)) (1)) (* (6) (x))) (- (2) (5)))=>(= (x) (/ (-1) (4)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq108: (= (+ (- (* (2) (x)) (1)) (* (6) (x))) (- (2) (5)))=>(= (x) (/ (-1) (4)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_div (mathDomain_swap $0 $1) mathDomain_3)))) mathDomain_1 (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) (mathDomain_sub $0 mathDomain_2)))) (mathDomain_dist (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_swap $0 mathDomain_2))) $0) mathDomain_3)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 829.0892641544342
        },
        "mathEq109: (= (+ (+ (2) (* (1) (x))) (* (6) (x))) (- (* (2) (x)) (* (5) (x))))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq109: (= (+ (+ (2) (* (1) (x))) (* (6) (x))) (- (* (2) (x)) (* (5) (x))))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq110: (= (+ (+ (* (-6) (x)) (2)) (* (1) (x))) (- (- (4) (* (1) (x))) (* (2) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq110: (= (+ (+ (* (-6) (x)) (2)) (* (1) (x))) (- (- (4) (* (1) (x))) (* (2) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq111: (= (- (- (* (-6) (x)) (2)) (1)) (+ (- (* (4) (x)) (1)) (2)))=>(= (x) (/ (-2) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq111: (= (- (- (* (-6) (x)) (2)) (1)) (+ (- (* (4) (x)) (1)) (2)))=>(= (x) (/ (-2) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq112: (= (+ (- (* (-6) (x)) (2)) (* (1) (x))) (- (- (* (4) (x)) (* (1) (x))) (* (2) (x))))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq112: (= (+ (- (* (-6) (x)) (2)) (* (1) (x))) (- (- (* (4) (x)) (* (1) (x))) (* (2) (x))))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq113: (= (- (- (-6) (* (2) (x))) (* (1) (x))) (- (+ (4) (* (1) (x))) (2)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq113: (= (- (- (-6) (* (2) (x))) (* (1) (x))) (- (+ (4) (* (1) (x))) (2)))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq114: (= (+ (+ (-6) (2)) (1)) (- (+ (4) (* (1) (x))) (* (2) (x))))=>(= (x) (7))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq114: (= (+ (+ (-6) (2)) (1)) (- (+ (4) (* (1) (x))) (* (2) (x))))=>(= (x) (7))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq115: (= (+ (+ (-6) (* (2) (x))) (* (1) (x))) (- (- (4) (* (1) (x))) (* (2) (x))))=>(= (x) (/ (5) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq115: (= (+ (+ (-6) (* (2) (x))) (* (1) (x))) (- (- (4) (* (1) (x))) (* (2) (x))))=>(= (x) (/ (5) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq116: (= (+ (+ (-6) (2)) (* (1) (x))) (- (+ (4) (* (1) (x))) (* (2) (x))))=>(= (x) (4))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq116: (= (+ (+ (-6) (2)) (* (1) (x))) (- (+ (4) (* (1) (x))) (* (2) (x))))=>(= (x) (4))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq117: (= (- (- (-6) (* (2) (x))) (* (1) (x))) (+ (+ (4) (1)) (2)))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq117: (= (- (- (-6) (* (2) (x))) (* (1) (x))) (+ (+ (4) (1)) (2)))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq118: (= (- (- (* (-6) (x)) (2)) (* (1) (x))) (- (+ (* (4) (x)) (1)) (* (2) (x))))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq118: (= (- (- (* (-6) (x)) (2)) (* (1) (x))) (- (+ (* (4) (x)) (1)) (* (2) (x))))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq119: (= (- (- (* (-6) (x)) (* (2) (x))) (1)) (+ (- (* (4) (x)) (1)) (2)))=>(= (x) (/ (-1) (6)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq119: (= (- (- (* (-6) (x)) (* (2) (x))) (1)) (+ (- (* (4) (x)) (1)) (2)))=>(= (x) (/ (-1) (6)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq120: (= (- (- (* (-6) (x)) (2)) (* (1) (x))) (+ (+ (* (4) (x)) (* (1) (x))) (* (2) (x))))=>(= (x) (/ (-1) (7)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq120: (= (- (- (* (-6) (x)) (2)) (* (1) (x))) (+ (+ (* (4) (x)) (* (1) (x))) (* (2) (x))))=>(= (x) (/ (-1) (7)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq121: (= (+ (- (-6) (2)) (* (1) (x))) (+ (+ (* (4) (x)) (1)) (2)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq121: (= (+ (- (-6) (2)) (* (1) (x))) (+ (+ (* (4) (x)) (1)) (2)))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq122: (= (+ (x) (* (3) (x))) (4))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq122: (= (+ (x) (* (3) (x))) (4))=>(= (x) (1))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4)) mathDomain_6) mathDomain_4))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_sub $0 mathDomain_4)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_revdist (mathDomain_subzero $0 mathDomain_6) mathDomain_4))) (mathDomain_subzero (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) $0) mathDomain_6)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (mathDomain_simplify (mathDomain_revdist (mathDomain_subzero (#(lambda (#(lambda (mathDomain_simplify (mathDomain_rrotate $0 mathDomain_1) mathDomain_0)) (mathDomain_sub $0 mathDomain_4))) $0) mathDomain_6) mathDomain_4) mathDomain_0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.212322950363159
        }
    },
    "test": {
        "mathEq0: (= (/ (1) (2)) (x))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq0: (= (/ (1) (2)) (x))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq1: (= (* (/ (-1) (x)) (x)) (* (-2) (x)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq1: (= (* (/ (-1) (x)) (x)) (* (-2) (x)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq2: (= (+ (-1) (* (2) (x))) (+ (* (3) (x)) (-4)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq2: (= (+ (-1) (* (2) (x))) (+ (* (3) (x)) (-4)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq3: (= (+ (* (-1) (x)) (-2)) (+ (* (-3) (x)) (-4)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq3: (= (+ (* (-1) (x)) (-2)) (+ (* (-3) (x)) (-4)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq4: (= (+ (* (-1) (x)) (2)) (+ (* (-3) (x)) (4)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq4: (= (+ (* (-1) (x)) (2)) (+ (* (-3) (x)) (4)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq5: (= (- (* (1) (x)) (2)) (* (-3) (x)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq5: (= (- (* (1) (x)) (2)) (* (-3) (x)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq6: (= (* (1) (x)) (+ (+ (-2) (* (3) (x))) (4)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq6: (= (* (1) (x)) (+ (+ (-2) (* (3) (x))) (4)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq7: (= (-1) (+ (-2) (/ (-3) (x))))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq7: (= (-1) (+ (-2) (/ (-3) (x))))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq8: (= (* (- (-1) (/ (2) (x))) (x)) (* (-3) (x)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq8: (= (* (- (-1) (/ (2) (x))) (x)) (* (-3) (x)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq9: (= (/ (* (-1) (x)) (x)) (* (-2) (x)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq9: (= (/ (* (-1) (x)) (x)) (* (-2) (x)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq10: (= (+ (* (-1) (x)) (-2)) (+ (-3) (* (-4) (x))))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq10: (= (+ (* (-1) (x)) (-2)) (+ (-3) (* (-4) (x))))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq11: (= (+ (- (* (-1) (x)) (2)) (* (3) (x))) (+ (* (4) (x)) (* (5) (x))))=>(= (x) (/ (-2) (7)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq11: (= (+ (- (* (-1) (x)) (2)) (* (3) (x))) (+ (* (4) (x)) (* (5) (x))))=>(= (x) (/ (-2) (7)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq12: (= (+ (* (1) (x)) (-2)) (+ (-3) (* (4) (x))))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq12: (= (+ (* (1) (x)) (-2)) (+ (-3) (* (4) (x))))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq13: (= (- (- (x) (1)) (* (2) (x))) (* (3) (x)))=>(= (x) (/ (-1) (4)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq13: (= (- (- (x) (1)) (* (2) (x))) (* (3) (x)))=>(= (x) (/ (-1) (4)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq14: (= (- (* (1) (x)) (* (2) (x))) (- (- (- (3) (* (4) (x))) (5)) (* (6) (x))))=>(= (x) (/ (-2) (9)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq14: (= (- (* (1) (x)) (* (2) (x))) (- (- (- (3) (* (4) (x))) (5)) (* (6) (x))))=>(= (x) (/ (-2) (9)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq15: (= (+ (/ (1) (x)) (2)) (-3))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq15: (= (+ (/ (1) (x)) (2)) (-3))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq16: (= (-1) (+ (/ (2) (x)) (3)))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq16: (= (-1) (+ (/ (2) (x)) (3)))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq17: (= (+ (* (1) (x)) (-2)) (+ (* (-3) (x)) (4)))=>(= (x) (/ (3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq17: (= (+ (* (1) (x)) (-2)) (+ (* (-3) (x)) (4)))=>(= (x) (/ (3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq18: (= (- (+ (* (-1) (x)) (2)) (3)) (* (-4) (x)))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq18: (= (- (+ (* (-1) (x)) (2)) (3)) (* (-4) (x)))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq19: (= (-1) (+ (2) (* (3) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq19: (= (-1) (+ (2) (* (3) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq20: (= (+ (* (1) (x)) (-2)) (+ (3) (* (-4) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq20: (= (+ (* (1) (x)) (-2)) (+ (3) (* (-4) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq21: (= (/ (-1) (2)) (x))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq21: (= (/ (-1) (2)) (x))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq22: (= (/ (-1) (x)) (-2))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq22: (= (/ (-1) (x)) (-2))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq23: (= (- (* (1) (x)) (2)) (- (-3) (* (4) (x))))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq23: (= (- (* (1) (x)) (2)) (- (-3) (* (4) (x))))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq24: (= (* (-1) (x)) (+ (* (2) (x)) (3)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq24: (= (* (-1) (x)) (+ (* (2) (x)) (3)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq25: (= (+ (1) (* (-2) (x))) (+ (* (-3) (x)) (-4)))=>(= (x) (-5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq25: (= (+ (1) (* (-2) (x))) (+ (* (-3) (x)) (-4)))=>(= (x) (-5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq26: (= (+ (1) (* (-2) (x))) (+ (-3) (* (-4) (x))))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq26: (= (+ (1) (* (-2) (x))) (+ (-3) (* (-4) (x))))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq27: (= (+ (-1) (/ (2) (x))) (3))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq27: (= (+ (-1) (/ (2) (x))) (3))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq28: (= (+ (* (-1) (x)) (* (2) (x))) (-3))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq28: (= (+ (* (-1) (x)) (* (2) (x))) (-3))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq29: (= (- (1) (-2)) (- (+ (/ (3) (x)) (-4)) (-5)))=>(= (x) (/ (3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq29: (= (- (1) (-2)) (- (+ (/ (3) (x)) (-4)) (-5)))=>(= (x) (/ (3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq30: (= (/ (1) (x)) (2))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq30: (= (/ (1) (x)) (2))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq31: (= (+ (-1) (* (-2) (x))) (+ (* (-3) (x)) (-4)))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq31: (= (+ (-1) (* (-2) (x))) (+ (* (-3) (x)) (-4)))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq32: (= (- (+ (* (-1) (x)) (2)) (* (3) (x))) (4))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq32: (= (- (+ (* (-1) (x)) (2)) (* (3) (x))) (4))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq33: (= (1) (+ (-2) (* (-3) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq33: (= (1) (+ (-2) (* (-3) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq34: (= (- (-1) (* (2) (x))) (- (* (3) (x)) (4)))=>(= (x) (/ (3) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq34: (= (- (-1) (* (2) (x))) (- (* (3) (x)) (4)))=>(= (x) (/ (3) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq35: (= (+ (- (* (1) (x)) (2)) (3)) (+ (- (* (4) (x)) (5)) (6)))=>(= (x) (0))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq35: (= (+ (- (* (1) (x)) (2)) (3)) (+ (- (* (4) (x)) (5)) (6)))=>(= (x) (0))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq36: (= (1) (- (- (2) (* (3) (x))) (* (4) (x))))=>(= (x) (/ (1) (7)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq36: (= (1) (- (- (2) (* (3) (x))) (* (4) (x))))=>(= (x) (/ (1) (7)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq37: (= (* (+ (1) (2)) (x)) (3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq37: (= (* (+ (1) (2)) (x)) (3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq38: (= (1) (+ (2) (/ (3) (x))))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq38: (= (1) (+ (2) (/ (3) (x))))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq39: (= (x) (+ (* (-1) (x)) (2)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq39: (= (x) (+ (* (-1) (x)) (2)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq40: (= (1) (+ (* (2) (x)) (3)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq40: (= (1) (+ (* (2) (x)) (3)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq41: (= (+ (1) (* (2) (x))) (+ (* (3) (x)) (4)))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq41: (= (+ (1) (* (2) (x))) (+ (* (3) (x)) (4)))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq42: (= (1) (+ (/ (-2) (x)) (-3)))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq42: (= (1) (+ (/ (-2) (x)) (-3)))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq43: (= (+ (-1) (* (-2) (x))) (-3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq43: (= (+ (-1) (* (-2) (x))) (-3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq44: (= (+ (-1) (* (2) (x))) (+ (* (-3) (x)) (-4)))=>(= (x) (/ (-3) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq44: (= (+ (-1) (* (2) (x))) (+ (* (-3) (x)) (-4)))=>(= (x) (/ (-3) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq45: (= (- (* (1) (x)) (* (-2) (x))) (3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq45: (= (- (* (1) (x)) (* (-2) (x))) (3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq46: (= (+ (-1) (* (2) (x))) (- (* (3) (x)) (4)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq46: (= (+ (-1) (* (2) (x))) (- (* (3) (x)) (4)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq47: (= (/ (1) (x)) (+ (2) (3)))=>(= (x) (/ (1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq47: (= (/ (1) (x)) (+ (2) (3)))=>(= (x) (/ (1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq48: (= (+ (* (-1) (x)) (2)) (+ (* (3) (x)) (-4)))=>(= (x) (/ (3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq48: (= (+ (* (-1) (x)) (2)) (+ (* (3) (x)) (-4)))=>(= (x) (/ (3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq49: (= (+ (* (-1) (x)) (* (2) (x))) (+ (-3) (4)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq49: (= (+ (* (-1) (x)) (* (2) (x))) (+ (-3) (4)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq50: (= (* (1) (x)) (+ (2) (3)))=>(= (x) (5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq50: (= (* (1) (x)) (+ (2) (3)))=>(= (x) (5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq51: (= (- (-1) (* (2) (x))) (- (3) (* (4) (x))))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq51: (= (- (-1) (* (2) (x))) (- (3) (* (4) (x))))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq52: (= (/ (1) (2)) (/ (+ (-3) (* (4) (x))) (5)))=>(= (x) (/ (1) (1) (8)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq52: (= (/ (1) (2)) (/ (+ (-3) (* (4) (x))) (5)))=>(= (x) (/ (1) (1) (8)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq53: (= (1) (* (-2) (x)))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq53: (= (1) (* (-2) (x)))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq54: (= (+ (-1) (* (-2) (x))) (+ (-3) (* (-4) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq54: (= (+ (-1) (* (-2) (x))) (+ (-3) (* (-4) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq55: (= (* (-1) (x)) (-2))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq55: (= (* (-1) (x)) (-2))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq56: (= (+ (-1) (* (-2) (x))) (+ (3) (* (-4) (x))))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq56: (= (+ (-1) (* (-2) (x))) (+ (3) (* (-4) (x))))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq57: (= (+ (/ (-1) (x)) (-2)) (3))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq57: (= (+ (/ (-1) (x)) (-2)) (3))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq58: (= (1) (+ (-2) (/ (3) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq58: (= (1) (+ (-2) (/ (3) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq59: (= (+ (/ (-1) (x)) (2)) (3))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq59: (= (+ (/ (-1) (x)) (2)) (3))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq60: (= (+ (* (1) (x)) (2)) (- (3) (* (4) (x))))=>(= (x) (/ (1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq60: (= (+ (* (1) (x)) (2)) (- (3) (* (4) (x))))=>(= (x) (/ (1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq61: (= (+ (1) (* (-2) (x))) (3))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq61: (= (+ (1) (* (-2) (x))) (3))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq62: (= (+ (+ (-1) (* (2) (x))) (* (3) (x))) (+ (+ (* (-4) (x)) (-5)) (* (6) (x))))=>(= (x) (/ (-4) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq62: (= (+ (+ (-1) (* (2) (x))) (* (3) (x))) (+ (+ (* (-4) (x)) (-5)) (* (6) (x))))=>(= (x) (/ (-4) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq63: (= (* (1) (x)) (+ (* (2) (x)) (3)))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq63: (= (* (1) (x)) (+ (* (2) (x)) (3)))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq64: (= (+ (- (* (-1) (x)) (2)) (3)) (* (4) (x)))=>(= (x) (/ (1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq64: (= (+ (- (* (-1) (x)) (2)) (3)) (* (4) (x)))=>(= (x) (/ (1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq65: (= (/ (- (1) (2)) (3)) (x))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq65: (= (/ (- (1) (2)) (3)) (x))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq66: (= (-1) (+ (2) (/ (-3) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq66: (= (-1) (+ (2) (/ (-3) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq67: (= (* (-1) (x)) (* (-2) (x)))=>(= (x) (0))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq67: (= (* (-1) (x)) (* (-2) (x)))=>(= (x) (0))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq68: (= (+ (* (1) (x)) (-2)) (+ (* (-3) (x)) (-4)))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq68: (= (+ (* (1) (x)) (-2)) (+ (* (-3) (x)) (-4)))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq69: (= (+ (* (-1) (x)) (-2)) (-3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq69: (= (+ (* (-1) (x)) (-2)) (-3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq70: (= (- (* (-1) (x)) (2)) (+ (3) (* (4) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq70: (= (- (* (-1) (x)) (2)) (+ (3) (* (4) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq71: (= (+ (* (-1) (x)) (2)) (-3))=>(= (x) (5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq71: (= (+ (* (-1) (x)) (2)) (-3))=>(= (x) (5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq72: (= (+ (-1) (* (2) (x))) (3))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq72: (= (+ (-1) (* (2) (x))) (3))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq73: (= (+ (* (-1) (x)) (-2)) (+ (-3) (* (4) (x))))=>(= (x) (/ (1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq73: (= (+ (* (-1) (x)) (-2)) (+ (-3) (* (4) (x))))=>(= (x) (/ (1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq74: (= (+ (* (-1) (x)) (2)) (+ (-3) (* (4) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq74: (= (+ (* (-1) (x)) (2)) (+ (-3) (* (4) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq75: (= (+ (-1) (* (-2) (x))) (+ (* (-3) (x)) (4)))=>(= (x) (5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq75: (= (+ (-1) (* (-2) (x))) (+ (* (-3) (x)) (4)))=>(= (x) (5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq76: (= (- (-1) (* (2) (x))) (-3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq76: (= (- (-1) (* (2) (x))) (-3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq77: (= (-1) (/ (* (-2) (x)) (-3)))=>(= (x) (/ (-3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq77: (= (-1) (/ (* (-2) (x)) (-3)))=>(= (x) (/ (-3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq78: (= (* (1) (x)) (+ (- (- (2) (* (3) (x))) (4)) (* (5) (x))))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq78: (= (* (1) (x)) (+ (- (- (2) (* (3) (x))) (4)) (* (5) (x))))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq79: (= (+ (/ (-1) (x)) (-2)) (-3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq79: (= (+ (/ (-1) (x)) (-2)) (-3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq80: (= (+ (* (1) (x)) (-2)) (+ (-3) (* (-4) (x))))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq80: (= (+ (* (1) (x)) (-2)) (+ (-3) (* (-4) (x))))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq81: (= (* (1) (x)) (- (* (-2) (x)) (3)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq81: (= (* (1) (x)) (- (* (-2) (x)) (3)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq82: (= (-1) (x))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq82: (= (-1) (x))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq83: (= (+ (+ (1) (* (2) (x))) (* (3) (x))) (+ (+ (* (-4) (x)) (-5)) (* (6) (x))))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq83: (= (+ (+ (1) (* (2) (x))) (* (3) (x))) (+ (+ (* (-4) (x)) (-5)) (* (6) (x))))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq84: (= (- (- (1) (/ (2) (x))) (3)) (- (4) (5)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq84: (= (- (- (1) (/ (2) (x))) (3)) (- (4) (5)))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq85: (= (x) (/ (- (1) (2)) (-3)))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq85: (= (x) (/ (- (1) (2)) (-3)))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq86: (= (+ (1) (* (-2) (x))) (+ (-3) (* (4) (x))))=>(= (x) (/ (2) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq86: (= (+ (1) (* (-2) (x))) (+ (-3) (* (4) (x))))=>(= (x) (/ (2) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq87: (= (* (1) (x)) (/ (* (2) (x)) (x)))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq87: (= (* (1) (x)) (/ (* (2) (x)) (x)))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq88: (= (+ (1) (* (-2) (x))) (-3))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq88: (= (+ (1) (* (-2) (x))) (-3))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq89: (= (+ (* (-1) (x)) (2)) (+ (3) (* (-4) (x))))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq89: (= (+ (* (-1) (x)) (2)) (+ (3) (* (-4) (x))))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq90: (= (1) (+ (* (2) (x)) (-3)))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq90: (= (1) (+ (* (2) (x)) (-3)))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq91: (= (1) (+ (/ (2) (x)) (-3)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq91: (= (1) (+ (/ (2) (x)) (-3)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq92: (= (+ (* (-1) (x)) (2)) (+ (* (3) (x)) (4)))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq92: (= (+ (* (-1) (x)) (2)) (+ (* (3) (x)) (4)))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq93: (= (- (* (1) (x)) (* (-2) (x))) (-3))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq93: (= (- (* (1) (x)) (* (-2) (x))) (-3))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq94: (= (+ (* (-1) (x)) (2)) (3))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq94: (= (+ (* (-1) (x)) (2)) (3))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq95: (= (+ (1) (* (-2) (x))) (+ (3) (* (4) (x))))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq95: (= (+ (1) (* (-2) (x))) (+ (3) (* (4) (x))))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq96: (= (-1) (- (+ (* (2) (x)) (* (3) (x))) (4)))=>(= (x) (/ (3) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq96: (= (-1) (- (+ (* (2) (x)) (* (3) (x))) (4)))=>(= (x) (/ (3) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq97: (= (- (- (* (-1) (x)) (2)) (* (3) (x))) (-4))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq97: (= (- (- (* (-1) (x)) (2)) (* (3) (x))) (-4))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq98: (= (* (-1) (x)) (- (-2) (3)))=>(= (x) (5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq98: (= (* (-1) (x)) (- (-2) (3)))=>(= (x) (5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq99: (= (-1) (+ (-2) (/ (3) (x))))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq99: (= (-1) (+ (-2) (/ (3) (x))))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq100: (= (x) (/ (+ (-1) (2)) (3)))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq100: (= (x) (/ (+ (-1) (2)) (3)))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq101: (= (- (+ (1) (* (2) (x))) (3)) (* (-4) (x)))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq101: (= (- (+ (1) (* (2) (x))) (3)) (* (-4) (x)))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq102: (= (* (-1) (x)) (* (/ (2) (x)) (x)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq102: (= (* (-1) (x)) (* (/ (2) (x)) (x)))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq103: (= (- (-1) (2)) (- (* (3) (x)) (* (4) (x))))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq103: (= (- (-1) (2)) (- (* (3) (x)) (* (4) (x))))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq104: (= (1) (+ (/ (-2) (x)) (3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq104: (= (1) (+ (/ (-2) (x)) (3)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq105: (= (* (1) (x)) (2))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq105: (= (* (1) (x)) (2))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq106: (= (- (1) (2)) (* (3) (x)))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq106: (= (- (1) (2)) (* (3) (x)))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq107: (= (+ (* (1) (x)) (2)) (+ (-3) (* (4) (x))))=>(= (x) (/ (5) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq107: (= (+ (* (1) (x)) (2)) (+ (-3) (* (4) (x))))=>(= (x) (/ (5) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq108: (= (+ (* (-1) (x)) (2)) (+ (-3) (* (-4) (x))))=>(= (x) (/ (-5) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq108: (= (+ (* (-1) (x)) (2)) (+ (-3) (* (-4) (x))))=>(= (x) (/ (-5) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq109: (= (+ (-1) (2)) (* (3) (x)))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq109: (= (+ (-1) (2)) (* (3) (x)))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq110: (= (+ (-1) (* (-2) (x))) (+ (3) (* (4) (x))))=>(= (x) (/ (-2) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq110: (= (+ (-1) (* (-2) (x))) (+ (3) (* (4) (x))))=>(= (x) (/ (-2) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq111: (= (* (-1) (x)) (+ (2) (3)))=>(= (x) (-5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq111: (= (* (-1) (x)) (+ (2) (3)))=>(= (x) (-5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq112: (= (+ (-1) (* (2) (x))) (+ (-3) (* (4) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq112: (= (+ (-1) (* (2) (x))) (+ (-3) (* (4) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq113: (= (+ (1) (* (2) (x))) (3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq113: (= (+ (1) (* (2) (x))) (3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq114: (= (* (/ (-1) (x)) (x)) (* (2) (x)))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq114: (= (* (/ (-1) (x)) (x)) (* (2) (x)))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq115: (= (+ (-1) (* (2) (x))) (-3))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq115: (= (+ (-1) (* (2) (x))) (-3))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq116: (= (+ (1) (* (2) (x))) (+ (* (-3) (x)) (4)))=>(= (x) (/ (3) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq116: (= (+ (1) (* (2) (x))) (+ (* (-3) (x)) (4)))=>(= (x) (/ (3) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq117: (= (- (-1) (2)) (- (+ (/ (3) (x)) (4)) (5)))=>(= (x) (/ (-3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq117: (= (- (-1) (2)) (- (+ (/ (3) (x)) (4)) (5)))=>(= (x) (/ (-3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq118: (= (* (-1) (x)) (+ (-2) (x)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq118: (= (* (-1) (x)) (+ (-2) (x)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq119: (= (+ (* (-1) (x)) (2)) (* (3) (x)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq119: (= (+ (* (-1) (x)) (2)) (* (3) (x)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq120: (= (1) (+ (2) (* (3) (x))))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq120: (= (1) (+ (2) (* (3) (x))))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq121: (= (- (* (1) (x)) (2)) (+ (-3) (* (4) (x))))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq121: (= (- (* (1) (x)) (2)) (+ (-3) (* (4) (x))))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq122: (= (* (-1) (x)) (+ (+ (-2) (* (3) (x))) (4)))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq122: (= (* (-1) (x)) (+ (+ (-2) (* (3) (x))) (4)))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq123: (= (-1) (+ (-2) (* (3) (x))))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq123: (= (-1) (+ (-2) (* (3) (x))))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq124: (= (+ (* (1) (x)) (2)) (-3))=>(= (x) (-5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq124: (= (+ (* (1) (x)) (2)) (-3))=>(= (x) (-5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq125: (= (-1) (+ (/ (2) (x)) (-3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq125: (= (-1) (+ (/ (2) (x)) (-3)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq126: (= (+ (* (1) (x)) (2)) (+ (* (-3) (x)) (-4)))=>(= (x) (/ (-3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq126: (= (+ (* (1) (x)) (2)) (+ (* (-3) (x)) (-4)))=>(= (x) (/ (-3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq127: (= (1) (/ (* (2) (x)) (3)))=>(= (x) (/ (3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq127: (= (1) (/ (* (2) (x)) (3)))=>(= (x) (/ (3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq128: (= (+ (* (-1) (x)) (2)) (+ (3) (* (4) (x))))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq128: (= (+ (* (-1) (x)) (2)) (+ (3) (* (4) (x))))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq129: (= (1) (- (* (2) (x)) (* (3) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq129: (= (1) (- (* (2) (x)) (* (3) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq130: (= (1) (+ (-2) (/ (-3) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq130: (= (1) (+ (-2) (/ (-3) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq131: (= (- (1) (* (2) (x))) (* (-3) (x)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq131: (= (- (1) (* (2) (x))) (* (-3) (x)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq132: (= (+ (1) (/ (-2) (x))) (-3))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq132: (= (+ (1) (/ (-2) (x))) (-3))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq133: (= (x) (/ (+ (1) (2)) (3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq133: (= (x) (/ (+ (1) (2)) (3)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq134: (= (-1) (+ (-2) (* (-3) (x))))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq134: (= (-1) (+ (-2) (* (-3) (x))))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq135: (= (+ (1) (/ (2) (x))) (3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq135: (= (+ (1) (/ (2) (x))) (3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq136: (= (+ (-1) (* (2) (x))) (+ (3) (* (4) (x))))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq136: (= (+ (-1) (* (2) (x))) (+ (3) (* (4) (x))))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq137: (= (+ (+ (1) (* (2) (x))) (3)) (* (4) (x)))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq137: (= (+ (+ (1) (* (2) (x))) (3)) (* (4) (x)))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq138: (= (+ (1) (* (2) (x))) (+ (3) (* (4) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq138: (= (+ (1) (* (2) (x))) (+ (3) (* (4) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq139: (= (* (1) (x)) (- (-2) (* (3) (x))))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq139: (= (* (1) (x)) (- (-2) (* (3) (x))))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq140: (= (+ (* (1) (x)) (2)) (+ (* (3) (x)) (4)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq140: (= (+ (* (1) (x)) (2)) (+ (* (3) (x)) (4)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq141: (= (+ (- (-1) (* (2) (x))) (3)) (* (-4) (x)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq141: (= (+ (- (-1) (* (2) (x))) (3)) (* (-4) (x)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq142: (= (- (+ (* (-1) (x)) (2)) (* (3) (x))) (- (+ (-4) (* (5) (x))) (* (6) (x))))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq142: (= (- (+ (* (-1) (x)) (2)) (* (3) (x))) (- (+ (-4) (* (5) (x))) (* (6) (x))))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq143: (= (+ (* (1) (x)) (2)) (+ (-3) (* (-4) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq143: (= (+ (* (1) (x)) (2)) (+ (-3) (* (-4) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq144: (= (+ (-1) (* (2) (x))) (+ (-3) (* (-4) (x))))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq144: (= (+ (-1) (* (2) (x))) (+ (-3) (* (-4) (x))))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq145: (= (+ (/ (1) (x)) (-2)) (-3))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq145: (= (+ (/ (1) (x)) (-2)) (-3))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq146: (= (/ (* (1) (x)) (2)) (/ (3) (4)))=>(= (x) (/ (3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq146: (= (/ (* (1) (x)) (2)) (/ (3) (4)))=>(= (x) (/ (3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq147: (= (- (-1) (* (2) (x))) (* (-3) (x)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq147: (= (- (-1) (* (2) (x))) (* (-3) (x)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq148: (= (+ (* (1) (x)) (2)) (+ (* (-3) (x)) (4)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq148: (= (+ (* (1) (x)) (2)) (+ (* (-3) (x)) (4)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq149: (= (+ (-1) (/ (-2) (x))) (-3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq149: (= (+ (-1) (/ (-2) (x))) (-3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq150: (= (- (+ (1) (* (2) (x))) (3)) (* (4) (x)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq150: (= (- (+ (1) (* (2) (x))) (3)) (* (4) (x)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq151: (= (+ (-1) (* (-2) (x))) (+ (* (3) (x)) (-4)))=>(= (x) (/ (3) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq151: (= (+ (-1) (* (-2) (x))) (+ (* (3) (x)) (-4)))=>(= (x) (/ (3) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq152: (= (+ (+ (-1) (* (2) (x))) (* (3) (x))) (+ (+ (4) (* (-5) (x))) (* (6) (x))))=>(= (x) (/ (5) (4)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq152: (= (+ (+ (-1) (* (2) (x))) (* (3) (x))) (+ (+ (4) (* (-5) (x))) (* (6) (x))))=>(= (x) (/ (5) (4)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq153: (= (* (-1) (x)) (+ (-2) (3)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq153: (= (* (-1) (x)) (+ (-2) (3)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq154: (= (/ (* (-1) (x)) (-2)) (/ (3) (-4)))=>(= (x) (/ (-3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq154: (= (/ (* (-1) (x)) (-2)) (/ (3) (-4)))=>(= (x) (/ (-3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq155: (= (-1) (+ (* (-2) (x)) (3)))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq155: (= (-1) (+ (* (-2) (x)) (3)))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq156: (= (+ (1) (* (2) (x))) (+ (-3) (* (4) (x))))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq156: (= (+ (1) (* (2) (x))) (+ (-3) (* (4) (x))))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq157: (= (+ (1) (* (2) (x))) (+ (3) (* (-4) (x))))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq157: (= (+ (1) (* (2) (x))) (+ (3) (* (-4) (x))))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq158: (= (-1) (+ (/ (-2) (x)) (3)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq158: (= (-1) (+ (/ (-2) (x)) (3)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq159: (= (* (-1) (x)) (- (* (2) (x)) (3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq159: (= (* (-1) (x)) (- (* (2) (x)) (3)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq160: (= (+ (+ (1) (* (-2) (x))) (* (3) (x))) (+ (+ (* (-4) (x)) (5)) (* (6) (x))))=>(= (x) (-4))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq160: (= (+ (+ (1) (* (-2) (x))) (* (3) (x))) (+ (+ (* (-4) (x)) (5)) (* (6) (x))))=>(= (x) (-4))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq161: (= (+ (-1) (* (-2) (x))) (+ (* (3) (x)) (4)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq161: (= (+ (-1) (* (-2) (x))) (+ (* (3) (x)) (4)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq162: (= (+ (* (1) (x)) (-2)) (+ (* (3) (x)) (-4)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq162: (= (+ (* (1) (x)) (-2)) (+ (* (3) (x)) (-4)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq163: (= (1) (+ (2) (/ (-3) (x))))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq163: (= (1) (+ (2) (/ (-3) (x))))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq164: (= (+ (/ (1) (x)) (-2)) (3))=>(= (x) (/ (1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq164: (= (+ (/ (1) (x)) (-2)) (3))=>(= (x) (/ (1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq165: (= (- (* (-1) (x)) (2)) (- (3) (* (4) (x))))=>(= (x) (/ (5) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq165: (= (- (* (-1) (x)) (2)) (- (3) (* (4) (x))))=>(= (x) (/ (5) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq166: (= (* (-1) (x)) (- (+ (2) (* (-3) (x))) (4)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq166: (= (* (-1) (x)) (- (+ (2) (* (-3) (x))) (4)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq167: (= (1) (+ (* (-2) (x)) (-3)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq167: (= (1) (+ (* (-2) (x)) (-3)))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq168: (= (- (1) (2)) (- (* (-3) (x)) (* (4) (x))))=>(= (x) (/ (1) (7)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq168: (= (- (1) (2)) (- (* (-3) (x)) (* (4) (x))))=>(= (x) (/ (1) (7)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq169: (= (- (-1) (2)) (* (-3) (x)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq169: (= (- (-1) (2)) (* (-3) (x)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq170: (= (1) (+ (* (-2) (x)) (3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq170: (= (1) (+ (* (-2) (x)) (3)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq171: (= (1) (/ (-2) (x)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq171: (= (1) (/ (-2) (x)))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq172: (= (-1) (+ (* (2) (x)) (3)))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq172: (= (-1) (+ (* (2) (x)) (3)))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq173: (= (1) (* (2) (x)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq173: (= (1) (* (2) (x)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq174: (= (- (1) (2)) (* (-3) (x)))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq174: (= (- (1) (2)) (* (-3) (x)))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq175: (= (+ (1) (* (2) (x))) (* (-3) (x)))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq175: (= (+ (1) (* (2) (x))) (* (-3) (x)))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq176: (= (- (* (1) (x)) (2)) (* (3) (x)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq176: (= (- (* (1) (x)) (2)) (* (3) (x)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq177: (= (/ (* (1) (x)) (x)) (* (2) (x)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq177: (= (/ (* (1) (x)) (x)) (* (2) (x)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq178: (= (+ (* (-1) (x)) (-2)) (+ (* (3) (x)) (4)))=>(= (x) (/ (-3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq178: (= (+ (* (-1) (x)) (-2)) (+ (* (3) (x)) (4)))=>(= (x) (/ (-3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq179: (= (+ (- (* (1) (x)) (2)) (3)) (* (4) (x)))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq179: (= (+ (- (* (1) (x)) (2)) (3)) (* (4) (x)))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq180: (= (-1) (+ (+ (* (2) (x)) (3)) (* (4) (x))))=>(= (x) (/ (-2) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq180: (= (-1) (+ (+ (* (2) (x)) (3)) (* (4) (x))))=>(= (x) (/ (-2) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq181: (= (+ (* (1) (x)) (2)) (+ (* (3) (x)) (-4)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq181: (= (+ (* (1) (x)) (2)) (+ (* (3) (x)) (-4)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq182: (= (+ (1) (* (-2) (x))) (+ (* (3) (x)) (4)))=>(= (x) (/ (-3) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq182: (= (+ (1) (* (-2) (x))) (+ (* (3) (x)) (4)))=>(= (x) (/ (-3) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq183: (= (+ (+ (-1) (* (2) (x))) (3)) (+ (+ (4) (* (5) (x))) (6)))=>(= (x) (/ (-8) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq183: (= (+ (+ (-1) (* (2) (x))) (3)) (+ (+ (4) (* (5) (x))) (6)))=>(= (x) (/ (-8) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq184: (= (/ (-1) (x)) (- (-2) (3)))=>(= (x) (/ (1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq184: (= (/ (-1) (x)) (- (-2) (3)))=>(= (x) (/ (1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq185: (= (* (1) (x)) (-2))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq185: (= (* (1) (x)) (-2))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq186: (= (- (+ (* (-1) (x)) (-2)) (3)) (* (4) (x)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq186: (= (- (+ (* (-1) (x)) (-2)) (3)) (* (4) (x)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq187: (= (* (1) (x)) (- (2) (3)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq187: (= (* (1) (x)) (- (2) (3)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq188: (= (+ (-1) (* (-2) (x))) (+ (-3) (* (4) (x))))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq188: (= (+ (-1) (* (-2) (x))) (+ (-3) (* (4) (x))))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq189: (= (-1) (+ (* (-2) (x)) (-3)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq189: (= (-1) (+ (* (-2) (x)) (-3)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq190: (= (+ (* (-1) (x)) (-2)) (3))=>(= (x) (-5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq190: (= (+ (* (-1) (x)) (-2)) (3))=>(= (x) (-5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq191: (= (+ (* (1) (x)) (2)) (+ (3) (* (4) (x))))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq191: (= (+ (* (1) (x)) (2)) (+ (3) (* (4) (x))))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq192: (= (+ (+ (* (1) (x)) (2)) (* (3) (x))) (4))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq192: (= (+ (+ (* (1) (x)) (2)) (* (3) (x))) (4))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq193: (= (+ (* (-1) (x)) (2)) (- (* (-3) (x)) (4)))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq193: (= (+ (* (-1) (x)) (2)) (- (* (-3) (x)) (4)))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq194: (= (1) (+ (+ (* (-2) (x)) (3)) (* (4) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq194: (= (1) (+ (+ (* (-2) (x)) (3)) (* (4) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq195: (= (+ (1) (* (-2) (x))) (+ (* (-3) (x)) (4)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq195: (= (+ (1) (* (-2) (x))) (+ (* (-3) (x)) (4)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq196: (= (* (-1) (x)) (- (2) (3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq196: (= (* (-1) (x)) (- (2) (3)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq197: (= (+ (/ (-1) (x)) (2)) (-3))=>(= (x) (/ (1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq197: (= (+ (/ (-1) (x)) (2)) (-3))=>(= (x) (/ (1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq198: (= (-1) (+ (/ (-2) (x)) (-3)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq198: (= (-1) (+ (/ (-2) (x)) (-3)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq199: (= (+ (-1) (2)) (/ (3) (x)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq199: (= (+ (-1) (2)) (/ (3) (x)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq200: (= (+ (1) (* (2) (x))) (+ (* (-3) (x)) (-4)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq200: (= (+ (1) (* (2) (x))) (+ (* (-3) (x)) (-4)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq201: (= (-1) (- (* (2) (x)) (3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq201: (= (-1) (- (* (2) (x)) (3)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq202: (= (* (-1) (x)) (+ (+ (* (-2) (x)) (3)) (4)))=>(= (x) (7))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq202: (= (* (-1) (x)) (+ (+ (* (-2) (x)) (3)) (4)))=>(= (x) (7))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq203: (= (- (- (1) (* (2) (x))) (3)) (- (+ (4) (* (5) (x))) (6)))=>(= (x) (0))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq203: (= (- (- (1) (* (2) (x))) (3)) (- (+ (4) (* (5) (x))) (6)))=>(= (x) (0))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq204: (= (+ (* (1) (x)) (-2)) (+ (3) (* (4) (x))))=>(= (x) (/ (-5) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq204: (= (+ (* (1) (x)) (-2)) (+ (3) (* (4) (x))))=>(= (x) (/ (-5) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq205: (= (+ (+ (-1) (* (2) (x))) (3)) (+ (4) (5)))=>(= (x) (/ (7) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq205: (= (+ (+ (-1) (* (2) (x))) (3)) (+ (4) (5)))=>(= (x) (/ (7) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq206: (= (+ (+ (* (-1) (x)) (2)) (* (3) (x))) (+ (- (-4) (* (5) (x))) (* (6) (x))))=>(= (x) (-6))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq206: (= (+ (+ (* (-1) (x)) (2)) (* (3) (x))) (+ (- (-4) (* (5) (x))) (* (6) (x))))=>(= (x) (-6))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq207: (= (-1) (- (* (-2) (x)) (3)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq207: (= (-1) (- (* (-2) (x)) (3)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq208: (= (- (+ (* (1) (x)) (2)) (* (3) (x))) (- (* (4) (x)) (* (5) (x))))=>(= (x) (2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq208: (= (- (+ (* (1) (x)) (2)) (* (3) (x))) (- (* (4) (x)) (* (5) (x))))=>(= (x) (2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq209: (= (-1) (+ (2) (* (-3) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq209: (= (-1) (+ (2) (* (-3) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq210: (= (* (1) (x)) (+ (2) (* (3) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq210: (= (* (1) (x)) (+ (2) (* (3) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq211: (= (+ (-1) (* (2) (x))) (+ (* (3) (x)) (4)))=>(= (x) (-5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq211: (= (+ (-1) (* (2) (x))) (+ (* (3) (x)) (4)))=>(= (x) (-5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq212: (= (+ (* (-1) (x)) (-2)) (+ (3) (* (4) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq212: (= (+ (* (-1) (x)) (-2)) (+ (3) (* (4) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq213: (= (-1) (+ (- (* (2) (x)) (3)) (* (4) (x))))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq213: (= (-1) (+ (- (* (2) (x)) (3)) (* (4) (x))))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq214: (= (1) (- (2) (/ (3) (x))))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq214: (= (1) (- (2) (/ (3) (x))))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq215: (= (+ (1) (* (2) (x))) (+ (* (3) (x)) (-4)))=>(= (x) (5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq215: (= (+ (1) (* (2) (x))) (+ (* (3) (x)) (-4)))=>(= (x) (5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq216: (= (+ (- (* (-1) (x)) (2)) (* (3) (x))) (4))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq216: (= (+ (- (* (-1) (x)) (2)) (* (3) (x))) (4))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq217: (= (+ (1) (* (-2) (x))) (+ (* (3) (x)) (-4)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq217: (= (+ (1) (* (-2) (x))) (+ (* (3) (x)) (-4)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq218: (= (1) (+ (-2) (* (3) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq218: (= (1) (+ (-2) (* (3) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq219: (= (+ (1) (* (2) (x))) (-3))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq219: (= (+ (1) (* (2) (x))) (-3))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq220: (= (+ (/ (1) (x)) (2)) (3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq220: (= (+ (/ (1) (x)) (2)) (3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq221: (= (+ (1) (/ (2) (x))) (-3))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq221: (= (+ (1) (/ (2) (x))) (-3))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq222: (= (- (-1) (* (2) (x))) (- (* (-3) (x)) (4)))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq222: (= (- (-1) (* (2) (x))) (- (* (-3) (x)) (4)))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq223: (= (+ (-1) (/ (-2) (x))) (3))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq223: (= (+ (-1) (/ (-2) (x))) (3))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq224: (= (+ (* (1) (x)) (2)) (3))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq224: (= (+ (* (1) (x)) (2)) (3))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq225: (= (+ (-1) (/ (2) (x))) (-3))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq225: (= (+ (-1) (/ (2) (x))) (-3))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq226: (= (1) (+ (2) (* (-3) (x))))=>(= (x) (/ (1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq226: (= (1) (+ (2) (* (-3) (x))))=>(= (x) (/ (1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq227: (= (- (-1) (* (2) (x))) (- (-3) (* (4) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq227: (= (- (-1) (* (2) (x))) (- (-3) (* (4) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq228: (= (+ (* (-1) (x)) (-2)) (+ (* (3) (x)) (-4)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq228: (= (+ (* (-1) (x)) (-2)) (+ (* (3) (x)) (-4)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq229: (= (-1) (+ (* (-2) (x)) (* (3) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq229: (= (-1) (+ (* (-2) (x)) (* (3) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq230: (= (+ (1) (/ (-2) (x))) (3))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq230: (= (+ (1) (/ (-2) (x))) (3))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq231: (= (* (-1) (x)) (- (- (* (2) (x)) (3)) (4)))=>(= (x) (/ (7) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq231: (= (* (-1) (x)) (- (- (* (2) (x)) (3)) (4)))=>(= (x) (/ (7) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq232: (= (+ (-1) (* (2) (x))) (- (* (-3) (x)) (4)))=>(= (x) (/ (-3) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq232: (= (+ (-1) (* (2) (x))) (- (* (-3) (x)) (4)))=>(= (x) (/ (-3) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq233: (= (+ (* (-1) (x)) (-2)) (+ (3) (* (-4) (x))))=>(= (x) (/ (5) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq233: (= (+ (* (-1) (x)) (-2)) (+ (3) (* (-4) (x))))=>(= (x) (/ (5) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq234: (= (-1) (+ (- (-2) (* (3) (x))) (* (4) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq234: (= (-1) (+ (- (-2) (* (3) (x))) (* (4) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq235: (= (-1) (* (2) (x)))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq235: (= (-1) (* (2) (x)))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq236: (= (-1) (* (-2) (x)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq236: (= (-1) (* (-2) (x)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq237: (= (* (-1) (x)) (- (+ (-2) (* (-3) (x))) (4)))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq237: (= (* (-1) (x)) (- (+ (-2) (* (-3) (x))) (4)))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq238: (= (* (- (/ (1) (x)) (2)) (x)) (* (-3) (x)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq238: (= (* (- (/ (1) (x)) (2)) (x)) (* (-3) (x)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq239: (= (-1) (+ (2) (/ (3) (x))))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq239: (= (-1) (+ (2) (/ (3) (x))))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq240: (= (+ (+ (1) (* (2) (x))) (* (3) (x))) (4))=>(= (x) (/ (3) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq240: (= (+ (+ (1) (* (2) (x))) (* (3) (x))) (4))=>(= (x) (/ (3) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq241: (= (+ (1) (* (2) (x))) (+ (-3) (* (-4) (x))))=>(= (x) (/ (-2) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq241: (= (+ (1) (* (2) (x))) (+ (-3) (* (-4) (x))))=>(= (x) (/ (-2) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq242: (= (* (1) (x)) (+ (* (-2) (x)) (3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq242: (= (* (1) (x)) (+ (* (-2) (x)) (3)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq243: (= (+ (* (1) (x)) (2)) (+ (3) (* (-4) (x))))=>(= (x) (/ (1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq243: (= (+ (* (1) (x)) (2)) (+ (3) (* (-4) (x))))=>(= (x) (/ (1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq244: (= (/ (1) (-2)) (x))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq244: (= (/ (1) (-2)) (x))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq245: (= (+ (* (-1) (x)) (2)) (+ (* (-3) (x)) (-4)))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq245: (= (+ (* (-1) (x)) (2)) (+ (* (-3) (x)) (-4)))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq246: (= (/ (1) (x)) (- (-2) (3)))=>(= (x) (/ (-1) (5)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq246: (= (/ (1) (x)) (- (-2) (3)))=>(= (x) (/ (-1) (5)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq247: (= (- (* (-1) (x)) (* (2) (x))) (+ (-3) (4)))=>(= (x) (/ (-1) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq247: (= (- (* (-1) (x)) (* (2) (x))) (+ (-3) (4)))=>(= (x) (/ (-1) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq248: (= (+ (+ (* (-1) (x)) (2)) (3)) (* (-4) (x)))=>(= (x) (/ (-5) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq248: (= (+ (+ (* (-1) (x)) (2)) (3)) (* (-4) (x)))=>(= (x) (/ (-5) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq249: (= (+ (1) (* (-2) (x))) (+ (3) (* (-4) (x))))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq249: (= (+ (1) (* (-2) (x))) (+ (3) (* (-4) (x))))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq250: (= (* (-1) (x)) (+ (-2) (* (3) (x))))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq250: (= (* (-1) (x)) (+ (-2) (* (3) (x))))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq251: (= (+ (-1) (* (2) (x))) (+ (3) (* (-4) (x))))=>(= (x) (/ (2) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq251: (= (+ (-1) (* (2) (x))) (+ (3) (* (-4) (x))))=>(= (x) (/ (2) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq252: (= (+ (* (1) (x)) (-2)) (+ (* (3) (x)) (4)))=>(= (x) (-3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq252: (= (+ (* (1) (x)) (-2)) (+ (* (3) (x)) (4)))=>(= (x) (-3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq253: (= (* (-1) (x)) (2))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq253: (= (* (-1) (x)) (2))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq254: (= (+ (* (-1) (x)) (-2)) (+ (* (-3) (x)) (4)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq254: (= (+ (* (-1) (x)) (-2)) (+ (* (-3) (x)) (4)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq255: (= (/ (-1) (-2)) (x))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq255: (= (/ (-1) (-2)) (x))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq256: (= (/ (1) (x)) (-2))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq256: (= (/ (1) (x)) (-2))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq257: (= (+ (-1) (* (-2) (x))) (3))=>(= (x) (-2))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq257: (= (+ (-1) (* (-2) (x))) (3))=>(= (x) (-2))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq258: (= (- (-1) (2)) (- (+ (* (-3) (x)) (4)) (5)))=>(= (x) (/ (2) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq258: (= (- (-1) (2)) (- (+ (* (-3) (x)) (4)) (5)))=>(= (x) (/ (2) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq259: (= (- (* (-1) (x)) (2)) (* (3) (x)))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq259: (= (- (* (-1) (x)) (2)) (* (3) (x)))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq260: (= (1) (+ (/ (2) (x)) (3)))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq260: (= (1) (+ (/ (2) (x)) (3)))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq261: (= (* (1) (x)) (- (-2) (3)))=>(= (x) (-5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq261: (= (* (1) (x)) (- (-2) (3)))=>(= (x) (-5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq262: (= (- (* (1) (x)) (2)) (- (* (3) (x)) (4)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq262: (= (- (* (1) (x)) (2)) (- (* (3) (x)) (4)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq263: (= (+ (* (-1) (x)) (* (2) (x))) (- (-3) (4)))=>(= (x) (-7))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq263: (= (+ (* (-1) (x)) (* (2) (x))) (- (-3) (4)))=>(= (x) (-7))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq264: (= (-1) (+ (* (2) (x)) (-3)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq264: (= (-1) (+ (* (2) (x)) (-3)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq265: (= (- (* (1) (x)) (2)) (-3))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq265: (= (- (* (1) (x)) (2)) (-3))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq266: (= (+ (* (1) (x)) (-2)) (3))=>(= (x) (5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq266: (= (+ (* (1) (x)) (-2)) (3))=>(= (x) (5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq267: (= (- (- (-1) (* (2) (x))) (3)) (* (4) (x)))=>(= (x) (/ (-2) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq267: (= (- (- (-1) (* (2) (x))) (3)) (* (4) (x)))=>(= (x) (/ (-2) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq268: (= (+ (* (/ (1) (x)) (x)) (* (2) (x))) (* (3) (x)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq268: (= (+ (* (/ (1) (x)) (x)) (* (2) (x))) (* (3) (x)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq269: (= (+ (- (-1) (* (2) (x))) (* (3) (x))) (4))=>(= (x) (5))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq269: (= (+ (- (-1) (* (2) (x))) (* (3) (x))) (4))=>(= (x) (5))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq270: (= (+ (* (-1) (x)) (2)) (- (-3) (* (4) (x))))=>(= (x) (/ (-5) (3)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq270: (= (+ (* (-1) (x)) (2)) (- (-3) (* (4) (x))))=>(= (x) (/ (-5) (3)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq271: (= (x) (/ (-1) (-2)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq271: (= (x) (/ (-1) (-2)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq272: (= (+ (* (1) (x)) (-2)) (-3))=>(= (x) (-1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq272: (= (+ (* (1) (x)) (-2)) (-3))=>(= (x) (-1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq273: (= (x) (/ (-1) (2)))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq273: (= (x) (/ (-1) (2)))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq274: (= (/ (-1) (x)) (2))=>(= (x) (/ (-1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq274: (= (/ (-1) (x)) (2))=>(= (x) (/ (-1) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq275: (= (- (- (* (-1) (x)) (2)) (* (3) (x))) (4))=>(= (x) (/ (-3) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq275: (= (- (- (* (-1) (x)) (2)) (* (3) (x))) (4))=>(= (x) (/ (-3) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq276: (= (* (1) (x)) (- (* (2) (x)) (3)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq276: (= (* (1) (x)) (- (* (2) (x)) (3)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq277: (= (+ (- (* (-1) (x)) (* (1) (x))) (2)) (-3))=>(= (x) (/ (5) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq277: (= (+ (- (* (-1) (x)) (* (1) (x))) (2)) (-3))=>(= (x) (/ (5) (2)))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq278: (= (- (* (1) (x)) (* (-2) (x))) (- (+ (* (-3) (x)) (4)) (* (-5) (x))))=>(= (x) (4))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq278: (= (- (* (1) (x)) (* (-2) (x))) (- (+ (* (-3) (x)) (4)) (* (-5) (x))))=>(= (x) (4))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq279: (= (* (1) (x)) (- (- (* (2) (x)) (3)) (4)))=>(= (x) (7))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq279: (= (* (1) (x)) (- (- (* (2) (x)) (3)) (4)))=>(= (x) (7))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq280: (= (- (1) (* (2) (x))) (- (* (3) (x)) (4)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq280: (= (- (1) (* (2) (x))) (- (* (3) (x)) (4)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq281: (= (* (-1) (x)) (+ (- (2) (* (3) (x))) (4)))=>(= (x) (3))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq281: (= (* (-1) (x)) (+ (- (2) (* (3) (x))) (4)))=>(= (x) (3))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq282: (= (+ (-1) (* (2) (x))) (+ (* (-3) (x)) (4)))=>(= (x) (1))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq282: (= (+ (-1) (* (2) (x))) (+ (* (-3) (x)) (4)))=>(= (x) (1))",
            "programs": [],
            "best_search_time": null
        },
        "mathEq283: (= (x) (/ (1) (2)))=>(= (x) (/ (1) (2)))": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "mathEq283: (= (x) (/ (1) (2)))=>(= (x) (/ (1) (2)))",
            "programs": [],
            "best_search_time": null
        }
    }
}