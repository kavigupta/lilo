{
    "cmd": "python3 run_iterative_experiment.py --experiment_name test_runs_96_CPUs --experiment_type dreamcoder --domain re2 --encoder re2 --iterations 16 --global_batch_sizes 96 --enumeration_timeout 1000 --recognition_train_steps 10000 --random_seeds 111 222 333 --verbose",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "no_curried_metavars": false,
            "no_curried_bodies": false,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "structure_penalty": 1.0,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true,
            "fused_lambda_tags": {
                "tags": null
            }
        }
    },
    "original_cost": 38534,
    "final_cost": 17777,
    "compression_ratio": 2.1676323339146086,
    "num_abstractions": 10,
    "original": [
        "(lam (_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat $0 $0) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat $0 _e) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat _e $0) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat _e _e) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _n (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _n (cdr (_rsplit _rempty (_rflatten (cons _a (cons _a (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _n (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (map (lam _k) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _rempty _k)) (map (lam (_rconcat _rempty _k)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _k _rempty)) (map (lam (_rconcat _k _rempty)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam _k) (_rsplit _rempty (_rflatten (map (lam _rdot) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam _k) (_rsplit _rempty (_rflatten (map (lam _k) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rempty (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (map (lam $0) (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rempty (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (_rappend _u (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _a (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _e (_rrevcdr (_rsplit _rempty $0)))))))))))",
        "(lam (_rflatten (_rappend _d (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _e $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _c $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _g) (_rconcat _q $0) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _g) (_rconcat _q _g) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit (_rnot _w) $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty (car (map (lam $1) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam (car (map (lam (_rconcat $1 _v)) (_rsplit _rempty $1)))) (_rsplit _rempty $0))))",
        "(lam (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch (_rtail (cdr (_rsplit _rempty $0))) _e) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch _e (_rtail (cdr (_rsplit _rempty $0)))) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (_rflatten (if (_rmatch _e (_rtail (_rsplit _rempty $0))) (_rsplit _rempty $0) (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _w (cdr (_rsplit _rempty (_rflatten (cons _i (cons _i (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _q (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _q (cons _a (cons _rempty (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _q (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _l) (_rconcat _n _k) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _i (cons _r (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rempty (_rflatten (cons _i (cons _r (cdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _i (cons _r (cdr (_rsplit _rempty (_rflatten (cons _b (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _i (cons _r (cdr (_rsplit _rempty (_rflatten (cons _z (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (map (lam (_rconcat _r _v)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rappend _f (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (cons _v (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rempty (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (_rappend _t (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))))",
        "(lam (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _t (_rrevcdr (_rsplit _rempty $0)))))))))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _t) (_rconcat _x _w) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _t) (_rconcat _x _w) $0)) (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rempty (_rflatten (map (lam (if (_rmatch $0 _t) (_rconcat _x _w) $0)) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _t) (_rconcat _x _w) $0)) (_rsplit _rempty (_rflatten (_rsplit _a $0))))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _t) _n $0)) (_rsplit _rempty (_rflatten (map (lam (if (_rmatch $0 _t) (_rconcat _x _w) $0)) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _c) (_rconcat _k _b) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _b (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _b _w) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rempty (_rflatten (cons _e (cons _w (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rempty (_rflatten (cons _g (cons _w (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rempty (_rflatten (cons _u (cons _w (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (map (lam (_rconcat _w _t)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _m) _l $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _m $0) _l $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _m) _l $0)) (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rempty (_rflatten (map (lam (if (_rmatch $0 _m) _l $0)) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _t) _n $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _x (cdr (_rsplit _rempty (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rempty (_rflatten (cons _z (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _x (cons (_rconcat _e _rempty) (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _j (cons _o (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _j (cdr (_rsplit _rempty (_rflatten (cons _rdot (cons _o (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _j (cdr (_rsplit _rempty (_rflatten (cons _e (cons _o (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _j (cdr (_rsplit _rempty (_rflatten (cons _f (cons _o (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _j (cdr (_rsplit _rempty (_rflatten (cons _x (cons _o (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _m) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _m) (_rrevcdr (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rempty (_rflatten (_rappend (_rconcat _o _m) (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons _i (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _i (cons _rempty (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _rempty (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _i (cdr (_rsplit _rempty (_rflatten (cons _b (cdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons (_rconcat _i _rempty) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons _a (cons _a (cdr (cdr (_rsplit _rempty $0)))))))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty (_rflatten (cons _a (cdr (_rsplit _rempty $0)))))))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (map (lam $0) (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _q (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _w $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _n $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _q $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _g) (_rconcat _w $0) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _p) (_rconcat _a _w) $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _a (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _rempty (cons _a (cons _w (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _rempty (cons _a (_rsplit _a (_rflatten (cons _w (cdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _rempty (cons _a (_rsplit _rdot (_rflatten (cons _w (cdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _rempty (cons _a (_rsplit _p (_rflatten (cons _w (cdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rsplit _rempty (_rflatten (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend _rempty (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _rempty (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rappend _j (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _k (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _j $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _t $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _t $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _k $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _z $0))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _rempty (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _rempty (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _rempty (cons _a (cdr (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _rempty (cons _a (map (lam $0) (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _v (_rsplit _a $0))))",
        "(lam (_rflatten (cons _v (_rsplit _e $0))))",
        "(lam (_rflatten (cons _v (_rsplit _b $0))))",
        "(lam (_rflatten (cons _v (_rsplit _f $0))))",
        "(lam (_rflatten (cons _v (_rsplit _c $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _o) _l $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch _o $0) _l $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _o) _l $0)) (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam $0) (_rsplit _rempty (_rflatten (map (lam (if (_rmatch $0 _o) _l $0)) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 (_rconcat _o _rempty)) _l $0)) (_rsplit _rempty $0))))"
    ],
    "rewritten": [
        "(lam (fn_4 $0 (lam (if (_rmatch $0 _e) (_rconcat $0 $0) $0))))",
        "(lam (fn_4 $0 (lam (if (_rmatch $0 _e) (_rconcat $0 _e) $0))))",
        "(lam (fn_6 _e _e $0))",
        "(lam (fn_0 $0 (_rconcat _e _e) _e))",
        "(lam (fn_1 $0 _a _n))",
        "(lam (fn_7 (fn_1 $0 _a _a) _n))",
        "(lam (fn_7 $0 (_rconcat _n _a)))",
        "(lam (_rflatten (cons _n (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_4 $0 (lam _k)))",
        "(lam (_rflatten (map (lam (_rconcat _rempty _k)) (map (lam (_rconcat _rempty _k)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _k _rempty)) (map (lam (_rconcat _k _rempty)) (_rsplit _rempty $0)))))",
        "(lam (fn_4 (fn_4 $0 (lam _rdot)) (lam _k)))",
        "(lam (fn_4 (fn_4 $0 (lam _k)) (lam _k)))",
        "(lam (fn_2 $0 _r))",
        "(lam (fn_2 $0 _r))",
        "(lam (fn_4 (fn_2 $0 _r) (lam $0)))",
        "(lam (fn_2 (fn_2 $0 _f) _r))",
        "(lam (fn_2 (fn_2 $0 _r) _r))",
        "(lam (fn_3 $0 _o _u))",
        "(lam (_rflatten (_rappend _u (_rappend _o (_rrevcdr (map (lam $0) (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (fn_4 (fn_3 $0 _o _u) (lam $0)))",
        "(lam (fn_2 (fn_3 $0 _o _a) _u))",
        "(lam (fn_3 (fn_2 $0 _e) _o _u))",
        "(lam (fn_5 $0 _d))",
        "(lam (_rflatten (_rappend _d (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _e $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _c $0))))",
        "(lam (fn_6 _q _g $0))",
        "(lam (fn_0 $0 (_rconcat _q _g) _g))",
        "(lam (fn_4 $0 (lam (_rconcat $0 _v))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit (_rnot _w) $0))))",
        "(lam (fn_4 (car (map (lam $1) (_rsplit _rempty $0))) (lam (_rconcat $0 _v))))",
        "(lam (fn_4 $0 (lam (car (map (lam (_rconcat $1 _v)) (_rsplit _rempty $1))))))",
        "(lam (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch (_rtail (cdr (_rsplit _rempty $0))) _e) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch _e (_rtail (cdr (_rsplit _rempty $0)))) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (_rflatten (if (_rmatch _e (_rtail (_rsplit _rempty $0))) (_rsplit _rempty $0) (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (fn_2 $0 _f))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (fn_1 $0 _i _w))",
        "(lam (fn_7 $0 (_rconcat _w _i)))",
        "(lam (fn_7 (fn_1 $0 _i _i) _w))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_1 $0 _a _q))",
        "(lam (fn_7 $0 (_rconcat _q _a)))",
        "(lam (fn_8 $0 (lam (cons _rempty $0)) _q))",
        "(lam (_rflatten (cons _q (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 (_rconcat _n _k) _l))",
        "(lam (fn_1 $0 _r _i))",
        "(lam (fn_7 $0 (_rconcat _i _r)))",
        "(lam (fn_4 (fn_1 $0 _r _i) (lam $0)))",
        "(lam (fn_1 (fn_7 $0 _b) _r _i))",
        "(lam (fn_1 (fn_7 $0 _z) _r _i))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (map (lam (_rconcat _r _v)) (_rsplit _rempty $0)))))",
        "(lam (fn_4 $0 (lam (_rconcat _r _v))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rappend _f (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (cons _v (cdr (_rsplit _rempty $0))))))",
        "(lam (fn_3 $0 _d _t))",
        "(lam (fn_3 $0 _d _t))",
        "(lam (fn_4 (fn_3 $0 _d _t) (lam $0)))",
        "(lam (fn_2 (fn_3 $0 _d _t) _t))",
        "(lam (fn_3 (fn_2 $0 _t) _d _t))",
        "(lam (fn_9 _t _x $0))",
        "(lam (fn_9 _t _x (fn_4 $0 (lam $0))))",
        "(lam (fn_4 (fn_9 _t _x $0) (lam $0)))",
        "(lam (fn_9 _t _x (_rflatten (_rsplit _a $0))))",
        "(lam (fn_0 (fn_9 _t _x $0) _n _t))",
        "(lam (fn_7 $0 _b))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (fn_0 $0 (_rconcat _k _b) _c))",
        "(lam (fn_1 $0 _w _b))",
        "(lam (fn_7 $0 (_rconcat _b _w)))",
        "(lam (fn_7 (fn_1 $0 _w _e) _b))",
        "(lam (fn_7 (fn_1 $0 _w _g) _b))",
        "(lam (fn_7 (fn_1 $0 _w _u) _b))",
        "(lam (fn_2 $0 (_rconcat _a _o)))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (map (lam (_rconcat _w _t)) (_rsplit _rempty $0)))))",
        "(lam (fn_4 $0 (lam (_rconcat _w _t))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (fn_0 $0 _l _m))",
        "(lam (fn_4 $0 (lam (if (_rmatch _m $0) _l $0))))",
        "(lam (fn_0 (fn_4 $0 (lam $0)) _l _m))",
        "(lam (fn_4 (fn_0 $0 _l _m) (lam $0)))",
        "(lam (fn_0 $0 _n _t))",
        "(lam (fn_1 $0 _e _x))",
        "(lam (fn_7 $0 (_rconcat _x _e)))",
        "(lam (fn_7 (fn_1 $0 _e _e) _x))",
        "(lam (fn_1 (fn_7 $0 _z) _e _x))",
        "(lam (fn_1 $0 (_rconcat _e _rempty) _x))",
        "(lam (fn_1 $0 _o _j))",
        "(lam (fn_7 (fn_1 $0 _o _rdot) _j))",
        "(lam (fn_7 (fn_1 $0 _o _e) _j))",
        "(lam (fn_7 (fn_1 $0 _o _f) _j))",
        "(lam (fn_7 (fn_1 $0 _o _x) _j))",
        "(lam (fn_2 $0 (_rconcat _o _m)))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (fn_2 (fn_4 $0 (lam $0)) (_rconcat _o _m)))",
        "(lam (fn_4 (fn_2 $0 (_rconcat _o _m)) (lam $0)))",
        "(lam (fn_7 $0 _i))",
        "(lam (fn_1 $0 _rempty _i))",
        "(lam (fn_1 $0 _i _rempty))",
        "(lam (fn_7 (fn_7 $0 _b) _i))",
        "(lam (fn_7 $0 (_rconcat _i _rempty)))",
        "(lam (fn_8 $0 (lam (cdr $0)) _e))",
        "(lam (fn_7 (fn_8 $0 (lam (cdr $0)) _a) _e))",
        "(lam (fn_8 (fn_7 $0 _a) (lam (cdr $0)) _e))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (map (lam $0) (_rsplit _rempty $0))))))))",
        "(lam (fn_5 $0 _q))",
        "(lam (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _w $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _n $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _q $0))))",
        "(lam (fn_6 _w _g $0))",
        "(lam (fn_9 _p _a $0))",
        "(lam (fn_1 $0 _w _a))",
        "(lam (fn_8 $0 (lam (cons _w $0)) _rempty))",
        "(lam (_rflatten (cons _rempty (cons _a (_rsplit _a (fn_7 $0 _w))))))",
        "(lam (_rflatten (cons _rempty (cons _a (_rsplit _rdot (fn_7 $0 _w))))))",
        "(lam (_rflatten (cons _rempty (cons _a (_rsplit _p (fn_7 $0 _w))))))",
        "(lam (fn_2 (_rflatten (_rrevcdr (_rsplit _rempty $0))) _j))",
        "(lam (fn_3 $0 _j _rempty))",
        "(lam (fn_3 $0 _rempty _j))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (fn_2 (fn_2 $0 _rempty) _j))",
        "(lam (fn_2 $0 _i))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (fn_1 $0 _s _e))",
        "(lam (fn_7 $0 (_rconcat _e _s)))",
        "(lam (fn_7 (fn_1 $0 _s _e) _e))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_3 $0 _b _j))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rappend _j (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (fn_5 $0 _k))",
        "(lam (_rflatten (_rappend _k (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _j $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _t $0))))",
        "(lam (fn_5 $0 _a))",
        "(lam (_rflatten (_rappend _a (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _t $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _k $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _z $0))))",
        "(lam (fn_7 $0 _a))",
        "(lam (fn_1 $0 _a _rempty))",
        "(lam (fn_1 $0 _a _rempty))",
        "(lam (fn_1 (fn_4 $0 (lam $0)) _a _rempty))",
        "(lam (fn_8 $0 (lam (map (lam $0) $0)) _rempty))",
        "(lam (_rflatten (cons _v (_rsplit _a $0))))",
        "(lam (_rflatten (cons _v (_rsplit _e $0))))",
        "(lam (_rflatten (cons _v (_rsplit _b $0))))",
        "(lam (_rflatten (cons _v (_rsplit _f $0))))",
        "(lam (_rflatten (cons _v (_rsplit _c $0))))",
        "(lam (fn_0 $0 _l _o))",
        "(lam (fn_4 $0 (lam (if (_rmatch _o $0) _l $0))))",
        "(lam (fn_0 (fn_4 $0 (lam $0)) _l _o))",
        "(lam (fn_4 (fn_0 $0 _l _o) (lam $0)))",
        "(lam (fn_0 $0 _l (_rconcat _o _rempty)))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (if (_rmatch $0 _e) (_rconcat $0 $0) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (if (_rmatch $0 _e) (_rconcat $0 _e) $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (if (_rmatch $0 $2) (_rconcat $3 $0) $0)))))) _e _e $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat _e _e) _e))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a _n))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a _a) _n))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _n _a)))",
        "(lambda (_rflatten (cons _n (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda _k)))",
        "(lambda (_rflatten (map (lambda (_rconcat _rempty _k)) (map (lambda (_rconcat _rempty _k)) (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (map (lambda (_rconcat _k _rempty)) (map (lambda (_rconcat _k _rempty)) (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda _rdot)) (lambda _k)))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda _k)) (lambda _k)))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _r))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _r))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _r) (lambda $0)))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _f) _r))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _r) _r))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _o _u))",
        "(lambda (_rflatten (_rappend _u (_rappend _o (_rrevcdr (map (lambda $0) (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _o _u) (lambda $0)))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _o _a) _u))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _e) _o _u))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1))))) $0 _d))",
        "(lambda (_rflatten (_rappend _d (_rsplit _rdot $0))))",
        "(lambda (_rflatten (_rappend _d (_rsplit _e $0))))",
        "(lambda (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lambda (_rflatten (_rappend _d (_rsplit _c $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (if (_rmatch $0 $2) (_rconcat $3 $0) $0)))))) _q _g $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat _q _g) _g))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat $0 _v))))",
        "(lambda (_rflatten (map (lambda (_rconcat $0 _v)) (_rsplit _rdot $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat $0 _v)) (_rsplit (_rnot _w) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (car (map (lambda $1) (_rsplit _rempty $0))) (lambda (_rconcat $0 _v))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (car (map (lambda (_rconcat $1 _v)) (_rsplit _rempty $1))))))",
        "(lambda (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lambda (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lambda (if (_rmatch (_rtail (cdr (_rsplit _rempty $0))) _e) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lambda (if (_rmatch _e (_rtail (cdr (_rsplit _rempty $0)))) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (if (_rmatch _e (_rtail (_rsplit _rempty $0))) (_rsplit _rempty $0) (_rappend _o (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _f))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _i _w))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _w _i)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _i _i) _w))",
        "(lambda (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a _q))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _q _a)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2))))))))) $0 (lambda (cons _rempty $0)) _q))",
        "(lambda (_rflatten (cons _q (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat _n _k) _l))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _r _i))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _i _r)))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _r _i) (lambda $0)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _b) _r _i))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _z) _r _i))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (map (lambda (_rconcat _r _v)) (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _r _v))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (_rsplit _rdot $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (_rappend _f (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (cons _v (cdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _d _t))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _d _t))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _d _t) (lambda $0)))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _d _t) _t))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _t) _d _t))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat $1 _w) $2)))) _t _x $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat $1 _w) $2)))) _t _x (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat $1 _w) $2)))) _t _x $0) (lambda $0)))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat $1 _w) $2)))) _t _x (_rflatten (_rsplit _a $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat $1 _w) $2)))) _t _x $0) _n _t))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _b))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat _k _b) _c))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w _b))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _b _w)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w _e) _b))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w _g) _b))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w _u) _b))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 (_rconcat _a _o)))",
        "(lambda (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lambda (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (map (lambda (_rconcat _w _t)) (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _w _t))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (_rsplit _rdot $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 _l _m))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (if (_rmatch _m $0) _l $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda $0)) _l _m))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 _l _m) (lambda $0)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 _n _t))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _x))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _x _e)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _e) _x))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _z) _e _x))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 (_rconcat _e _rempty) _x))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _o _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _o _rdot) _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _o _e) _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _o _f) _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _o _x) _j))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 (_rconcat _o _m)))",
        "(lambda (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (_rappend _m (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda $0)) (_rconcat _o _m)))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 (_rconcat _o _m)) (lambda $0)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _i))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _rempty _i))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _i _rempty))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _b) _i))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _i _rempty)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2))))))))) $0 (lambda (cdr $0)) _e))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2))))))))) $0 (lambda (cdr $0)) _a) _e))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2))))))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _a) (lambda (cdr $0)) _e))",
        "(lambda (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lambda (_rflatten (cons _e (cons _a (cdr (cdr (map (lambda $0) (_rsplit _rempty $0))))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1))))) $0 _q))",
        "(lambda (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _w $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _n $0))))",
        "(lambda (_rflatten (_rappend _q (_rsplit _q $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (if (_rmatch $0 $2) (_rconcat $3 $0) $0)))))) _w _g $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat $1 _w) $2)))) _p _a $0))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _w _a))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2))))))))) $0 (lambda (cons _w $0)) _rempty))",
        "(lambda (_rflatten (cons _rempty (cons _a (_rsplit _a (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _w))))))",
        "(lambda (_rflatten (cons _rempty (cons _a (_rsplit _rdot (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _w))))))",
        "(lambda (_rflatten (cons _rempty (cons _a (_rsplit _p (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _w))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) (_rflatten (_rrevcdr (_rsplit _rempty $0))) _j))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _j _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _rempty _j))",
        "(lambda (_rflatten (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _rempty) _j))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _i))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _s _e))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _e _s)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _s _e) _e))",
        "(lambda (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2))))))))) $0 _b _j))",
        "(lambda (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lambda (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rappend _j (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lambda (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lambda (_rflatten (_rappend _j (_rrevcdr (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1))))) $0 _k))",
        "(lambda (_rflatten (_rappend _k (_rsplit _rdot $0))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _rempty $0))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _j $0))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _t $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1))))) $0 _a))",
        "(lambda (_rflatten (_rappend _a (_rsplit _rempty $0))))",
        "(lambda (_rflatten (_rappend _a (_rsplit _t $0))))",
        "(lambda (_rflatten (_rappend _a (_rsplit _k $0))))",
        "(lambda (_rflatten (_rappend _a (_rsplit _z $0))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _a))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda $0)) _a _rempty))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2))))))))) $0 (lambda (map (lambda $0) $0)) _rempty))",
        "(lambda (_rflatten (cons _v (_rsplit _a $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _e $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _f $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _c $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 _l _o))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (if (_rmatch _o $0) _l $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda $0)) _l _o))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 _l _o) (lambda $0)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 _l (_rconcat _o _rempty)))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (map (lam (if (_rmatch $0 #2) #1 $0)) (_rsplit _rempty #0)))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2))))))",
            "arity": 3,
            "name": "fn_0",
            "utility": 6372,
            "final_cost": 32206,
            "compression_ratio": 1.19648512699497,
            "cumulative_compression_ratio": 1.19648512699497,
            "num_uses": 24,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 _l (_rconcat _o _rempty)": "(_rflatten (map (lam (if (_rmatch $0 (_rconcat _o _rempty)) _l $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _k _b) _c": "(_rflatten (map (lam (if (_rmatch $0 _c) (_rconcat _k _b) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 (_rconcat #0 #0) _e": "(_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat $0 $0) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 (_rconcat #0 _e) _e": "(_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat $0 _e) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _e #0) _e": "(_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat _e $0) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _e _e) _e": "(_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat _e _e) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _q #0) _g": "(_rflatten (map (lam (if (_rmatch $0 _g) (_rconcat _q $0) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _q _g) _g": "(_rflatten (map (lam (if (_rmatch $0 _g) (_rconcat _q _g) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _w #0) _g": "(_rflatten (map (lam (if (_rmatch $0 _g) (_rconcat _w $0) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _n _k) _l": "(_rflatten (map (lam (if (_rmatch $0 _l) (_rconcat _n _k) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 _l _m": "(_rflatten (map (lam (if (_rmatch $0 _m) _l $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 (_rflatten (map (lam $0) (_rsplit _rempty $0))) _l _m": "(_rflatten (map (lam (if (_rmatch $0 _m) _l $0)) (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0))))))"
                },
                {
                    "fn_0 $0 _l _o": "(_rflatten (map (lam (if (_rmatch $0 _o) _l $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 (_rflatten (map (lam $0) (_rsplit _rempty $0))) _l _o": "(_rflatten (map (lam (if (_rmatch $0 _o) _l $0)) (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0))))))"
                },
                {
                    "fn_0 $0 (_rconcat _a _w) _p": "(_rflatten (map (lam (if (_rmatch $0 _p) (_rconcat _a _w) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 $0 (_rconcat _x _w) _t": "(_rflatten (map (lam (if (_rmatch $0 _t) (_rconcat _x _w) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 (_rflatten (_rsplit _a $0)) (_rconcat _x _w) _t": "(_rflatten (map (lam (if (_rmatch $0 _t) (_rconcat _x _w) $0)) (_rsplit _rempty (_rflatten (_rsplit _a $0)))))"
                },
                {
                    "fn_0 (_rflatten (map (lam $0) (_rsplit _rempty $0))) (_rconcat _x _w) _t": "(_rflatten (map (lam (if (_rmatch $0 _t) (_rconcat _x _w) $0)) (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0))))))"
                },
                {
                    "fn_0 $0 _n _t": "(_rflatten (map (lam (if (_rmatch $0 _t) _n $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_0 (_rflatten (map (lam (if (_rmatch $0 _t) (_rconcat _x _w) $0)) (_rsplit _rempty $0))) _n _t": "(_rflatten (map (lam (if (_rmatch $0 _t) _n $0)) (_rsplit _rempty (_rflatten (map (lam (if (_rmatch $0 _t) (_rconcat _x _w) $0)) (_rsplit _rempty $0))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #2 (cons #1 (cdr (_rsplit _rempty #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2))))))))",
            "arity": 3,
            "name": "fn_1",
            "utility": 5151,
            "final_cost": 27131,
            "compression_ratio": 1.187055397884339,
            "cumulative_compression_ratio": 1.4202941284877078,
            "num_uses": 30,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 _a _a": "(_rflatten (cons _a (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _w _a": "(_rflatten (cons _a (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _w _b": "(_rflatten (cons _b (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _e _e": "(_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _o _e": "(_rflatten (cons _e (cons _o (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _s _e": "(_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _w _e": "(_rflatten (cons _e (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _o _f": "(_rflatten (cons _f (cons _o (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _w _g": "(_rflatten (cons _g (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _i _i": "(_rflatten (cons _i (cons _i (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _r _i": "(_rflatten (cons _i (cons _r (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 (_rflatten (cons _b (cdr (_rsplit _rempty $0)))) _r _i": "(_rflatten (cons _i (cons _r (cdr (_rsplit _rempty (_rflatten (cons _b (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_1 (_rflatten (cons _z (cdr (_rsplit _rempty $0)))) _r _i": "(_rflatten (cons _i (cons _r (cdr (_rsplit _rempty (_rflatten (cons _z (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_1 $0 _rempty _i": "(_rflatten (cons _i (cons _rempty (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _o _j": "(_rflatten (cons _j (cons _o (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _a _n": "(_rflatten (cons _n (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _a _q": "(_rflatten (cons _q (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _o _rdot": "(_rflatten (cons _rdot (cons _o (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _a _rempty": "(_rflatten (cons _rempty (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 (_rflatten (map (lam $0) (_rsplit _rempty $0))) _a _rempty": "(_rflatten (cons _rempty (cons _a (cdr (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_1 $0 _i _rempty": "(_rflatten (cons _rempty (cons _i (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _w _u": "(_rflatten (cons _u (cons _w (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _i _w": "(_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 (_rconcat _e _rempty) _x": "(_rflatten (cons _x (cons (_rconcat _e _rempty) (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 $0 _e _x": "(_rflatten (cons _x (cons _e (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_1 (_rflatten (cons _z (cdr (_rsplit _rempty $0)))) _e _x": "(_rflatten (cons _x (cons _e (cdr (_rsplit _rempty (_rflatten (cons _z (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_1 $0 _o _x": "(_rflatten (cons _x (cons _o (cdr (_rsplit _rempty $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rrevcdr (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1))))))",
            "arity": 2,
            "name": "fn_2",
            "utility": 2323,
            "final_cost": 24838,
            "compression_ratio": 1.0923182220790724,
            "cumulative_compression_ratio": 1.5514131572590386,
            "num_uses": 20,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 $0 (_rconcat _a _o)": "(_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 $0 (_rconcat _o _m)": "(_rflatten (_rappend (_rconcat _o _m) (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 (_rflatten (map (lam $0) (_rsplit _rempty $0))) (_rconcat _o _m)": "(_rflatten (_rappend (_rconcat _o _m) (_rrevcdr (_rsplit _rempty (_rflatten (map (lam $0) (_rsplit _rempty $0)))))))"
                },
                {
                    "fn_2 $0 _e": "(_rflatten (_rappend _e (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 $0 _f": "(_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 $0 _i": "(_rflatten (_rappend _i (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 (_rflatten (_rappend _rempty (_rrevcdr (_rsplit _rempty $0)))) _j": "(_rflatten (_rappend _j (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _rempty (_rrevcdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_2 (_rflatten (_rrevcdr (_rsplit _rempty $0))) _j": "(_rflatten (_rappend _j (_rrevcdr (_rsplit _rempty (_rflatten (_rrevcdr (_rsplit _rempty $0)))))))"
                },
                {
                    "fn_2 $0 _r": "(_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 (_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0)))) _r": "(_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_2 (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0)))) _r": "(_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _r (_rrevcdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_2 $0 _rempty": "(_rflatten (_rappend _rempty (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 $0 _t": "(_rflatten (_rappend _t (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))) _t": "(_rflatten (_rappend _t (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))))"
                },
                {
                    "fn_2 (_rflatten (_rappend _a (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))) _u": "(_rflatten (_rappend _u (_rrevcdr (_rsplit _rempty (_rflatten (_rappend _a (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #2 (_rappend #1 (_rrevcdr (_rrevcdr (_rsplit _rempty #0))))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr (_rrevcdr (_rsplit _rempty $2)))))))))",
            "arity": 3,
            "name": "fn_3",
            "utility": 1919,
            "final_cost": 22957,
            "compression_ratio": 1.0819357930043123,
            "cumulative_compression_ratio": 1.678529424576382,
            "num_uses": 12,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 $0 _o _a": "(_rflatten (_rappend _a (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 $0 _b _j": "(_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 $0 _rempty _j": "(_rflatten (_rappend _j (_rappend _rempty (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 $0 _j _rempty": "(_rflatten (_rappend _rempty (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 $0 _d _t": "(_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 (fn_2 $0 _t) _d _t": "(_rflatten (_rappend _t (_rappend _d (_rrevcdr (_rrevcdr (_rsplit _rempty (fn_2 $0 _t)))))))"
                },
                {
                    "fn_3 $0 _o _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 (fn_2 $0 _e) _o _u": "(_rflatten (_rappend _u (_rappend _o (_rrevcdr (_rrevcdr (_rsplit _rempty (fn_2 $0 _e)))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map #1 (_rsplit _rempty #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1)))))",
            "arity": 2,
            "name": "fn_4",
            "utility": 1515,
            "final_cost": 21471,
            "compression_ratio": 1.0692096315961064,
            "cumulative_compression_ratio": 1.7946998276745378,
            "num_uses": 30,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 $0 (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 (fn_0 $0 (_rconcat _x _w) _t) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rempty (fn_0 $0 (_rconcat _x _w) _t))))"
                },
                {
                    "fn_4 (fn_0 $0 _l _m) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rempty (fn_0 $0 _l _m))))"
                },
                {
                    "fn_4 (fn_0 $0 _l _o) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rempty (fn_0 $0 _l _o))))"
                },
                {
                    "fn_4 (fn_1 $0 _r _i) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rempty (fn_1 $0 _r _i))))"
                },
                {
                    "fn_4 (fn_2 $0 (_rconcat _o _m)) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rempty (fn_2 $0 (_rconcat _o _m)))))"
                },
                {
                    "fn_4 (fn_2 $0 _r) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rempty (fn_2 $0 _r))))"
                },
                {
                    "fn_4 (fn_3 $0 _d _t) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rempty (fn_3 $0 _d _t))))"
                },
                {
                    "fn_4 (fn_3 $0 _o _u) (lam $0)": "(_rflatten (map (lam $0) (_rsplit _rempty (fn_3 $0 _o _u))))"
                },
                {
                    "fn_4 $0 (lam (_rconcat $0 _v))": "(_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 (car (map (lam $1) (_rsplit _rempty $0))) (lam (_rconcat $0 _v))": "(_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty (car (map (lam $1) (_rsplit _rempty $0))))))"
                },
                {
                    "fn_4 $0 (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 $0 (lam (_rconcat _w _t))": "(_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 $0 (lam (car (map (lam (_rconcat $1 _v)) (_rsplit _rempty $1))))": "(_rflatten (map (lam (car (map (lam (_rconcat $1 _v)) (_rsplit _rempty $1)))) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 $0 (lam (if (_rmatch $0 _e) (_rconcat $0 $0) $0))": "(_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat $0 $0) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 $0 (lam (if (_rmatch $0 _e) (_rconcat $0 _e) $0))": "(_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat $0 _e) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 $0 (lam (if (_rmatch $0 _e) (_rconcat _e $0) $0))": "(_rflatten (map (lam (if (_rmatch $0 _e) (_rconcat _e $0) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 $0 (lam (if (_rmatch $0 _g) (_rconcat _q $0) $0))": "(_rflatten (map (lam (if (_rmatch $0 _g) (_rconcat _q $0) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 $0 (lam (if (_rmatch $0 _g) (_rconcat _w $0) $0))": "(_rflatten (map (lam (if (_rmatch $0 _g) (_rconcat _w $0) $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 $0 (lam (if (_rmatch _m $0) _l $0))": "(_rflatten (map (lam (if (_rmatch _m $0) _l $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 $0 (lam (if (_rmatch _o $0) _l $0))": "(_rflatten (map (lam (if (_rmatch _o $0) _l $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 $0 (lam _k)": "(_rflatten (map (lam _k) (_rsplit _rempty $0)))"
                },
                {
                    "fn_4 (_rflatten (map (lam _k) (_rsplit _rempty $0))) (lam _k)": "(_rflatten (map (lam _k) (_rsplit _rempty (_rflatten (map (lam _k) (_rsplit _rempty $0))))))"
                },
                {
                    "fn_4 (_rflatten (map (lam _rdot) (_rsplit _rempty $0))) (lam _k)": "(_rflatten (map (lam _k) (_rsplit _rempty (_rflatten (map (lam _rdot) (_rsplit _rempty $0))))))"
                },
                {
                    "fn_4 $0 (lam _rdot)": "(_rflatten (map (lam _rdot) (_rsplit _rempty $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rsplit _a #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _a $1)))))",
            "arity": 2,
            "name": "fn_5",
            "utility": 1212,
            "final_cost": 20278,
            "compression_ratio": 1.0588322319755399,
            "cumulative_compression_ratio": 1.9002860242627477,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 $0 _a": "(_rflatten (_rappend _a (_rsplit _a $0)))"
                },
                {
                    "fn_5 $0 _d": "(_rflatten (_rappend _d (_rsplit _a $0)))"
                },
                {
                    "fn_5 $0 _k": "(_rflatten (_rappend _k (_rsplit _a $0)))"
                },
                {
                    "fn_5 $0 _q": "(_rflatten (_rappend _q (_rsplit _a $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_4 #2 (lam (if (_rmatch $0 #1) (_rconcat #0 $0) $0)))",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (if (_rmatch $0 $2) (_rconcat $3 $0) $0))))))",
            "arity": 3,
            "name": "fn_6",
            "utility": 1011,
            "final_cost": 19267,
            "compression_ratio": 1.0524731406031038,
            "cumulative_compression_ratio": 2.0,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_6 #0 _e $0": "(fn_4 $0 (lam (if (_rmatch $0 _e) (_rconcat $0 $0) $0)))"
                },
                {
                    "fn_6 _e _e $0": "(fn_4 $0 (lam (if (_rmatch $0 _e) (_rconcat _e $0) $0)))"
                },
                {
                    "fn_6 _q _g $0": "(fn_4 $0 (lam (if (_rmatch $0 _g) (_rconcat _q $0) $0)))"
                },
                {
                    "fn_6 _w _g $0": "(fn_4 $0 (lam (if (_rmatch $0 _g) (_rconcat _w $0) $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (cdr (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1))))))",
            "arity": 2,
            "name": "fn_7",
            "utility": 606,
            "final_cost": 18666,
            "compression_ratio": 1.032197578484946,
            "cumulative_compression_ratio": 2.064395156969892,
            "num_uses": 32,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_7 $0 (_rconcat _b _w)": "(_rflatten (cons (_rconcat _b _w) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 $0 (_rconcat _e _s)": "(_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 $0 (_rconcat _i _r)": "(_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 $0 (_rconcat _i _rempty)": "(_rflatten (cons (_rconcat _i _rempty) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 $0 (_rconcat _n _a)": "(_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 $0 (_rconcat _q _a)": "(_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 $0 (_rconcat _w _i)": "(_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 $0 (_rconcat _x _e)": "(_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 $0 _a": "(_rflatten (cons _a (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 $0 _b": "(_rflatten (cons _b (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 (fn_1 $0 _w _e) _b": "(_rflatten (cons _b (cdr (_rsplit _rempty (fn_1 $0 _w _e)))))"
                },
                {
                    "fn_7 (fn_1 $0 _w _g) _b": "(_rflatten (cons _b (cdr (_rsplit _rempty (fn_1 $0 _w _g)))))"
                },
                {
                    "fn_7 (fn_1 $0 _w _u) _b": "(_rflatten (cons _b (cdr (_rsplit _rempty (fn_1 $0 _w _u)))))"
                },
                {
                    "fn_7 (_rflatten (cons _a (cons _a (cdr (cdr (_rsplit _rempty $0)))))) _e": "(_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons _a (cons _a (cdr (cdr (_rsplit _rempty $0))))))))))"
                },
                {
                    "fn_7 (fn_1 $0 _s _e) _e": "(_rflatten (cons _e (cdr (_rsplit _rempty (fn_1 $0 _s _e)))))"
                },
                {
                    "fn_7 $0 _i": "(_rflatten (cons _i (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 (_rflatten (cons _b (cdr (_rsplit _rempty $0)))) _i": "(_rflatten (cons _i (cdr (_rsplit _rempty (_rflatten (cons _b (cdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_7 (fn_1 $0 _o _e) _j": "(_rflatten (cons _j (cdr (_rsplit _rempty (fn_1 $0 _o _e)))))"
                },
                {
                    "fn_7 (fn_1 $0 _o _f) _j": "(_rflatten (cons _j (cdr (_rsplit _rempty (fn_1 $0 _o _f)))))"
                },
                {
                    "fn_7 (fn_1 $0 _o _rdot) _j": "(_rflatten (cons _j (cdr (_rsplit _rempty (fn_1 $0 _o _rdot)))))"
                },
                {
                    "fn_7 (fn_1 $0 _o _x) _j": "(_rflatten (cons _j (cdr (_rsplit _rempty (fn_1 $0 _o _x)))))"
                },
                {
                    "fn_7 (fn_1 $0 _a _a) _n": "(_rflatten (cons _n (cdr (_rsplit _rempty (fn_1 $0 _a _a)))))"
                },
                {
                    "fn_7 $0 _w": "(_rflatten (cons _w (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 (fn_1 $0 _i _i) _w": "(_rflatten (cons _w (cdr (_rsplit _rempty (fn_1 $0 _i _i)))))"
                },
                {
                    "fn_7 (fn_1 $0 _e _e) _x": "(_rflatten (cons _x (cdr (_rsplit _rempty (fn_1 $0 _e _e)))))"
                },
                {
                    "fn_7 $0 _z": "(_rflatten (cons _z (cdr (_rsplit _rempty $0))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #2 (cons _a (#1 (cdr (_rsplit _rempty #0))))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2)))))))))",
            "arity": 3,
            "name": "fn_8",
            "utility": 504,
            "final_cost": 18181,
            "compression_ratio": 1.0266762004290193,
            "cumulative_compression_ratio": 2.1194653759419175,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_8 $0 cdr _a": "(_rflatten (cons _a (cons _a (cdr (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_8 $0 cdr _e": "(_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_8 (fn_7 $0 _a) cdr _e": "(_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty (fn_7 $0 _a)))))))"
                },
                {
                    "fn_8 $0 (cons _rempty) _q": "(_rflatten (cons _q (cons _a (cons _rempty (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_8 $0 (cons _w) _rempty": "(_rflatten (cons _rempty (cons _a (cons _w (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_8 $0 (map (lam $0)) _rempty": "(_rflatten (cons _rempty (cons _a (map (lam $0) (cdr (_rsplit _rempty $0))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_0 #2 (_rconcat #1 _w) #0)",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (if (_rmatch $0 $1) $2 $0)) (_rsplit _rempty $2)))))) $0 (_rconcat $1 _w) $2))))",
            "arity": 3,
            "name": "fn_9",
            "utility": 404,
            "final_cost": 17777,
            "compression_ratio": 1.022725994262249,
            "cumulative_compression_ratio": 2.1676323339146086,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_9 _p _a $0": "(fn_0 $0 (_rconcat _a _w) _p)"
                },
                {
                    "fn_9 _t _x $0": "(fn_0 $0 (_rconcat _x _w) _t)"
                },
                {
                    "fn_9 _t _x (_rflatten (_rsplit _a $0))": "(fn_0 (_rflatten (_rsplit _a $0)) (_rconcat _x _w) _t)"
                },
                {
                    "fn_9 _t _x (fn_4 $0 (lam $0))": "(fn_0 (fn_4 $0 (lam $0)) (_rconcat _x _w) _t)"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}