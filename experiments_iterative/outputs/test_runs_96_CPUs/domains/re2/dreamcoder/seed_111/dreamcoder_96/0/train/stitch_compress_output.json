{
    "cmd": "python3 run_iterative_experiment.py --experiment_name test_runs_96_CPUs --experiment_type dreamcoder --domain re2 --encoder re2 --iterations 16 --global_batch_sizes 96 --enumeration_timeout 1000 --recognition_train_steps 10000 --random_seeds 111 222 333 --verbose",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "no_curried_metavars": false,
            "no_curried_bodies": false,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "structure_penalty": 1.0,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true,
            "fused_lambda_tags": {
                "tags": null
            }
        }
    },
    "original_cost": 14851,
    "final_cost": 8184,
    "compression_ratio": 1.8146383186705768,
    "num_abstractions": 10,
    "original": [
        "(lam (_rflatten (cons _n (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _n (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _n (cdr (_rsplit _rempty (_rflatten (cons _a (cons _a (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (_rappend _d (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _e $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit (_rnot _w) $0))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty (car (map (lam $1) (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam (car (map (lam (_rconcat $1 _v)) (_rsplit _rempty $1)))) (_rsplit _rempty $0))))",
        "(lam (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch (_rtail (cdr (_rsplit _rempty $0))) _e) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch _e (_rtail (cdr (_rsplit _rempty $0)))) $0 (_rflatten (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (_rflatten (if (_rmatch _e (_rtail (_rsplit _rempty $0))) (_rsplit _rempty $0) (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _w (cdr (_rsplit _rempty (_rflatten (cons _i (cons _i (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _q (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _q (cons _a (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _q (cons _a (cons _rempty (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rappend _f (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (cons _v (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (map (lam (_rconcat _r _v)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rappend _a (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (map (lam (_rconcat _w _t)) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (map (lam (if (_rmatch $0 _t) _n $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (map (lam $0) (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons _a (cons _a (cdr (cdr (_rsplit _rempty $0)))))))))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty (_rflatten (cons _a (cdr (_rsplit _rempty $0)))))))))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rappend _j (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))))))))",
        "(lam (_rflatten (cons _v (_rsplit _a $0))))",
        "(lam (_rflatten (cons _v (_rsplit _b $0))))",
        "(lam (_rflatten (cons _v (_rsplit _c $0))))",
        "(lam (_rflatten (cons _v (_rsplit _e $0))))",
        "(lam (_rflatten (cons _v (_rsplit _f $0))))"
    ],
    "rewritten": [
        "(lam (_rflatten (cons _n (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_9 _n $0))",
        "(lam (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 (_rconcat _n _a)))",
        "(lam (fn_0 (fn_9 _a $0) _n))",
        "(lam (fn_4 $0 _a _d))",
        "(lam (fn_4 $0 _b _d))",
        "(lam (fn_4 $0 _c _d))",
        "(lam (fn_4 $0 _e _d))",
        "(lam (fn_4 $0 _rdot _d))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rdot $0))))",
        "(lam (fn_1 $0 (lam (_rconcat $0 _v))))",
        "(lam (_rflatten (map (lam (_rconcat $0 _v)) (_rsplit (_rnot _w) $0))))",
        "(lam (fn_1 (car (map (lam $1) (_rsplit _rempty $0))) (lam (_rconcat $0 _v))))",
        "(lam (fn_1 $0 (lam (car (map (lam (_rconcat $1 _v)) (_rsplit _rempty $1))))))",
        "(lam (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) $0 (fn_4 $0 _rempty _o)))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (fn_4 $0 _rempty _o)))",
        "(lam (if (_rmatch (_rtail (cdr (_rsplit _rempty $0))) _e) $0 (fn_4 $0 _rempty _o)))",
        "(lam (if (_rmatch _e (_rtail (cdr (_rsplit _rempty $0)))) $0 (fn_4 $0 _rempty _o)))",
        "(lam (_rflatten (if (_rmatch _e (_rtail (_rsplit _rempty $0))) (_rsplit _rempty $0) (_rappend _o (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (fn_2 $0 _f))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_5 $0 _i _w))",
        "(lam (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 (_rconcat _w _i)))",
        "(lam (fn_0 (fn_5 $0 _i _i) _w))",
        "(lam (_rflatten (cons _q (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_9 _q $0))",
        "(lam (_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 (_rconcat _q _a)))",
        "(lam (fn_3 $0 (lam (cons _rempty $0)) _q))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rdot $0))))",
        "(lam (fn_1 $0 (lam (_rconcat _r _v))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (_rappend _f (fn_8 $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _r _v)) (cons _v (cdr (_rsplit _rempty $0))))))",
        "(lam (fn_7 $0 _v _r))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 _b))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (fn_6 (_rsplit _rdot $0) _a _o))",
        "(lam (fn_6 (_rsplit _rempty $0) _a _o))",
        "(lam (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (fn_2 $0 (_rconcat _a _o)))",
        "(lam (fn_6 (_rappend _a (fn_8 $0)) _a _o))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rdot $0))))",
        "(lam (fn_1 $0 (lam (_rconcat _w _t))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _w _t)) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (fn_7 $0 _t _w))",
        "(lam (fn_1 $0 (lam (if (_rmatch $0 _t) _n $0))))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lam (fn_3 $0 (lam (cdr $0)) _e))",
        "(lam (_rflatten (cons _e (cons _a (cdr (cdr (map (lam $0) (_rsplit _rempty $0))))))))",
        "(lam (fn_0 (fn_3 $0 (lam (cdr $0)) _a) _e))",
        "(lam (fn_3 (fn_0 $0 _a) (lam (cdr $0)) _e))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (fn_2 $0 _i))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_5 $0 _s _e))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 (_rconcat _e _s)))",
        "(lam (fn_0 (fn_5 $0 _s _e) _e))",
        "(lam (fn_6 (_rrevcdr (_rsplit _rdot $0)) _b _j))",
        "(lam (fn_6 (fn_8 $0) _b _j))",
        "(lam (fn_6 (_rappend _j (_rrevcdr (fn_8 $0))) _b _j))",
        "(lam (fn_6 (_rrevcdr (_rappend _j (fn_8 $0))) _b _j))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rappend _j (_rappend _b (_rrevcdr (fn_8 $0))))))))",
        "(lam (_rflatten (cons _v (_rsplit _a $0))))",
        "(lam (_rflatten (cons _v (_rsplit _b $0))))",
        "(lam (_rflatten (cons _v (_rsplit _c $0))))",
        "(lam (_rflatten (cons _v (_rsplit _e $0))))",
        "(lam (_rflatten (cons _v (_rsplit _f $0))))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (_rflatten (cons _n (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a $1))) _n $0))",
        "(lambda (_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _n _a)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a $1))) _a $0) _n))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rsplit $1 $2)))))) $0 _a _d))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rsplit $1 $2)))))) $0 _b _d))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rsplit $1 $2)))))) $0 _c _d))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rsplit $1 $2)))))) $0 _e _d))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rsplit $1 $2)))))) $0 _rdot _d))",
        "(lambda (_rflatten (map (lambda (_rconcat $0 _v)) (_rsplit _rdot $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat $0 _v))))",
        "(lambda (_rflatten (map (lambda (_rconcat $0 _v)) (_rsplit (_rnot _w) $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) (car (map (lambda $1) (_rsplit _rempty $0))) (lambda (_rconcat $0 _v))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (car (map (lambda (_rconcat $1 _v)) (_rsplit _rempty $1))))))",
        "(lambda (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) $0 (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rsplit $1 $2)))))) $0 _rempty _o)))",
        "(lambda (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rsplit $1 $2)))))) $0 _rempty _o)))",
        "(lambda (if (_rmatch (_rtail (cdr (_rsplit _rempty $0))) _e) $0 (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rsplit $1 $2)))))) $0 _rempty _o)))",
        "(lambda (if (_rmatch _e (_rtail (cdr (_rsplit _rempty $0)))) $0 (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rsplit $1 $2)))))) $0 _rempty _o)))",
        "(lambda (_rflatten (if (_rmatch _e (_rtail (_rsplit _rempty $0))) (_rsplit _rempty $0) (_rappend _o (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _f))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (_rflatten (cons _w (cons _i (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _i _w))",
        "(lambda (_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _w _i)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _i _i) _w))",
        "(lambda (_rflatten (cons _q (cons _a (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a $1))) _q $0))",
        "(lambda (_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _q _a)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2))))))))) $0 (lambda (cons _rempty $0)) _q))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (_rsplit _rdot $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _r _v))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (_rappend _f (#(lambda (_rrevcdr (_rsplit _rempty $0))) $0)))))",
        "(lambda (_rflatten (map (lambda (_rconcat _r _v)) (cons _v (cdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (map (lambda (_rconcat $1 $2)) (_rsplit _rempty $2))))))) $0 _v _r))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _b))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (_rflatten (cons _b (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rsplit _rdot $0) _a _o))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rsplit _rempty $0) _a _o))",
        "(lambda (_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 (_rconcat _a _o)))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rappend _a (#(lambda (_rrevcdr (_rsplit _rempty $0))) $0)) _a _o))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (_rsplit _rdot $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _w _t))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (cons _i (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _w _t)) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (map (lambda (_rconcat $1 $2)) (_rsplit _rempty $2))))))) $0 _t _w))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (if (_rmatch $0 _t) _n $0))))",
        "(lambda (_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rdot $0)))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2))))))))) $0 (lambda (cdr $0)) _e))",
        "(lambda (_rflatten (cons _e (cons _a (cdr (cdr (map (lambda $0) (_rsplit _rempty $0))))))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2))))))))) $0 (lambda (cdr $0)) _a) _e))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2))))))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _a) (lambda (cdr $0)) _e))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _i))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (_rflatten (_rappend _i (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _s _e))",
        "(lambda (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _e _s)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _s _e) _e))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rrevcdr (_rsplit _rdot $0)) _b _j))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (#(lambda (_rrevcdr (_rsplit _rempty $0))) $0) _b _j))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rappend _j (_rrevcdr (#(lambda (_rrevcdr (_rsplit _rempty $0))) $0))) _b _j))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2))))))) (_rrevcdr (_rappend _j (#(lambda (_rrevcdr (_rsplit _rempty $0))) $0))) _b _j))",
        "(lambda (_rflatten (_rappend _j (_rrevcdr (_rappend _j (_rappend _b (_rrevcdr (#(lambda (_rrevcdr (_rsplit _rempty $0))) $0))))))))",
        "(lambda (_rflatten (cons _v (_rsplit _a $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _c $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _e $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _f $0))))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (cons #1 (cdr (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1))))))",
            "arity": 2,
            "name": "fn_0",
            "utility": 2020,
            "final_cost": 12831,
            "compression_ratio": 1.1574312212610085,
            "cumulative_compression_ratio": 1.1574312212610085,
            "num_uses": 10,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 (_rconcat _e _s)": "(_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _n _a)": "(_rflatten (cons (_rconcat _n _a) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _q _a)": "(_rflatten (cons (_rconcat _q _a) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _w _i)": "(_rflatten (cons (_rconcat _w _i) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 _a": "(_rflatten (cons _a (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 _b": "(_rflatten (cons _b (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 (_rflatten (cons _a (cons _a (cdr (cdr (_rsplit _rempty $0)))))) _e": "(_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons _a (cons _a (cdr (cdr (_rsplit _rempty $0))))))))))"
                },
                {
                    "fn_0 (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))) _e": "(_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_0 (_rflatten (cons _a (cons _a (cdr (_rsplit _rempty $0))))) _n": "(_rflatten (cons _n (cdr (_rsplit _rempty (_rflatten (cons _a (cons _a (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_0 (_rflatten (cons _i (cons _i (cdr (_rsplit _rempty $0))))) _w": "(_rflatten (cons _w (cdr (_rsplit _rempty (_rflatten (cons _i (cons _i (cdr (_rsplit _rempty $0)))))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map #1 (_rsplit _rempty #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1)))))",
            "arity": 2,
            "name": "fn_1",
            "utility": 1212,
            "final_cost": 11619,
            "compression_ratio": 1.104311902917635,
            "cumulative_compression_ratio": 1.2781650744470263,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 (lam (_rconcat $0 _v))": "(_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 (car (map (lam $1) (_rsplit _rempty $0))) (lam (_rconcat $0 _v))": "(_rflatten (map (lam (_rconcat $0 _v)) (_rsplit _rempty (car (map (lam $1) (_rsplit _rempty $0))))))"
                },
                {
                    "fn_1 $0 (lam (_rconcat _r _v))": "(_rflatten (map (lam (_rconcat _r _v)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam (_rconcat _w _t))": "(_rflatten (map (lam (_rconcat _w _t)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam (car (map (lam (_rconcat $1 _v)) (_rsplit _rempty $1))))": "(_rflatten (map (lam (car (map (lam (_rconcat $1 _v)) (_rsplit _rempty $1)))) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam (if (_rmatch $0 _t) _n $0))": "(_rflatten (map (lam (if (_rmatch $0 _t) _n $0)) (_rsplit _rempty $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rrevcdr (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1))))))",
            "arity": 2,
            "name": "fn_2",
            "utility": 1212,
            "final_cost": 10407,
            "compression_ratio": 1.1164600749495532,
            "cumulative_compression_ratio": 1.4270202748150282,
            "num_uses": 3,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 $0 (_rconcat _a _o)": "(_rflatten (_rappend (_rconcat _a _o) (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 $0 _f": "(_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 $0 _i": "(_rflatten (_rappend _i (_rrevcdr (_rsplit _rempty $0))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #2 (cons _a (#1 (cdr (_rsplit _rempty #0))))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons _a ($1 (cdr (_rsplit _rempty $2)))))))))",
            "arity": 3,
            "name": "fn_3",
            "utility": 504,
            "final_cost": 9903,
            "compression_ratio": 1.0508936685852772,
            "cumulative_compression_ratio": 1.4996465717459355,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 $0 cdr _a": "(_rflatten (cons _a (cons _a (cdr (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 $0 cdr _e": "(_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_3 (fn_0 $0 _a) cdr _e": "(_rflatten (cons _e (cons _a (cdr (cdr (_rsplit _rempty (fn_0 $0 _a)))))))"
                },
                {
                    "fn_3 $0 (cons _rempty) _q": "(_rflatten (cons _q (cons _a (cons _rempty (cdr (_rsplit _rempty $0))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #2 (_rsplit #1 #0)))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rsplit $1 $2))))))",
            "arity": 3,
            "name": "fn_4",
            "utility": 404,
            "final_cost": 9499,
            "compression_ratio": 1.0425307927150227,
            "cumulative_compression_ratio": 1.5634277292346563,
            "num_uses": 9,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 $0 _a _d": "(_rflatten (_rappend _d (_rsplit _a $0)))"
                },
                {
                    "fn_4 $0 _b _d": "(_rflatten (_rappend _d (_rsplit _b $0)))"
                },
                {
                    "fn_4 $0 _c _d": "(_rflatten (_rappend _d (_rsplit _c $0)))"
                },
                {
                    "fn_4 $0 _e _d": "(_rflatten (_rappend _d (_rsplit _e $0)))"
                },
                {
                    "fn_4 $0 _rdot _d": "(_rflatten (_rappend _d (_rsplit _rdot $0)))"
                },
                {
                    "fn_4 $0 _rempty _o": "(_rflatten (_rappend _o (_rsplit _rempty $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #2 (cons #1 (cdr (_rsplit _rempty #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2))))))))",
            "arity": 3,
            "name": "fn_5",
            "utility": 404,
            "final_cost": 9095,
            "compression_ratio": 1.0444200109950523,
            "cumulative_compression_ratio": 1.6328752061572291,
            "num_uses": 7,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 $0 _a _a": "(_rflatten (cons _a (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $0 _s _e": "(_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $0 _i _i": "(_rflatten (cons _i (cons _i (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $0 _a _n": "(_rflatten (cons _n (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $0 _a _q": "(_rflatten (cons _q (cons _a (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $0 _i _w": "(_rflatten (cons _w (cons _i (cdr (_rsplit _rempty $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #2 (_rappend #1 (_rrevcdr #0))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (_rappend $0 (_rappend $1 (_rrevcdr $2)))))))",
            "arity": 3,
            "name": "fn_6",
            "utility": 303,
            "final_cost": 8792,
            "compression_ratio": 1.0344631483166515,
            "cumulative_compression_ratio": 1.6891492265696086,
            "num_uses": 7,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_6 (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0)))) _b _j": "(_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_6 (_rrevcdr (_rappend _j (_rrevcdr (_rsplit _rempty $0)))) _b _j": "(_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rappend _j (_rrevcdr (_rsplit _rempty $0))))))))"
                },
                {
                    "fn_6 (_rrevcdr (_rsplit _rdot $0)) _b _j": "(_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_6 (_rrevcdr (_rsplit _rempty $0)) _b _j": "(_rflatten (_rappend _j (_rappend _b (_rrevcdr (_rrevcdr (_rsplit _rempty $0))))))"
                },
                {
                    "fn_6 (_rappend _a (_rrevcdr (_rsplit _rempty $0))) _a _o": "(_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rappend _a (_rrevcdr (_rsplit _rempty $0)))))))"
                },
                {
                    "fn_6 (_rsplit _rdot $0) _a _o": "(_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_6 (_rsplit _rempty $0) _a _o": "(_rflatten (_rappend _o (_rappend _a (_rrevcdr (_rsplit _rempty $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map (lam (_rconcat #2 #1)) (map (lam (_rconcat #2 #1)) (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (map (lambda (_rconcat $1 $2)) (_rsplit _rempty $2)))))))",
            "arity": 3,
            "name": "fn_7",
            "utility": 204,
            "final_cost": 8588,
            "compression_ratio": 1.0237540754541221,
            "cumulative_compression_ratio": 1.7292734047508151,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_7 $0 _v _r": "(_rflatten (map (lam (_rconcat _r _v)) (map (lam (_rconcat _r _v)) (_rsplit _rempty $0))))"
                },
                {
                    "fn_7 $0 _t _w": "(_rflatten (map (lam (_rconcat _w _t)) (map (lam (_rconcat _w _t)) (_rsplit _rempty $0))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rrevcdr (_rsplit _rempty #0))",
            "dreamcoder": "#(lambda (_rrevcdr (_rsplit _rempty $0)))",
            "arity": 1,
            "name": "fn_8",
            "utility": 202,
            "final_cost": 8386,
            "compression_ratio": 1.0240877653231577,
            "cumulative_compression_ratio": 1.7709277367040306,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_8 $0": "(_rrevcdr (_rsplit _rempty $0))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_5 #1 _a #0)",
            "dreamcoder": "#(lambda (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _a $1)))",
            "arity": 2,
            "name": "fn_9",
            "utility": 202,
            "final_cost": 8184,
            "compression_ratio": 1.0246823069403714,
            "cumulative_compression_ratio": 1.8146383186705768,
            "num_uses": 3,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_9 _a $0": "(fn_5 $0 _a _a)"
                },
                {
                    "fn_9 _n $0": "(fn_5 $0 _a _n)"
                },
                {
                    "fn_9 _q $0": "(fn_5 $0 _a _q)"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}